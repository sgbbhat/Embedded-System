
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000236  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000121  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000016f  00000000  00000000  0000061f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001aa  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000141  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000ad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_9>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a2 30       	cpi	r26, 0x02	; 2
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  cc:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#define clearBit(P,B)		(P &= ~BV(B))
#define toggleBit(P,B)		(P ~ = BV(B))

int main(void)
{
	DDRC = 0x80;				//Configure PortA as an Output port
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x24;  				//Configure PortD pin 7 as an output port
  d8:	84 e2       	ldi	r24, 0x24	; 36
  da:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00;				//Configure PortB for input
  dc:	14 b8       	out	0x04, r1	; 4
	PORTB |= 1 << PORTB3;		// when pin's direction is INPUT, setting the pin to HIGH will turn on internal pull up	
  de:	2b 9a       	sbi	0x05, 3	; 5
	setBit(PCICR,0);
  e0:	e8 e6       	ldi	r30, 0x68	; 104
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
	setBit(PCMSK0,3);
  ea:	eb e6       	ldi	r30, 0x6B	; 107
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
	//int buttonStateC = 0;         // current state of the button
	//int lastButtonStateC = 0;     // previous state of the button
	
    while (1)
    {
		if(cliFlag==0)
  f4:	80 91 00 01 	lds	r24, 0x0100
  f8:	90 91 01 01 	lds	r25, 0x0101
  fc:	89 2b       	or	r24, r25
  fe:	d1 f4       	brne	.+52     	; 0x134 <main+0x60>
		{
			if(PINB & (1<<PORTB0))
 100:	18 9b       	sbis	0x03, 0	; 3
 102:	16 c0       	rjmp	.+44     	; 0x130 <main+0x5c>
			{
				clearBit(PORTD,5);
 104:	5d 98       	cbi	0x0b, 5	; 11
				setBit(PORTC,7);
 106:	47 9a       	sbi	0x08, 7	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	88 e0       	ldi	r24, 0x08	; 8
 10c:	9d e3       	ldi	r25, 0x3D	; 61
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x3a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x44>
 118:	00 00       	nop
				_delay_ms(20000);
				setBit(PORTD,5);
 11a:	5d 9a       	sbi	0x0b, 5	; 11
				clearBit(PORTC,7);
 11c:	47 98       	cbi	0x08, 7	; 8
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	9d e3       	ldi	r25, 0x3D	; 61
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x50>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x5a>
 12e:	00 00       	nop
				_delay_ms(20000);
			}
			sei();
 130:	78 94       	sei
 132:	e0 cf       	rjmp	.-64     	; 0xf4 <main+0x20>
		}
		else
		{
			cli();
 134:	f8 94       	cli
 136:	2f e9       	ldi	r18, 0x9F	; 159
 138:	86 e8       	ldi	r24, 0x86	; 134
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x68>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x72>
 146:	00 00       	nop
			_delay_ms(500);
			cliFlag = 0;
 148:	10 92 01 01 	sts	0x0101, r1
 14c:	10 92 00 01 	sts	0x0100, r1
 150:	d1 cf       	rjmp	.-94     	; 0xf4 <main+0x20>

00000152 <__vector_9>:
		}
    }
}

ISR(PCINT0_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;i<10;i++)
	{
		setBit(PORTD,2);
 16a:	5a 9a       	sbi	0x0b, 2	; 11
 16c:	2f e3       	ldi	r18, 0x3F	; 63
 16e:	32 e4       	ldi	r19, 0x42	; 66
 170:	4f e0       	ldi	r20, 0x0F	; 15
 172:	21 50       	subi	r18, 0x01	; 1
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	40 40       	sbci	r20, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <__vector_9+0x20>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <__vector_9+0x2a>
 17c:	00 00       	nop
		_delay_ms(5000);
		clearBit(PORTD,2);
 17e:	5a 98       	cbi	0x0b, 2	; 11
 180:	2f e3       	ldi	r18, 0x3F	; 63
 182:	32 e4       	ldi	r19, 0x42	; 66
 184:	4f e0       	ldi	r20, 0x0F	; 15
 186:	21 50       	subi	r18, 0x01	; 1
 188:	30 40       	sbci	r19, 0x00	; 0
 18a:	40 40       	sbci	r20, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <__vector_9+0x34>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <__vector_9+0x3e>
 190:	00 00       	nop
 192:	01 97       	sbiw	r24, 0x01	; 1
    }
}

ISR(PCINT0_vect)
{
	for(int i=0;i<10;i++)
 194:	51 f7       	brne	.-44     	; 0x16a <__vector_9+0x18>
		setBit(PORTD,2);
		_delay_ms(5000);
		clearBit(PORTD,2);
		_delay_ms(5000);
	}
	cliFlag =1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 01 01 	sts	0x0101, r25
 19e:	80 93 00 01 	sts	0x0100, r24
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
