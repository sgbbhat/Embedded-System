
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000027e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000026c  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000121  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000175  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e2  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000141  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000b97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_9>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a8 30       	cpi	r26, 0x08	; 8
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  cc:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#define clearBit(P,B)		(P &= ~BV(B))
#define toggleBit(P,B)		(P ~ = BV(B))

int main(void)
{
	DDRC = 0x80;				//Configure PortA as an Output port
  d4:	20 e8       	ldi	r18, 0x80	; 128
  d6:	27 b9       	out	0x07, r18	; 7
	DDRD = 0x24;  				//Configure PortD pin 7 as an output port
  d8:	24 e2       	ldi	r18, 0x24	; 36
  da:	2a b9       	out	0x0a, r18	; 10
	DDRB = 0x00;				//Configure PortB for input
  dc:	14 b8       	out	0x04, r1	; 4
	PORTB |= 1 << PORTB3;		// when pin's direction is INPUT, setting the pin to HIGH will turn on internal pull up	
  de:	2b 9a       	sbi	0x05, 3	; 5
	PORTB |= 1 << PORTB0;	
  e0:	28 9a       	sbi	0x05, 0	; 5
	setBit(PCICR,0);
  e2:	e8 e6       	ldi	r30, 0x68	; 104
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	20 81       	ld	r18, Z
  e8:	21 60       	ori	r18, 0x01	; 1
  ea:	20 83       	st	Z, r18
	setBit(PCMSK0,3);
  ec:	eb e6       	ldi	r30, 0x6B	; 107
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	20 81       	ld	r18, Z
  f2:	28 60       	ori	r18, 0x08	; 8
  f4:	20 83       	st	Z, r18
		
    while (1)
    {		
		if(cliFlag==0)
  f6:	20 91 06 01 	lds	r18, 0x0106
  fa:	30 91 07 01 	lds	r19, 0x0107
  fe:	23 2b       	or	r18, r19
 100:	09 f0       	breq	.+2      	; 0x104 <main+0x30>
 102:	40 c0       	rjmp	.+128    	; 0x184 <main+0xb0>
		{		
			currentButton = (PINB & (1<<PORTB0));
 104:	23 b1       	in	r18, 0x03	; 3
 106:	82 2f       	mov	r24, r18
 108:	81 70       	andi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 03 01 	sts	0x0103, r25
 110:	80 93 02 01 	sts	0x0102, r24
			
			if(currentButton != previousButton)   // Maintain a counter and increment it after every press
 114:	20 91 00 01 	lds	r18, 0x0100
 118:	30 91 01 01 	lds	r19, 0x0101
 11c:	82 17       	cp	r24, r18
 11e:	93 07       	cpc	r25, r19
 120:	51 f0       	breq	.+20     	; 0x136 <main+0x62>
			{
				buttonPushCounterC = buttonPushCounterC + 1;
 122:	20 91 04 01 	lds	r18, 0x0104
 126:	30 91 05 01 	lds	r19, 0x0105
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	30 93 05 01 	sts	0x0105, r19
 132:	20 93 04 01 	sts	0x0104, r18
				
			if(buttonPushCounterC == 0)
			{
				;
			}
			else if(buttonPushCounterC == 1)
 136:	20 91 04 01 	lds	r18, 0x0104
 13a:	30 91 05 01 	lds	r19, 0x0105
 13e:	21 30       	cpi	r18, 0x01	; 1
 140:	31 05       	cpc	r19, r1
 142:	b1 f4       	brne	.+44     	; 0x170 <main+0x9c>
			{
				clearBit(PORTD,5);
 144:	5d 98       	cbi	0x0b, 5	; 11
				setBit(PORTC,7);
 146:	47 9a       	sbi	0x08, 7	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	38 e0       	ldi	r19, 0x08	; 8
 14c:	4d e3       	ldi	r20, 0x3D	; 61
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	30 40       	sbci	r19, 0x00	; 0
 152:	40 40       	sbci	r20, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x7a>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x84>
 158:	00 00       	nop
				_delay_ms(20000);
				setBit(PORTD,5);
 15a:	5d 9a       	sbi	0x0b, 5	; 11
				clearBit(PORTC,7);
 15c:	47 98       	cbi	0x08, 7	; 8
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	38 e0       	ldi	r19, 0x08	; 8
 162:	4d e3       	ldi	r20, 0x3D	; 61
 164:	21 50       	subi	r18, 0x01	; 1
 166:	30 40       	sbci	r19, 0x00	; 0
 168:	40 40       	sbci	r20, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x90>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x9a>
 16e:	00 00       	nop
				_delay_ms(20000);;
			}
			sei();
 170:	78 94       	sei
		currentButton = previousButton;
 172:	20 91 00 01 	lds	r18, 0x0100
 176:	30 91 01 01 	lds	r19, 0x0101
 17a:	30 93 03 01 	sts	0x0103, r19
 17e:	20 93 02 01 	sts	0x0102, r18
 182:	b9 cf       	rjmp	.-142    	; 0xf6 <main+0x22>
		}
		else
		{
			cli();
 184:	f8 94       	cli
 186:	2f e9       	ldi	r18, 0x9F	; 159
 188:	36 e8       	ldi	r19, 0x86	; 134
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	30 40       	sbci	r19, 0x00	; 0
 190:	40 40       	sbci	r20, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0xb8>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0xc2>
 196:	00 00       	nop
			_delay_ms(500);
			cliFlag = 0;
 198:	10 92 07 01 	sts	0x0107, r1
 19c:	10 92 06 01 	sts	0x0106, r1
 1a0:	aa cf       	rjmp	.-172    	; 0xf6 <main+0x22>

000001a2 <__vector_9>:
		}
    }
}

ISR(PCINT0_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	8a e0       	ldi	r24, 0x0A	; 10
 1b8:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;i<10;i++)
	{
		setBit(PORTD,2);
 1ba:	5a 9a       	sbi	0x0b, 2	; 11
 1bc:	2f e3       	ldi	r18, 0x3F	; 63
 1be:	32 e4       	ldi	r19, 0x42	; 66
 1c0:	4f e0       	ldi	r20, 0x0F	; 15
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	30 40       	sbci	r19, 0x00	; 0
 1c6:	40 40       	sbci	r20, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <__vector_9+0x20>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <__vector_9+0x2a>
 1cc:	00 00       	nop
		_delay_ms(5000);
		clearBit(PORTD,2);
 1ce:	5a 98       	cbi	0x0b, 2	; 11
 1d0:	2f e3       	ldi	r18, 0x3F	; 63
 1d2:	32 e4       	ldi	r19, 0x42	; 66
 1d4:	4f e0       	ldi	r20, 0x0F	; 15
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	30 40       	sbci	r19, 0x00	; 0
 1da:	40 40       	sbci	r20, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <__vector_9+0x34>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <__vector_9+0x3e>
 1e0:	00 00       	nop
 1e2:	01 97       	sbiw	r24, 0x01	; 1
    }
}

ISR(PCINT0_vect)
{
	for(int i=0;i<10;i++)
 1e4:	51 f7       	brne	.-44     	; 0x1ba <__vector_9+0x18>
		setBit(PORTD,2);
		_delay_ms(5000);
		clearBit(PORTD,2);
		_delay_ms(5000);
	}
	cliFlag =1;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 07 01 	sts	0x0107, r25
 1ee:	80 93 06 01 	sts	0x0106, r24
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	4f 91       	pop	r20
 1f8:	3f 91       	pop	r19
 1fa:	2f 91       	pop	r18
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
