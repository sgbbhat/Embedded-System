
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001c3  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c0  00000000  00000000  0000067b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000013e  00000000  00000000  0000073b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b5  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001dc  00000000  00000000  00000aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_9>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_17>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_21>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	ac 30       	cpi	r26, 0x0C	; 12
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 22 01 	call	0x244	; 0x244 <main>
  cc:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <timer1_init>:

// initialize timer, interrupt and variable
void timer1_init()
{
	//Timer 1 initialization
	TCNT1 = 0;						// initialize timer 1 counter
  d4:	10 92 85 00 	sts	0x0085, r1
  d8:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 |= (1 << OCIE1A);		// enable overflow interrupt
  dc:	ef e6       	ldi	r30, 0x6F	; 111
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11);			// set up timer with pre-scaler = 8
  e6:	e1 e8       	ldi	r30, 0x81	; 129
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
	TCCR0A |= (1 << WGM11);
  f0:	84 b5       	in	r24, 0x24	; 36
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	84 bd       	out	0x24, r24	; 36
	OCR1A = Output_Compare_RegT1;
  f6:	80 e5       	ldi	r24, 0x50	; 80
  f8:	93 ec       	ldi	r25, 0xC3	; 195
  fa:	90 93 89 00 	sts	0x0089, r25
  fe:	80 93 88 00 	sts	0x0088, r24
	T1_tot_overflow = 0;
 102:	10 92 07 01 	sts	0x0107, r1
 106:	10 92 06 01 	sts	0x0106, r1
 10a:	08 95       	ret

0000010c <timer0_init>:
}

void timer0_init()
{
	//Timer 0 initialization
	TCNT0 = 0;						// initialize timer 0 counter
 10c:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE0A);		// enable  interrupt
 10e:	ee e6       	ldi	r30, 0x6E	; 110
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
	TCCR0A |= (1 << WGM01);
 118:	84 b5       	in	r24, 0x24	; 36
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
 11e:	85 b5       	in	r24, 0x25	; 37
 120:	82 60       	ori	r24, 0x02	; 2
 122:	85 bd       	out	0x25, r24	; 37
	OCR0A = Output_Compare_RegT0;
 124:	8a ef       	ldi	r24, 0xFA	; 250
 126:	87 bd       	out	0x27, r24	; 39
	T0_tot_overflow = 0;
 128:	10 92 02 01 	sts	0x0102, r1
 12c:	10 92 03 01 	sts	0x0103, r1
 130:	10 92 04 01 	sts	0x0104, r1
 134:	10 92 05 01 	sts	0x0105, r1
 138:	08 95       	ret

0000013a <__vector_17>:
}

ISR(TIMER1_COMPA_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
	// keep a track of number of overflows
	T1_tot_overflow++;
 148:	80 91 06 01 	lds	r24, 0x0106
 14c:	90 91 07 01 	lds	r25, 0x0107
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 07 01 	sts	0x0107, r25
 156:	80 93 06 01 	sts	0x0106, r24
	
	// 40 overflows = 1 seconds delay (approx.)
	if (T1_tot_overflow >= Loop_Count_1s) 
 15a:	80 91 06 01 	lds	r24, 0x0106
 15e:	90 91 07 01 	lds	r25, 0x0107
 162:	88 97       	sbiw	r24, 0x28	; 40
 164:	44 f0       	brlt	.+16     	; 0x176 <__vector_17+0x3c>
	{
		PORTD ^= (1 << 5);  
 166:	9b b1       	in	r25, 0x0b	; 11
 168:	80 e2       	ldi	r24, 0x20	; 32
 16a:	89 27       	eor	r24, r25
 16c:	8b b9       	out	0x0b, r24	; 11
		T1_tot_overflow = 0;   // reset overflow counter
 16e:	10 92 07 01 	sts	0x0107, r1
 172:	10 92 06 01 	sts	0x0106, r1
	}
}
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
	// keep a track of number of overflows
	T0_tot_overflow++;
 196:	80 91 02 01 	lds	r24, 0x0102
 19a:	90 91 03 01 	lds	r25, 0x0103
 19e:	a0 91 04 01 	lds	r26, 0x0104
 1a2:	b0 91 05 01 	lds	r27, 0x0105
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	a1 1d       	adc	r26, r1
 1aa:	b1 1d       	adc	r27, r1
 1ac:	80 93 02 01 	sts	0x0102, r24
 1b0:	90 93 03 01 	sts	0x0103, r25
 1b4:	a0 93 04 01 	sts	0x0104, r26
 1b8:	b0 93 05 01 	sts	0x0105, r27
	// 64  overflows = 1 ms delay
	if(T0_tot_overflow >= Loop_Count_1ms)
 1bc:	80 91 02 01 	lds	r24, 0x0102
 1c0:	90 91 03 01 	lds	r25, 0x0103
 1c4:	a0 91 04 01 	lds	r26, 0x0104
 1c8:	b0 91 05 01 	lds	r27, 0x0105
 1cc:	08 97       	sbiw	r24, 0x08	; 8
 1ce:	a1 05       	cpc	r26, r1
 1d0:	b1 05       	cpc	r27, r1
 1d2:	d8 f0       	brcs	.+54     	; 0x20a <__vector_21+0x86>
	{
		time_ms++;  
 1d4:	80 91 08 01 	lds	r24, 0x0108
 1d8:	90 91 09 01 	lds	r25, 0x0109
 1dc:	a0 91 0a 01 	lds	r26, 0x010A
 1e0:	b0 91 0b 01 	lds	r27, 0x010B
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	a1 1d       	adc	r26, r1
 1e8:	b1 1d       	adc	r27, r1
 1ea:	80 93 08 01 	sts	0x0108, r24
 1ee:	90 93 09 01 	sts	0x0109, r25
 1f2:	a0 93 0a 01 	sts	0x010A, r26
 1f6:	b0 93 0b 01 	sts	0x010B, r27
		T0_tot_overflow = 0;   // reset overflow counter
 1fa:	10 92 02 01 	sts	0x0102, r1
 1fe:	10 92 03 01 	sts	0x0103, r1
 202:	10 92 04 01 	sts	0x0104, r1
 206:	10 92 05 01 	sts	0x0105, r1
	}
}
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_9>:

ISR(PCINT0_vect)
{
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
	cliFlag =1;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	90 93 01 01 	sts	0x0101, r25
 232:	80 93 00 01 	sts	0x0100, r24
}
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <main>:

int main(void)
{
	//Setting Data Direction Registers
	DDRD = 0xFF;
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x80;
 248:	80 e8       	ldi	r24, 0x80	; 128
 24a:	87 b9       	out	0x07, r24	; 7
	DDRB = 0x00;
 24c:	14 b8       	out	0x04, r1	; 4
	setBit(PORTB,3);		// when pin's direction is INPUT, setting the pin to HIGH will turn on internal pull up	
 24e:	2b 9a       	sbi	0x05, 3	; 5
	setBit(PCICR,0);
 250:	e8 e6       	ldi	r30, 0x68	; 104
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	81 60       	ori	r24, 0x01	; 1
 258:	80 83       	st	Z, r24
	setBit(PCMSK0,3);
 25a:	eb e6       	ldi	r30, 0x6B	; 107
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 60       	ori	r24, 0x08	; 8
 262:	80 83       	st	Z, r24
	
	// initialize timer
	timer1_init();
 264:	0e 94 6a 00 	call	0xd4	; 0xd4 <timer1_init>
	timer0_init();
 268:	0e 94 86 00 	call	0x10c	; 0x10c <timer0_init>
	sei();
 26c:	78 94       	sei
	
	while(1)
	{
		//Toggling an LED at 4kHz, i,e. at the rate of 0.25s
		if((time_ms % 500) > 250)
 26e:	0f 2e       	mov	r0, r31
 270:	f4 ef       	ldi	r31, 0xF4	; 244
 272:	8f 2e       	mov	r8, r31
 274:	99 24       	eor	r9, r9
 276:	93 94       	inc	r9
 278:	a1 2c       	mov	r10, r1
 27a:	b1 2c       	mov	r11, r1
 27c:	f0 2d       	mov	r31, r0
		{
			clearBit(PORTC,7);
		}		
		
		//Computationally intensive task 
		if((time_ms % 3000) > 2000)		//Polled every 2sec
 27e:	0f 2e       	mov	r0, r31
 280:	f8 eb       	ldi	r31, 0xB8	; 184
 282:	cf 2e       	mov	r12, r31
 284:	fb e0       	ldi	r31, 0x0B	; 11
 286:	df 2e       	mov	r13, r31
 288:	e1 2c       	mov	r14, r1
 28a:	f1 2c       	mov	r15, r1
 28c:	f0 2d       	mov	r31, r0
		{
			if(cliFlag == 1)
			{
				setBit(PORTD,1);		//Turning RED LED ON at PORT D channel 1
 28e:	41 2c       	mov	r4, r1
 290:	71 2c       	mov	r7, r1
				{
					_NOP() ;
				}
				clearBit(PORTD,1);		//Turning RED LED OFF at PORT D channel 1
				
				setBit(PORTD,4);		//Turning GREEN LED ON at PORT D channel 4
 292:	31 2c       	mov	r3, r1
 294:	02 e1       	ldi	r16, 0x12	; 18
 296:	1a e7       	ldi	r17, 0x7A	; 122
 298:	21 2c       	mov	r2, r1
				{
					_NOP() ;
				}
				clearBit(PORTD,4);		//Turning GREEN LED OFF at PORT D channel 4
				
				setBit(PORTD,1);		//Turning RED LED ON again at PORT D channel 1
 29a:	51 2c       	mov	r5, r1
 29c:	d8 ea       	ldi	r29, 0xA8	; 168
 29e:	c1 e6       	ldi	r28, 0x61	; 97
 2a0:	61 2c       	mov	r6, r1
	sei();
	
	while(1)
	{
		//Toggling an LED at 4kHz, i,e. at the rate of 0.25s
		if((time_ms % 500) > 250)
 2a2:	60 91 08 01 	lds	r22, 0x0108
 2a6:	70 91 09 01 	lds	r23, 0x0109
 2aa:	80 91 0a 01 	lds	r24, 0x010A
 2ae:	90 91 0b 01 	lds	r25, 0x010B
 2b2:	a5 01       	movw	r20, r10
 2b4:	94 01       	movw	r18, r8
 2b6:	0e 94 a2 01 	call	0x344	; 0x344 <__udivmodsi4>
 2ba:	6b 3f       	cpi	r22, 0xFB	; 251
 2bc:	71 05       	cpc	r23, r1
 2be:	81 05       	cpc	r24, r1
 2c0:	91 05       	cpc	r25, r1
 2c2:	10 f0       	brcs	.+4      	; 0x2c8 <main+0x84>
		{
			setBit(PORTC,7);		
 2c4:	47 9a       	sbi	0x08, 7	; 8
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <main+0x86>
		}	
		else
		{
			clearBit(PORTC,7);
 2c8:	47 98       	cbi	0x08, 7	; 8
		}		
		
		//Computationally intensive task 
		if((time_ms % 3000) > 2000)		//Polled every 2sec
 2ca:	60 91 08 01 	lds	r22, 0x0108
 2ce:	70 91 09 01 	lds	r23, 0x0109
 2d2:	80 91 0a 01 	lds	r24, 0x010A
 2d6:	90 91 0b 01 	lds	r25, 0x010B
 2da:	a7 01       	movw	r20, r14
 2dc:	96 01       	movw	r18, r12
 2de:	0e 94 a2 01 	call	0x344	; 0x344 <__udivmodsi4>
 2e2:	61 3d       	cpi	r22, 0xD1	; 209
 2e4:	77 40       	sbci	r23, 0x07	; 7
 2e6:	81 05       	cpc	r24, r1
 2e8:	91 05       	cpc	r25, r1
 2ea:	d8 f2       	brcs	.-74     	; 0x2a2 <main+0x5e>
		{
			if(cliFlag == 1)
 2ec:	80 91 00 01 	lds	r24, 0x0100
 2f0:	90 91 01 01 	lds	r25, 0x0101
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	a9 f6       	brne	.-86     	; 0x2a2 <main+0x5e>
			{
				setBit(PORTD,1);		//Turning RED LED ON at PORT D channel 1
 2f8:	59 9a       	sbi	0x0b, 1	; 11
 2fa:	84 2d       	mov	r24, r4
 2fc:	9e e3       	ldi	r25, 0x3E	; 62
 2fe:	a9 e4       	ldi	r26, 0x49	; 73
 300:	b7 2d       	mov	r27, r7
				for(uint32_t i= 0; i<LOOP_COUNT_FOR_300MS;i++)
				{
					_NOP() ;
 302:	00 00       	nop
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	a1 09       	sbc	r26, r1
 308:	b1 09       	sbc	r27, r1
		if((time_ms % 3000) > 2000)		//Polled every 2sec
		{
			if(cliFlag == 1)
			{
				setBit(PORTD,1);		//Turning RED LED ON at PORT D channel 1
				for(uint32_t i= 0; i<LOOP_COUNT_FOR_300MS;i++)
 30a:	d9 f7       	brne	.-10     	; 0x302 <main+0xbe>
				{
					_NOP() ;
				}
				clearBit(PORTD,1);		//Turning RED LED OFF at PORT D channel 1
 30c:	59 98       	cbi	0x0b, 1	; 11
				
				setBit(PORTD,4);		//Turning GREEN LED ON at PORT D channel 4
 30e:	5c 9a       	sbi	0x0b, 4	; 11
 310:	83 2d       	mov	r24, r3
 312:	90 2f       	mov	r25, r16
 314:	a1 2f       	mov	r26, r17
 316:	b2 2d       	mov	r27, r2
				for(uint32_t i= 0; i<LOOP_COUNT_FOR_500MS;i++)
				{
					_NOP() ;
 318:	00 00       	nop
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	a1 09       	sbc	r26, r1
 31e:	b1 09       	sbc	r27, r1
					_NOP() ;
				}
				clearBit(PORTD,1);		//Turning RED LED OFF at PORT D channel 1
				
				setBit(PORTD,4);		//Turning GREEN LED ON at PORT D channel 4
				for(uint32_t i= 0; i<LOOP_COUNT_FOR_500MS;i++)
 320:	d9 f7       	brne	.-10     	; 0x318 <main+0xd4>
				{
					_NOP() ;
				}
				clearBit(PORTD,4);		//Turning GREEN LED OFF at PORT D channel 4
 322:	5c 98       	cbi	0x0b, 4	; 11
				
				setBit(PORTD,1);		//Turning RED LED ON again at PORT D channel 1
 324:	59 9a       	sbi	0x0b, 1	; 11
 326:	85 2d       	mov	r24, r5
 328:	9d 2f       	mov	r25, r29
 32a:	ac 2f       	mov	r26, r28
 32c:	b6 2d       	mov	r27, r6
				for(uint32_t i= 0; i<LOOP_COUNT_FOR_400MS;i++)
				{
					_NOP() ;
 32e:	00 00       	nop
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	a1 09       	sbc	r26, r1
 334:	b1 09       	sbc	r27, r1
					_NOP() ;
				}
				clearBit(PORTD,4);		//Turning GREEN LED OFF at PORT D channel 4
				
				setBit(PORTD,1);		//Turning RED LED ON again at PORT D channel 1
				for(uint32_t i= 0; i<LOOP_COUNT_FOR_400MS;i++)
 336:	d9 f7       	brne	.-10     	; 0x32e <main+0xea>
				{
					_NOP() ;
				}
				clearBit(PORTD,1);		//Turning RED LED OFF at PORT D channel 1
 338:	59 98       	cbi	0x0b, 1	; 11
				cliFlag =0;				//Clearing Interrupt flag that was set by the interrupt
 33a:	10 92 01 01 	sts	0x0101, r1
 33e:	10 92 00 01 	sts	0x0100, r1
 342:	af cf       	rjmp	.-162    	; 0x2a2 <main+0x5e>

00000344 <__udivmodsi4>:
 344:	a1 e2       	ldi	r26, 0x21	; 33
 346:	1a 2e       	mov	r1, r26
 348:	aa 1b       	sub	r26, r26
 34a:	bb 1b       	sub	r27, r27
 34c:	fd 01       	movw	r30, r26
 34e:	0d c0       	rjmp	.+26     	; 0x36a <__udivmodsi4_ep>

00000350 <__udivmodsi4_loop>:
 350:	aa 1f       	adc	r26, r26
 352:	bb 1f       	adc	r27, r27
 354:	ee 1f       	adc	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	a2 17       	cp	r26, r18
 35a:	b3 07       	cpc	r27, r19
 35c:	e4 07       	cpc	r30, r20
 35e:	f5 07       	cpc	r31, r21
 360:	20 f0       	brcs	.+8      	; 0x36a <__udivmodsi4_ep>
 362:	a2 1b       	sub	r26, r18
 364:	b3 0b       	sbc	r27, r19
 366:	e4 0b       	sbc	r30, r20
 368:	f5 0b       	sbc	r31, r21

0000036a <__udivmodsi4_ep>:
 36a:	66 1f       	adc	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	88 1f       	adc	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	1a 94       	dec	r1
 374:	69 f7       	brne	.-38     	; 0x350 <__udivmodsi4_loop>
 376:	60 95       	com	r22
 378:	70 95       	com	r23
 37a:	80 95       	com	r24
 37c:	90 95       	com	r25
 37e:	9b 01       	movw	r18, r22
 380:	ac 01       	movw	r20, r24
 382:	bd 01       	movw	r22, r26
 384:	cf 01       	movw	r24, r30
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
