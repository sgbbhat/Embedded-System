
Lab2_interpolation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000037a  00800100  000017a4  00001838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080047a  0080047a  00001bb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eb2  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000336  00000000  00000000  00002b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f6  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00003184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000314  00000000  00000000  00003364  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bce  00000000  00000000  00003678  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004246  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__vector_9>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      4c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_21>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      68:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      6c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      70:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      74:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      78:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      7c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      80:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      84:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      88:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      8c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      90:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      94:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      98:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      9c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      a0:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      a4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      a8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      ac:	df 04       	cpc	r13, r15
      ae:	c1 05       	cpc	r28, r1
      b0:	c1 05       	cpc	r28, r1
      b2:	c1 05       	cpc	r28, r1
      b4:	c1 05       	cpc	r28, r1
      b6:	c1 05       	cpc	r28, r1
      b8:	c1 05       	cpc	r28, r1
      ba:	c1 05       	cpc	r28, r1
      bc:	c1 05       	cpc	r28, r1
      be:	c1 05       	cpc	r28, r1
      c0:	c1 05       	cpc	r28, r1
      c2:	c1 05       	cpc	r28, r1
      c4:	95 04       	cpc	r9, r5
      c6:	c1 05       	cpc	r28, r1
      c8:	3a 04       	cpc	r3, r10
      ca:	c1 05       	cpc	r28, r1
      cc:	c1 05       	cpc	r28, r1
      ce:	c1 05       	cpc	r28, r1
      d0:	3f 05       	cpc	r19, r15
      d2:	c1 05       	cpc	r28, r1
      d4:	c1 05       	cpc	r28, r1
      d6:	c1 05       	cpc	r28, r1
      d8:	c1 05       	cpc	r28, r1
      da:	c1 05       	cpc	r28, r1
      dc:	c1 05       	cpc	r28, r1
      de:	c1 05       	cpc	r28, r1
      e0:	c1 05       	cpc	r28, r1
      e2:	c1 05       	cpc	r28, r1
      e4:	c1 05       	cpc	r28, r1
      e6:	c1 05       	cpc	r28, r1
      e8:	c1 05       	cpc	r28, r1
      ea:	c1 05       	cpc	r28, r1
      ec:	0f 05       	cpc	r16, r15
      ee:	c1 05       	cpc	r28, r1
      f0:	c1 05       	cpc	r28, r1
      f2:	c1 05       	cpc	r28, r1
      f4:	c1 05       	cpc	r28, r1
      f6:	c1 05       	cpc	r28, r1
      f8:	c1 05       	cpc	r28, r1
      fa:	c1 05       	cpc	r28, r1
      fc:	c1 05       	cpc	r28, r1
      fe:	c1 05       	cpc	r28, r1
     100:	c1 05       	cpc	r28, r1
     102:	c1 05       	cpc	r28, r1
     104:	ba 04       	cpc	r11, r10
     106:	c1 05       	cpc	r28, r1
     108:	6b 04       	cpc	r6, r11
     10a:	c1 05       	cpc	r28, r1
     10c:	b6 05       	cpc	r27, r6
     10e:	07 63       	ori	r16, 0x37	; 55
     110:	42 36       	cpi	r20, 0x62	; 98
     112:	b7 9b       	sbis	0x16, 7	; 22
     114:	d8 a7       	std	Y+40, r29	; 0x28
     116:	1a 39       	cpi	r17, 0x9A	; 154
     118:	68 56       	subi	r22, 0x68	; 104
     11a:	18 ae       	std	Y+56, r1	; 0x38
     11c:	ba ab       	std	Y+50, r27	; 0x32
     11e:	55 8c       	ldd	r5, Z+29	; 0x1d
     120:	1d 3c       	cpi	r17, 0xCD	; 205
     122:	b7 cc       	rjmp	.-1682   	; 0xfffffa92 <__eeprom_end+0xff7efa92>
     124:	57 63       	ori	r21, 0x37	; 55
     126:	bd 6d       	ori	r27, 0xDD	; 221
     128:	ed fd       	.word	0xfded	; ????
     12a:	75 3e       	cpi	r23, 0xE5	; 229
     12c:	f6 17       	cp	r31, r22
     12e:	72 31       	cpi	r23, 0x12	; 18
     130:	bf 00       	.word	0x00bf	; ????
     132:	00 00       	nop
     134:	80 3f       	cpi	r24, 0xF0	; 240
     136:	08 00       	.word	0x0008	; ????
     138:	00 00       	nop
     13a:	be 92       	st	-X, r11
     13c:	24 49       	sbci	r18, 0x94	; 148
     13e:	12 3e       	cpi	r17, 0xE2	; 226
     140:	ab aa       	std	Y+51, r10	; 0x33
     142:	aa 2a       	or	r10, r26
     144:	be cd       	rjmp	.-1156   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     146:	cc cc       	rjmp	.-1640   	; 0xfffffae0 <__eeprom_end+0xff7efae0>
     148:	4c 3e       	cpi	r20, 0xEC	; 236
     14a:	00 00       	nop
     14c:	00 80       	ld	r0, Z
     14e:	be ab       	std	Y+54, r27	; 0x36
     150:	aa aa       	std	Y+50, r10	; 0x32
     152:	aa 3e       	cpi	r26, 0xEA	; 234
     154:	00 00       	nop
     156:	00 00       	nop
     158:	bf 00       	.word	0x00bf	; ????
     15a:	00 00       	nop
     15c:	80 3f       	cpi	r24, 0xF0	; 240
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	00 08       	sbc	r0, r0
     164:	41 78       	andi	r20, 0x81	; 129
     166:	d3 bb       	out	0x13, r29	; 19
     168:	43 87       	std	Z+11, r20	; 0x0b
     16a:	d1 13       	cpse	r29, r17
     16c:	3d 19       	sub	r19, r13
     16e:	0e 3c       	cpi	r16, 0xCE	; 206
     170:	c3 bd       	out	0x23, r28	; 35
     172:	42 82       	std	Z+2, r4	; 0x02
     174:	ad 2b       	or	r26, r29
     176:	3e 68       	ori	r19, 0x8E	; 142
     178:	ec 82       	std	Y+4, r14	; 0x04
     17a:	76 be       	out	0x36, r7	; 54
     17c:	d9 8f       	std	Y+25, r29	; 0x19
     17e:	e1 a9       	ldd	r30, Z+49	; 0x31
     180:	3e 4c       	sbci	r19, 0xCE	; 206
     182:	80 ef       	ldi	r24, 0xF0	; 240
     184:	ff be       	out	0x3f, r15	; 63
     186:	01 c4       	rjmp	.+2050   	; 0x98a <main+0x3da>
     188:	ff 7f       	andi	r31, 0xFF	; 255
     18a:	3f 00       	.word	0x003f	; ????
     18c:	00 00       	nop
	...

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	da e0       	ldi	r29, 0x0A	; 10
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	14 e0       	ldi	r17, 0x04	; 4
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	e4 ea       	ldi	r30, 0xA4	; 164
     1a4:	f7 e1       	ldi	r31, 0x17	; 23
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	aa 37       	cpi	r26, 0x7A	; 122
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	24 e0       	ldi	r18, 0x04	; 4
     1b4:	aa e7       	ldi	r26, 0x7A	; 122
     1b6:	b4 e0       	ldi	r27, 0x04	; 4
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	ab 38       	cpi	r26, 0x8B	; 139
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <main>
     1c6:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <reverse>:
 */ 


void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
     1ce:	9b 01       	movw	r18, r22
     1d0:	21 50       	subi	r18, 0x01	; 1
     1d2:	31 09       	sbc	r19, r1
	while (i<j)
     1d4:	12 16       	cp	r1, r18
     1d6:	13 06       	cpc	r1, r19
     1d8:	84 f4       	brge	.+32     	; 0x1fa <reverse+0x2c>
     1da:	fc 01       	movw	r30, r24
     1dc:	e6 0f       	add	r30, r22
     1de:	f7 1f       	adc	r31, r23
     1e0:	dc 01       	movw	r26, r24
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp = str[i];
     1e6:	4c 91       	ld	r20, X
		str[i] = str[j];
     1e8:	52 91       	ld	r21, -Z
     1ea:	5d 93       	st	X+, r21
		str[j] = temp;
     1ec:	40 83       	st	Z, r20
		i++; j--;
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	21 50       	subi	r18, 0x01	; 1
     1f2:	31 09       	sbc	r19, r1


void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
	while (i<j)
     1f4:	82 17       	cp	r24, r18
     1f6:	93 07       	cpc	r25, r19
     1f8:	b4 f3       	brlt	.-20     	; 0x1e6 <reverse+0x18>
     1fa:	08 95       	ret

000001fc <intToStr>:
		i++; j--;
	}
}

int intToStr(int x, char str[], int d)
{
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	8b 01       	movw	r16, r22
     20a:	9a 01       	movw	r18, r20
	int i = 0;
	while (x)
     20c:	00 97       	sbiw	r24, 0x00	; 0
     20e:	99 f0       	breq	.+38     	; 0x236 <intToStr+0x3a>
     210:	fb 01       	movw	r30, r22
     212:	c0 e0       	ldi	r28, 0x00	; 0
     214:	d0 e0       	ldi	r29, 0x00	; 0
	{
		str[i++] = (x%10) + '0';
     216:	0f 2e       	mov	r0, r31
     218:	fa e0       	ldi	r31, 0x0A	; 10
     21a:	ef 2e       	mov	r14, r31
     21c:	f1 2c       	mov	r15, r1
     21e:	f0 2d       	mov	r31, r0
     220:	21 96       	adiw	r28, 0x01	; 1
     222:	b7 01       	movw	r22, r14
     224:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__divmodhi4>
     228:	80 5d       	subi	r24, 0xD0	; 208
     22a:	81 93       	st	Z+, r24
		x = x/10;
     22c:	86 2f       	mov	r24, r22
     22e:	97 2f       	mov	r25, r23
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
     230:	00 97       	sbiw	r24, 0x00	; 0
     232:	b1 f7       	brne	.-20     	; 0x220 <intToStr+0x24>
     234:	02 c0       	rjmp	.+4      	; 0x23a <intToStr+0x3e>
	}
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
     236:	c0 e0       	ldi	r28, 0x00	; 0
     238:	d0 e0       	ldi	r29, 0x00	; 0
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     23a:	c2 17       	cp	r28, r18
     23c:	d3 07       	cpc	r29, r19
     23e:	64 f4       	brge	.+24     	; 0x258 <intToStr+0x5c>
     240:	f8 01       	movw	r30, r16
     242:	ec 0f       	add	r30, r28
     244:	fd 1f       	adc	r31, r29
     246:	a8 01       	movw	r20, r16
     248:	42 0f       	add	r20, r18
     24a:	53 1f       	adc	r21, r19
	str[i++] = '0';
     24c:	80 e3       	ldi	r24, 0x30	; 48
     24e:	81 93       	st	Z+, r24
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     250:	e4 17       	cp	r30, r20
     252:	f5 07       	cpc	r31, r21
     254:	e1 f7       	brne	.-8      	; 0x24e <intToStr+0x52>
     256:	e9 01       	movw	r28, r18
	str[i++] = '0';
	
	reverse(str, i);
     258:	be 01       	movw	r22, r28
     25a:	c8 01       	movw	r24, r16
     25c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <reverse>
	str[i] = '\0';
     260:	f8 01       	movw	r30, r16
     262:	ec 0f       	add	r30, r28
     264:	fd 1f       	adc	r31, r29
     266:	10 82       	st	Z, r1
	return i;
}
     268:	ce 01       	movw	r24, r28
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	08 95       	ret

00000278 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
     278:	2f 92       	push	r2
     27a:	3f 92       	push	r3
     27c:	4f 92       	push	r4
     27e:	5f 92       	push	r5
     280:	6f 92       	push	r6
     282:	7f 92       	push	r7
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	4b 01       	movw	r8, r22
     29e:	5c 01       	movw	r10, r24
     2a0:	8a 01       	movw	r16, r20
     2a2:	e9 01       	movw	r28, r18
	// Extract integer part
	int ipart = (int)n;
     2a4:	0e 94 95 08 	call	0x112a	; 0x112a <__fixsfsi>
     2a8:	6b 01       	movw	r12, r22
     2aa:	7c 01       	movw	r14, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	b8 01       	movw	r22, r16
     2b2:	c6 01       	movw	r24, r12
     2b4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <intToStr>
     2b8:	1c 01       	movw	r2, r24
	
	// check for display option after point
	if (afterpoint != 0)
     2ba:	20 97       	sbiw	r28, 0x00	; 0
     2bc:	a9 f1       	breq	.+106    	; 0x328 <ftoa+0xb0>
	{
		res[i] = '.';  // add dot
     2be:	f8 01       	movw	r30, r16
     2c0:	e8 0f       	add	r30, r24
     2c2:	f9 1f       	adc	r31, r25
     2c4:	8e e2       	ldi	r24, 0x2E	; 46
     2c6:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     2c8:	be 01       	movw	r22, r28
     2ca:	0d 2e       	mov	r0, r29
     2cc:	00 0c       	add	r0, r0
     2ce:	88 0b       	sbc	r24, r24
     2d0:	99 0b       	sbc	r25, r25
     2d2:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     2d6:	9b 01       	movw	r18, r22
     2d8:	ac 01       	movw	r20, r24
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	91 e4       	ldi	r25, 0x41	; 65
     2e2:	0e 94 c6 09 	call	0x138c	; 0x138c <pow>
     2e6:	2b 01       	movw	r4, r22
     2e8:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
     2ea:	b6 01       	movw	r22, r12
     2ec:	dd 0c       	add	r13, r13
     2ee:	88 0b       	sbc	r24, r24
     2f0:	99 0b       	sbc	r25, r25
     2f2:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     2f6:	9b 01       	movw	r18, r22
     2f8:	ac 01       	movw	r20, r24
     2fa:	c5 01       	movw	r24, r10
     2fc:	b4 01       	movw	r22, r8
     2fe:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__subsf3>
     302:	9b 01       	movw	r18, r22
     304:	ac 01       	movw	r20, r24
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	28 1a       	sub	r2, r24
     30a:	38 0a       	sbc	r3, r24
     30c:	02 0d       	add	r16, r2
     30e:	13 1d       	adc	r17, r3
		res[i] = '.';  // add dot
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     310:	c3 01       	movw	r24, r6
     312:	b2 01       	movw	r22, r4
     314:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     318:	0e 94 95 08 	call	0x112a	; 0x112a <__fixsfsi>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	ae 01       	movw	r20, r28
     322:	b8 01       	movw	r22, r16
     324:	0e 94 fe 00 	call	0x1fc	; 0x1fc <intToStr>
	}
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	9f 90       	pop	r9
     33e:	8f 90       	pop	r8
     340:	7f 90       	pop	r7
     342:	6f 90       	pop	r6
     344:	5f 90       	pop	r5
     346:	4f 90       	pop	r4
     348:	3f 90       	pop	r3
     34a:	2f 90       	pop	r2
     34c:	08 95       	ret

0000034e <uart_init>:
// init uart
void uart_init(void)
{
	// set baud rate
	
	UBRR1 = ((F_CPU/(16*38400)) - 1);
     34e:	89 e1       	ldi	r24, 0x19	; 25
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 cd 00 	sts	0x00CD, r25
     356:	80 93 cc 00 	sts	0x00CC, r24
	
	// enable received and transmitter
	UCSR1B = ( 1 << RXEN1 ) | ( 1 << TXEN1 );
     35a:	88 e1       	ldi	r24, 0x18	; 24
     35c:	80 93 c9 00 	sts	0x00C9, r24
	
	// set frame format ( 8data, 2stop )
	UCSR1C = ( 1 << USBS1 ) | ( 3 << UCSZ10 );
     360:	8e e0       	ldi	r24, 0x0E	; 14
     362:	80 93 ca 00 	sts	0x00CA, r24
     366:	08 95       	ret

00000368 <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
     368:	e8 ec       	ldi	r30, 0xC8	; 200
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	90 81       	ld	r25, Z
     36e:	95 ff       	sbrs	r25, 5
     370:	fd cf       	rjmp	.-6      	; 0x36c <uart_transmit+0x4>
	;
	// put data into buffer, sends data
	UDR1 = data;
     372:	80 93 ce 00 	sts	0x00CE, r24
     376:	08 95       	ret

00000378 <uart_receive>:
}

// read a char from uart
unsigned char uart_receive(void)
{
	while (!( UCSR1A & ( 1 << RXC1) ))
     378:	e8 ec       	ldi	r30, 0xC8	; 200
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	88 23       	and	r24, r24
     380:	ec f7       	brge	.-6      	; 0x37c <uart_receive+0x4>
	;
	return UDR1;
     382:	80 91 ce 00 	lds	r24, 0x00CE
}
     386:	08 95       	ret

00000388 <uart_dataAvailable>:

// check if there are any chars to be read
int uart_dataAvailable(void)
{
	if ( UCSR1A & ( 1 << RXC1) )
     388:	80 91 c8 00 	lds	r24, 0x00C8
     38c:	08 2e       	mov	r0, r24
     38e:	00 0c       	add	r0, r0
     390:	99 0b       	sbc	r25, r25
	return 1;
	
	return 0;
}
     392:	89 2f       	mov	r24, r25
     394:	88 1f       	adc	r24, r24
     396:	88 27       	eor	r24, r24
     398:	88 1f       	adc	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	08 95       	ret

0000039e <uart_print>:

// write a string to the uart
void uart_print( char data[] )
{
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	8c 01       	movw	r16, r24
     3ac:	7c 01       	movw	r14, r24
	for (int c = 0; c < strlen(data); c++ )
     3ae:	c0 e0       	ldi	r28, 0x00	; 0
     3b0:	d0 e0       	ldi	r29, 0x00	; 0
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <uart_print+0x22>
	uart_transmit(data[c]);
     3b4:	f7 01       	movw	r30, r14
     3b6:	81 91       	ld	r24, Z+
     3b8:	7f 01       	movw	r14, r30
     3ba:	0e 94 b4 01 	call	0x368	; 0x368 <uart_transmit>
}

// write a string to the uart
void uart_print( char data[] )
{
	for (int c = 0; c < strlen(data); c++ )
     3be:	21 96       	adiw	r28, 0x01	; 1
     3c0:	f8 01       	movw	r30, r16
     3c2:	01 90       	ld	r0, Z+
     3c4:	00 20       	and	r0, r0
     3c6:	e9 f7       	brne	.-6      	; 0x3c2 <uart_print+0x24>
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	e0 1b       	sub	r30, r16
     3cc:	f1 0b       	sbc	r31, r17
     3ce:	ce 17       	cp	r28, r30
     3d0:	df 07       	cpc	r29, r31
     3d2:	80 f3       	brcs	.-32     	; 0x3b4 <uart_print+0x16>
	uart_transmit(data[c]);
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	08 95       	ret

000003e2 <timer0_init>:
volatile int32_t count_time2 = 0 ;

void timer0_init()
{
	//Timer 0 initialization
	TCNT0 = 0;						// initialize timer 0 counter
     3e2:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE0A);		// enable  interrupt
     3e4:	ee e6       	ldi	r30, 0x6E	; 110
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	82 60       	ori	r24, 0x02	; 2
     3ec:	80 83       	st	Z, r24
	TCCR0A |= (1 << WGM01);
     3ee:	84 b5       	in	r24, 0x24	; 36
     3f0:	82 60       	ori	r24, 0x02	; 2
     3f2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
     3f4:	85 b5       	in	r24, 0x25	; 37
     3f6:	82 60       	ori	r24, 0x02	; 2
     3f8:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << CS00);
     3fa:	85 b5       	in	r24, 0x25	; 37
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;
     400:	8a ef       	ldi	r24, 0xFA	; 250
     402:	87 bd       	out	0x27, r24	; 39
     404:	08 95       	ret

00000406 <__vector_21>:
}
//Tracking time in ms increments
ISR(TIMER0_COMPA_vect)
{
     406:	1f 92       	push	r1
     408:	0f 92       	push	r0
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	0f 92       	push	r0
     40e:	11 24       	eor	r1, r1
     410:	8f 93       	push	r24
     412:	9f 93       	push	r25
     414:	af 93       	push	r26
     416:	bf 93       	push	r27
	time_ms++;
     418:	80 91 87 04 	lds	r24, 0x0487
     41c:	90 91 88 04 	lds	r25, 0x0488
     420:	a0 91 89 04 	lds	r26, 0x0489
     424:	b0 91 8a 04 	lds	r27, 0x048A
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	a1 1d       	adc	r26, r1
     42c:	b1 1d       	adc	r27, r1
     42e:	80 93 87 04 	sts	0x0487, r24
     432:	90 93 88 04 	sts	0x0488, r25
     436:	a0 93 89 04 	sts	0x0489, r26
     43a:	b0 93 8a 04 	sts	0x048A, r27
	
	//Calculating dt for derivative part of PD controller
	
	if((time_ms % 2)== 0)
     43e:	80 91 87 04 	lds	r24, 0x0487
     442:	90 91 88 04 	lds	r25, 0x0488
     446:	a0 91 89 04 	lds	r26, 0x0489
     44a:	b0 91 8a 04 	lds	r27, 0x048A
     44e:	80 fd       	sbrc	r24, 0
     450:	11 c0       	rjmp	.+34     	; 0x474 <__vector_21+0x6e>
	{
		count_time1 = global_counts_m2;
     452:	80 91 83 04 	lds	r24, 0x0483
     456:	90 91 84 04 	lds	r25, 0x0484
     45a:	09 2e       	mov	r0, r25
     45c:	00 0c       	add	r0, r0
     45e:	aa 0b       	sbc	r26, r26
     460:	bb 0b       	sbc	r27, r27
     462:	80 93 7e 04 	sts	0x047E, r24
     466:	90 93 7f 04 	sts	0x047F, r25
     46a:	a0 93 80 04 	sts	0x0480, r26
     46e:	b0 93 81 04 	sts	0x0481, r27
     472:	2c c0       	rjmp	.+88     	; 0x4cc <__vector_21+0xc6>
	}
	else if((time_ms % 2)== 1)
     474:	80 91 87 04 	lds	r24, 0x0487
     478:	90 91 88 04 	lds	r25, 0x0488
     47c:	a0 91 89 04 	lds	r26, 0x0489
     480:	b0 91 8a 04 	lds	r27, 0x048A
     484:	81 70       	andi	r24, 0x01	; 1
     486:	99 27       	eor	r25, r25
     488:	aa 27       	eor	r26, r26
     48a:	b0 78       	andi	r27, 0x80	; 128
     48c:	bb 23       	and	r27, r27
     48e:	54 f4       	brge	.+20     	; 0x4a4 <__vector_21+0x9e>
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	a1 09       	sbc	r26, r1
     494:	b1 09       	sbc	r27, r1
     496:	8e 6f       	ori	r24, 0xFE	; 254
     498:	9f 6f       	ori	r25, 0xFF	; 255
     49a:	af 6f       	ori	r26, 0xFF	; 255
     49c:	bf 6f       	ori	r27, 0xFF	; 255
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	a1 1d       	adc	r26, r1
     4a2:	b1 1d       	adc	r27, r1
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	a1 05       	cpc	r26, r1
     4a8:	b1 05       	cpc	r27, r1
     4aa:	81 f4       	brne	.+32     	; 0x4cc <__vector_21+0xc6>
	{
		count_time2 = global_counts_m2;
     4ac:	80 91 83 04 	lds	r24, 0x0483
     4b0:	90 91 84 04 	lds	r25, 0x0484
     4b4:	09 2e       	mov	r0, r25
     4b6:	00 0c       	add	r0, r0
     4b8:	aa 0b       	sbc	r26, r26
     4ba:	bb 0b       	sbc	r27, r27
     4bc:	80 93 7a 04 	sts	0x047A, r24
     4c0:	90 93 7b 04 	sts	0x047B, r25
     4c4:	a0 93 7c 04 	sts	0x047C, r26
     4c8:	b0 93 7d 04 	sts	0x047D, r27
	}
}
     4cc:	bf 91       	pop	r27
     4ce:	af 91       	pop	r26
     4d0:	9f 91       	pop	r25
     4d2:	8f 91       	pop	r24
     4d4:	0f 90       	pop	r0
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti

000004de <__vector_9>:
	return 0;
}

// Reading
ISR(PCINT0_vect)
{
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	4f 93       	push	r20
     4ee:	5f 93       	push	r21
     4f0:	6f 93       	push	r22
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
	unsigned char m2b_val;
	char plus_m2;
	char minus_m2 ;
	
	// Determine the current value of all channels.
	m2a_val = ((PINB & (1<<PINB4))>>PINB4);
     4f6:	93 b1       	in	r25, 0x03	; 3
     4f8:	92 95       	swap	r25
     4fa:	91 70       	andi	r25, 0x01	; 1
     4fc:	29 2f       	mov	r18, r25
	m2b_val = ((PINB & (1<<PINB5))>>PINB5);
     4fe:	83 b1       	in	r24, 0x03	; 3
     500:	85 fb       	bst	r24, 5
     502:	88 27       	eor	r24, r24
     504:	80 f9       	bld	r24, 0
     506:	38 2f       	mov	r19, r24
	
	// Determine if the last read of one channel is different from the current read of the other channel
	// which tells you whether you need to add or subtract from encoder count
	
	plus_m2 = m2a_val^last_m2b_val;
	minus_m2 = m2b_val^last_m2a_val;
     508:	60 91 86 04 	lds	r22, 0x0486
	
	// add and/or subtract as determined above
	if(plus_m2)
     50c:	40 91 85 04 	lds	r20, 0x0485
     510:	94 17       	cp	r25, r20
     512:	51 f0       	breq	.+20     	; 0x528 <__vector_9+0x4a>
	{
		global_counts_m2++;
     514:	40 91 83 04 	lds	r20, 0x0483
     518:	50 91 84 04 	lds	r21, 0x0484
     51c:	4f 5f       	subi	r20, 0xFF	; 255
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	50 93 84 04 	sts	0x0484, r21
     524:	40 93 83 04 	sts	0x0483, r20
	}
	if(minus_m2)
     528:	36 17       	cp	r19, r22
     52a:	51 f0       	breq	.+20     	; 0x540 <__vector_9+0x62>
	{
		global_counts_m2--;
     52c:	40 91 83 04 	lds	r20, 0x0483
     530:	50 91 84 04 	lds	r21, 0x0484
     534:	41 50       	subi	r20, 0x01	; 1
     536:	51 09       	sbc	r21, r1
     538:	50 93 84 04 	sts	0x0484, r21
     53c:	40 93 83 04 	sts	0x0483, r20
	}
	// do some error checking to see if you missed an interrupt or something is wrong
	if(m2a_val != global_last_m2a_val && m2b_val != global_last_m2b_val)
     540:	22 23       	and	r18, r18
     542:	29 f0       	breq	.+10     	; 0x54e <__vector_9+0x70>
     544:	33 23       	and	r19, r19
     546:	19 f0       	breq	.+6      	; 0x54e <__vector_9+0x70>
	{
		global_error_m2 = 1;
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	20 93 82 04 	sts	0x0482, r18
	}
	// save state for next interrupt
	last_m2a_val = m2a_val;
     54e:	90 93 86 04 	sts	0x0486, r25
	last_m2b_val = m2b_val;
     552:	80 93 85 04 	sts	0x0485, r24
}
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	6f 91       	pop	r22
     55c:	5f 91       	pop	r21
     55e:	4f 91       	pop	r20
     560:	3f 91       	pop	r19
     562:	2f 91       	pop	r18
     564:	0f 90       	pop	r0
     566:	0f be       	out	0x3f, r0	; 63
     568:	0f 90       	pop	r0
     56a:	1f 90       	pop	r1
     56c:	18 95       	reti

0000056e <pwm_init>:

//Initialize PWM
void pwm_init()
{
	TCNT1 = 0;						//Timer 1 initialization
     56e:	10 92 85 00 	sts	0x0085, r1
     572:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << WGM10) ;		//Fast PWM mode - Mode 15
     576:	e0 e8       	ldi	r30, 0x80	; 128
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	81 60       	ori	r24, 0x01	; 1
     57e:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11) ;
     580:	80 81       	ld	r24, Z
     582:	82 60       	ori	r24, 0x02	; 2
     584:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) ;
     586:	a1 e8       	ldi	r26, 0x81	; 129
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	8c 91       	ld	r24, X
     58c:	88 60       	ori	r24, 0x08	; 8
     58e:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13) ;
     590:	8c 91       	ld	r24, X
     592:	80 61       	ori	r24, 0x10	; 16
     594:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS10) ;			// No scaling
     596:	8c 91       	ld	r24, X
     598:	81 60       	ori	r24, 0x01	; 1
     59a:	8c 93       	st	X, r24
	TCCR1A |= (1 << COM1B1) ;
     59c:	80 81       	ld	r24, Z
     59e:	80 62       	ori	r24, 0x20	; 32
     5a0:	80 83       	st	Z, r24
	OCR1A = 10000;
     5a2:	80 e1       	ldi	r24, 0x10	; 16
     5a4:	97 e2       	ldi	r25, 0x27	; 39
     5a6:	90 93 89 00 	sts	0x0089, r25
     5aa:	80 93 88 00 	sts	0x0088, r24
     5ae:	08 95       	ret

000005b0 <main>:
}

void pwm_init(void);

int main()
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	6a 97       	sbiw	r28, 0x1a	; 26
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
	// Initialize serial communication
	uart_init();
     5c4:	0e 94 a7 01 	call	0x34e	; 0x34e <uart_init>
	pwm_init();
     5c8:	0e 94 b7 02 	call	0x56e	; 0x56e <pwm_init>
	timer0_init();
     5cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <timer0_init>
	
	int target_array = 0 ;
	
	// Setting motor 2 PMW as output
	DDRB |= (1<<PORTB6) ;
     5d0:	26 9a       	sbi	0x04, 6	; 4
	
	// Enabling interrupt at PB4 and PB5
	PCMSK0 |= (1<<PCINT4) ;
     5d2:	eb e6       	ldi	r30, 0x6B	; 107
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	80 61       	ori	r24, 0x10	; 16
     5da:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5) ;
     5dc:	80 81       	ld	r24, Z
     5de:	80 62       	ori	r24, 0x20	; 32
     5e0:	80 83       	st	Z, r24
	
	// Enabling external interrupt
	PCICR |= (1<<PCIE0);
     5e2:	e8 e6       	ldi	r30, 0x68	; 104
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	81 60       	ori	r24, 0x01	; 1
     5ea:	80 83       	st	Z, r24
	sei();
     5ec:	78 94       	sei
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
	int32_t error = 2 ;
	int print_menu = 0 ;
	int32_t target_count = target_degree*7;
     5ee:	40 91 06 01 	lds	r20, 0x0106
     5f2:	50 91 07 01 	lds	r21, 0x0107
     5f6:	60 91 08 01 	lds	r22, 0x0108
     5fa:	70 91 09 01 	lds	r23, 0x0109
     5fe:	db 01       	movw	r26, r22
     600:	ca 01       	movw	r24, r20
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	aa 1f       	adc	r26, r26
     608:	bb 1f       	adc	r27, r27
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	aa 1f       	adc	r26, r26
     610:	bb 1f       	adc	r27, r27
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	aa 1f       	adc	r26, r26
     618:	bb 1f       	adc	r27, r27
     61a:	2c 01       	movw	r4, r24
     61c:	3d 01       	movw	r6, r26
     61e:	44 1a       	sub	r4, r20
     620:	55 0a       	sbc	r5, r21
     622:	66 0a       	sbc	r6, r22
     624:	77 0a       	sbc	r7, r23
	int32_t T = 0; 
	
	uart_print( "Welcome\n" );
     626:	8a e0       	ldi	r24, 0x0A	; 10
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print("Target position in degree 90, -360, +5: ");
     62e:	83 e1       	ldi	r24, 0x13	; 19
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print( "\n" );
     636:	84 ec       	ldi	r24, 0xC4	; 196
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print("Target position in counts : 630, -1870, -1835");
     63e:	8c e3       	ldi	r24, 0x3C	; 60
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print( "\n" );
     646:	84 ec       	ldi	r24, 0xC4	; 196
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print("Current position in count : ");
     64e:	8a e6       	ldi	r24, 0x6A	; 106
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     656:	4a e0       	ldi	r20, 0x0A	; 10
     658:	be 01       	movw	r22, r28
     65a:	6f 5f       	subi	r22, 0xFF	; 255
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	80 91 83 04 	lds	r24, 0x0483
     662:	90 91 84 04 	lds	r25, 0x0484
     666:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__itoa_ncheck>
	itoa(global_counts_m2,str,10);
	uart_print(str);
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print( "\n" );
     672:	84 ec       	ldi	r24, 0xC4	; 196
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
	int32_t error = 2 ;
	int print_menu = 0 ;
     67a:	21 2c       	mov	r2, r1
     67c:	31 2c       	mov	r3, r1
	int printed = 0;
	
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
	int32_t error = 2 ;
     67e:	81 2c       	mov	r8, r1
     680:	91 2c       	mov	r9, r1
     682:	54 01       	movw	r10, r8
     684:	68 94       	set
     686:	81 f8       	bld	r8, 1
	char str[10];
	int printed = 0;
	
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
     688:	02 e0       	ldi	r16, 0x02	; 2
     68a:	10 e0       	ldi	r17, 0x00	; 0
	// Initialize serial communication
	uart_init();
	pwm_init();
	timer0_init();
	
	int target_array = 0 ;
     68c:	1c 86       	std	Y+12, r1	; 0x0c
     68e:	1b 86       	std	Y+11, r1	; 0x0b
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <main+0x100>
			target_array = 3;
			OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.001));
		}
		printed = 0;
	}
		error = target_count - global_counts_m2;
     692:	a3 01       	movw	r20, r6
     694:	92 01       	movw	r18, r4
     696:	28 19       	sub	r18, r8
     698:	39 09       	sbc	r19, r9
     69a:	4a 09       	sbc	r20, r10
     69c:	5b 09       	sbc	r21, r11
     69e:	49 01       	movw	r8, r18
     6a0:	5a 01       	movw	r10, r20
     6a2:	26 01       	movw	r4, r12
     6a4:	37 01       	movw	r6, r14
     6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <main+0x100>
     6a8:	26 01       	movw	r4, r12
     6aa:	37 01       	movw	r6, r14
     6ac:	01 e0       	ldi	r16, 0x01	; 1
     6ae:	10 e0       	ldi	r17, 0x00	; 0
	uart_print(str);
	uart_print( "\n" );
	
	while(1)
	{
	if((error < 50) && (run_motor == 1))
     6b0:	32 e3       	ldi	r19, 0x32	; 50
     6b2:	83 16       	cp	r8, r19
     6b4:	91 04       	cpc	r9, r1
     6b6:	a1 04       	cpc	r10, r1
     6b8:	b1 04       	cpc	r11, r1
     6ba:	0c f0       	brlt	.+2      	; 0x6be <main+0x10e>
     6bc:	89 c0       	rjmp	.+274    	; 0x7d0 <main+0x220>
     6be:	01 30       	cpi	r16, 0x01	; 1
     6c0:	11 05       	cpc	r17, r1
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <main+0x116>
     6c4:	85 c0       	rjmp	.+266    	; 0x7d0 <main+0x220>
	{
		if(target_array == 0)
     6c6:	4b 85       	ldd	r20, Y+11	; 0x0b
     6c8:	5c 85       	ldd	r21, Y+12	; 0x0c
     6ca:	45 2b       	or	r20, r21
     6cc:	41 f4       	brne	.+16     	; 0x6de <main+0x12e>
		{
			uart_print( "\n" );
     6ce:	84 ec       	ldi	r24, 0xC4	; 196
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			target_array = 1;
     6d6:	51 e0       	ldi	r21, 0x01	; 1
     6d8:	5b 87       	std	Y+11, r21	; 0x0b
     6da:	1c 86       	std	Y+12, r1	; 0x0c
     6dc:	79 c0       	rjmp	.+242    	; 0x7d0 <main+0x220>
			//OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
		}
		else if(target_array == 1)
     6de:	8b 85       	ldd	r24, Y+11	; 0x0b
     6e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	51 f4       	brne	.+20     	; 0x6fa <main+0x14a>
		{
			target_array = 2;
			target_count = target_count - 2500;
     6e6:	94 ec       	ldi	r25, 0xC4	; 196
     6e8:	49 1a       	sub	r4, r25
     6ea:	99 e0       	ldi	r25, 0x09	; 9
     6ec:	59 0a       	sbc	r5, r25
     6ee:	61 08       	sbc	r6, r1
     6f0:	71 08       	sbc	r7, r1
			target_array = 1;
			//OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
		}
		else if(target_array == 1)
		{
			target_array = 2;
     6f2:	a2 e0       	ldi	r26, 0x02	; 2
     6f4:	ab 87       	std	Y+11, r26	; 0x0b
     6f6:	1c 86       	std	Y+12, r1	; 0x0c
     6f8:	6b c0       	rjmp	.+214    	; 0x7d0 <main+0x220>
			target_count = target_count - 2500;
			//OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/());
		}
		else if(target_array == 2)
     6fa:	eb 85       	ldd	r30, Y+11	; 0x0b
     6fc:	fc 85       	ldd	r31, Y+12	; 0x0c
     6fe:	32 97       	sbiw	r30, 0x02	; 2
     700:	09 f0       	breq	.+2      	; 0x704 <main+0x154>
     702:	66 c0       	rjmp	.+204    	; 0x7d0 <main+0x220>
		{
			target_count = target_count + 35;
     704:	f3 e2       	ldi	r31, 0x23	; 35
     706:	4f 0e       	add	r4, r31
     708:	51 1c       	adc	r5, r1
     70a:	61 1c       	adc	r6, r1
     70c:	71 1c       	adc	r7, r1
			target_array = 3;
			OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.001));
     70e:	a0 91 04 01 	lds	r26, 0x0104
     712:	b0 91 05 01 	lds	r27, 0x0105
     716:	20 91 7a 04 	lds	r18, 0x047A
     71a:	30 91 7b 04 	lds	r19, 0x047B
     71e:	40 91 7c 04 	lds	r20, 0x047C
     722:	50 91 7d 04 	lds	r21, 0x047D
     726:	2b 87       	std	Y+11, r18	; 0x0b
     728:	3c 87       	std	Y+12, r19	; 0x0c
     72a:	4d 87       	std	Y+13, r20	; 0x0d
     72c:	5e 87       	std	Y+14, r21	; 0x0e
     72e:	c0 90 7e 04 	lds	r12, 0x047E
     732:	d0 90 7f 04 	lds	r13, 0x047F
     736:	e0 90 80 04 	lds	r14, 0x0480
     73a:	f0 90 81 04 	lds	r15, 0x0481
     73e:	20 91 00 01 	lds	r18, 0x0100
     742:	30 91 01 01 	lds	r19, 0x0101
     746:	40 91 02 01 	lds	r20, 0x0102
     74a:	50 91 03 01 	lds	r21, 0x0103
     74e:	2f 87       	std	Y+15, r18	; 0x0f
     750:	38 8b       	std	Y+16, r19	; 0x10
     752:	49 8b       	std	Y+17, r20	; 0x11
     754:	5a 8b       	std	Y+18, r21	; 0x12
     756:	a5 01       	movw	r20, r10
     758:	94 01       	movw	r18, r8
     75a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulshisi3>
     75e:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     762:	4b 01       	movw	r8, r22
     764:	5c 01       	movw	r10, r24
     766:	6b 85       	ldd	r22, Y+11	; 0x0b
     768:	7c 85       	ldd	r23, Y+12	; 0x0c
     76a:	8d 85       	ldd	r24, Y+13	; 0x0d
     76c:	9e 85       	ldd	r25, Y+14	; 0x0e
     76e:	6c 19       	sub	r22, r12
     770:	7d 09       	sbc	r23, r13
     772:	8e 09       	sbc	r24, r14
     774:	9f 09       	sbc	r25, r15
     776:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     77a:	2f e6       	ldi	r18, 0x6F	; 111
     77c:	32 e1       	ldi	r19, 0x12	; 18
     77e:	43 e8       	ldi	r20, 0x83	; 131
     780:	5a e3       	ldi	r21, 0x3A	; 58
     782:	0e 94 23 08 	call	0x1046	; 0x1046 <__divsf3>
     786:	0e 94 95 08 	call	0x112a	; 0x112a <__fixsfsi>
     78a:	9b 01       	movw	r18, r22
     78c:	77 23       	and	r23, r23
     78e:	24 f4       	brge	.+8      	; 0x798 <main+0x1e8>
     790:	22 27       	eor	r18, r18
     792:	33 27       	eor	r19, r19
     794:	26 1b       	sub	r18, r22
     796:	37 0b       	sbc	r19, r23
     798:	b9 01       	movw	r22, r18
     79a:	33 0f       	add	r19, r19
     79c:	88 0b       	sbc	r24, r24
     79e:	99 0b       	sbc	r25, r25
     7a0:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     7a4:	2f 85       	ldd	r18, Y+15	; 0x0f
     7a6:	38 89       	ldd	r19, Y+16	; 0x10
     7a8:	49 89       	ldd	r20, Y+17	; 0x11
     7aa:	5a 89       	ldd	r21, Y+18	; 0x12
     7ac:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     7b0:	9b 01       	movw	r18, r22
     7b2:	ac 01       	movw	r20, r24
     7b4:	c5 01       	movw	r24, r10
     7b6:	b4 01       	movw	r22, r8
     7b8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
     7bc:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fixunssfsi>
     7c0:	aa e8       	ldi	r26, 0x8A	; 138
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	11 96       	adiw	r26, 0x01	; 1
     7c6:	7c 93       	st	X, r23
     7c8:	6e 93       	st	-X, r22
			//OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/());
		}
		else if(target_array == 2)
		{
			target_count = target_count + 35;
			target_array = 3;
     7ca:	b3 e0       	ldi	r27, 0x03	; 3
     7cc:	bb 87       	std	Y+11, r27	; 0x0b
     7ce:	1c 86       	std	Y+12, r1	; 0x0c
			OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.001));
		}
		printed = 0;
	}
		error = target_count - global_counts_m2;
     7d0:	e0 90 83 04 	lds	r14, 0x0483
     7d4:	f0 90 84 04 	lds	r15, 0x0484
     7d8:	47 01       	movw	r8, r14
     7da:	0f 2c       	mov	r0, r15
     7dc:	00 0c       	add	r0, r0
     7de:	aa 08       	sbc	r10, r10
     7e0:	bb 08       	sbc	r11, r11
		if(print_menu == 0)
     7e2:	21 14       	cp	r2, r1
     7e4:	31 04       	cpc	r3, r1
     7e6:	99 f5       	brne	.+102    	; 0x84e <main+0x29e>
		{
			uart_print( "Interpolator is implemented by to perform following steps \n" );
     7e8:	87 e8       	ldi	r24, 0x87	; 135
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Step 1 : Rotate the motor forward 90 degrees \n" );
     7f0:	83 ec       	ldi	r24, 0xC3	; 195
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Step 2 : Hold for 0.5 seconds \n" );
     7f8:	82 ef       	ldi	r24, 0xF2	; 242
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Step 3 : Rotate in reverse for 360 degree\n" );
     800:	82 e1       	ldi	r24, 0x12	; 18
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Step 4 : Hold for 0.5 seconds \n" );
     808:	8d e3       	ldi	r24, 0x3D	; 61
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Step 5 : Rotated forward for 5 degrees \n" );
     810:	8d e5       	ldi	r24, 0x5D	; 93
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'P' to increase Kp by 1 \n" );
     818:	86 e8       	ldi	r24, 0x86	; 134
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'p' to decrease Kp by 1 \n" );
     820:	86 ea       	ldi	r24, 0xA6	; 166
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'D' to increase Kd by 0.5\n" );
     828:	86 ec       	ldi	r24, 0xC6	; 198
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'd' to decrease Kd by 0.5\n" );
     830:	87 ee       	ldi	r24, 0xE7	; 231
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'V' to view current values of Kd, Kp, Pr, Pm \n" );
     838:	88 e0       	ldi	r24, 0x08	; 8
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 't' to Start the trajectory" );
     840:	8d e3       	ldi	r24, 0x3D	; 61
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			print_menu = 1;
     848:	22 24       	eor	r2, r2
     84a:	23 94       	inc	r2
     84c:	31 2c       	mov	r3, r1
		}
		
		if(uart_dataAvailable())
     84e:	0e 94 c4 01 	call	0x388	; 0x388 <uart_dataAvailable>
     852:	89 2b       	or	r24, r25
     854:	09 f4       	brne	.+2      	; 0x858 <main+0x2a8>
     856:	92 c1       	rjmp	.+804    	; 0xb7c <__stack+0x7d>
		{
			receivedChar = uart_receive();
     858:	0e 94 bc 01 	call	0x378	; 0x378 <uart_receive>
			switch(receivedChar)
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fc 01       	movw	r30, r24
     860:	e4 54       	subi	r30, 0x44	; 68
     862:	f1 09       	sbc	r31, r1
     864:	e1 33       	cpi	r30, 0x31	; 49
     866:	f1 05       	cpc	r31, r1
     868:	08 f0       	brcs	.+2      	; 0x86c <main+0x2bc>
     86a:	8b c1       	rjmp	.+790    	; 0xb82 <__stack+0x83>
     86c:	ea 5a       	subi	r30, 0xAA	; 170
     86e:	ff 4f       	sbci	r31, 0xFF	; 255
     870:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__tablejump2__>
			{
				case 'R':
				if(printed == 0)
				{
					target_count = target_count + 70 ;
     874:	73 01       	movw	r14, r6
     876:	62 01       	movw	r12, r4
     878:	e6 e4       	ldi	r30, 0x46	; 70
     87a:	ce 0e       	add	r12, r30
     87c:	d1 1c       	adc	r13, r1
     87e:	e1 1c       	adc	r14, r1
     880:	f1 1c       	adc	r15, r1
					target_degree = target_degree + 10;
     882:	80 91 06 01 	lds	r24, 0x0106
     886:	90 91 07 01 	lds	r25, 0x0107
     88a:	a0 91 08 01 	lds	r26, 0x0108
     88e:	b0 91 09 01 	lds	r27, 0x0109
     892:	0a 96       	adiw	r24, 0x0a	; 10
     894:	a1 1d       	adc	r26, r1
     896:	b1 1d       	adc	r27, r1
     898:	80 93 06 01 	sts	0x0106, r24
     89c:	90 93 07 01 	sts	0x0107, r25
     8a0:	a0 93 08 01 	sts	0x0108, r26
     8a4:	b0 93 09 01 	sts	0x0109, r27
					uart_print( "New reference position set to(in degrees) : \n" );
     8a8:	8f e5       	ldi	r24, 0x5F	; 95
     8aa:	93 e0       	ldi	r25, 0x03	; 3
     8ac:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					itoa(target_degree, str, 10);
     8b0:	80 91 06 01 	lds	r24, 0x0106
     8b4:	90 91 07 01 	lds	r25, 0x0107
     8b8:	a0 91 08 01 	lds	r26, 0x0108
     8bc:	b0 91 09 01 	lds	r27, 0x0109
     8c0:	4a e0       	ldi	r20, 0x0A	; 10
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__itoa_ncheck>
					uart_print(str);
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     8d4:	58 c1       	rjmp	.+688    	; 0xb86 <__stack+0x87>
				}
				break;
				case 'r':
				if(printed == 0)
				{
					target_count = target_count - 70;
     8d6:	73 01       	movw	r14, r6
     8d8:	62 01       	movw	r12, r4
     8da:	f6 e4       	ldi	r31, 0x46	; 70
     8dc:	cf 1a       	sub	r12, r31
     8de:	d1 08       	sbc	r13, r1
     8e0:	e1 08       	sbc	r14, r1
     8e2:	f1 08       	sbc	r15, r1
					target_degree = target_degree - 10;
     8e4:	80 91 06 01 	lds	r24, 0x0106
     8e8:	90 91 07 01 	lds	r25, 0x0107
     8ec:	a0 91 08 01 	lds	r26, 0x0108
     8f0:	b0 91 09 01 	lds	r27, 0x0109
     8f4:	0a 97       	sbiw	r24, 0x0a	; 10
     8f6:	a1 09       	sbc	r26, r1
     8f8:	b1 09       	sbc	r27, r1
     8fa:	80 93 06 01 	sts	0x0106, r24
     8fe:	90 93 07 01 	sts	0x0107, r25
     902:	a0 93 08 01 	sts	0x0108, r26
     906:	b0 93 09 01 	sts	0x0109, r27
					uart_print( "New reference position set to : \n" );
     90a:	8d e8       	ldi	r24, 0x8D	; 141
     90c:	93 e0       	ldi	r25, 0x03	; 3
     90e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     912:	4a e0       	ldi	r20, 0x0A	; 10
     914:	be 01       	movw	r22, r28
     916:	6f 5f       	subi	r22, 0xFF	; 255
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	c6 01       	movw	r24, r12
     91c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__itoa_ncheck>
					itoa(target_count, str, 10);
					uart_print(str);
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     928:	2e c1       	rjmp	.+604    	; 0xb86 <__stack+0x87>
				}
				break;
				case 'P':
				if(printed == 0)
				{
					Kp = Kp + 1;
     92a:	80 91 04 01 	lds	r24, 0x0104
     92e:	90 91 05 01 	lds	r25, 0x0105
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	90 93 05 01 	sts	0x0105, r25
     938:	80 93 04 01 	sts	0x0104, r24
					uart_print( "New value of kp : \n" );
     93c:	8f ea       	ldi	r24, 0xAF	; 175
     93e:	93 e0       	ldi	r25, 0x03	; 3
     940:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kp, str, 1);
     944:	60 91 04 01 	lds	r22, 0x0104
     948:	70 91 05 01 	lds	r23, 0x0105
     94c:	07 2e       	mov	r0, r23
     94e:	00 0c       	add	r0, r0
     950:	88 0b       	sbc	r24, r24
     952:	99 0b       	sbc	r25, r25
     954:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     958:	21 e0       	ldi	r18, 0x01	; 1
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	ae 01       	movw	r20, r28
     95e:	4f 5f       	subi	r20, 0xFF	; 255
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     966:	ce 01       	movw	r24, r28
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     96e:	73 01       	movw	r14, r6
     970:	62 01       	movw	r12, r4
     972:	09 c1       	rjmp	.+530    	; 0xb86 <__stack+0x87>
				}
				break;
				case 'p':
				if(printed == 0)
				{
					Kp = Kp -1 ;
     974:	80 91 04 01 	lds	r24, 0x0104
     978:	90 91 05 01 	lds	r25, 0x0105
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	90 93 05 01 	sts	0x0105, r25
     982:	80 93 04 01 	sts	0x0104, r24
					uart_print( "New value of kp : \n" );
     986:	8f ea       	ldi	r24, 0xAF	; 175
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kp, str, 1);
     98e:	60 91 04 01 	lds	r22, 0x0104
     992:	70 91 05 01 	lds	r23, 0x0105
     996:	07 2e       	mov	r0, r23
     998:	00 0c       	add	r0, r0
     99a:	88 0b       	sbc	r24, r24
     99c:	99 0b       	sbc	r25, r25
     99e:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     9a2:	21 e0       	ldi	r18, 0x01	; 1
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	ae 01       	movw	r20, r28
     9a8:	4f 5f       	subi	r20, 0xFF	; 255
     9aa:	5f 4f       	sbci	r21, 0xFF	; 255
     9ac:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     9b0:	ce 01       	movw	r24, r28
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     9b8:	73 01       	movw	r14, r6
     9ba:	62 01       	movw	r12, r4
     9bc:	e4 c0       	rjmp	.+456    	; 0xb86 <__stack+0x87>
				}
				break;
				case 'D':
				if(printed == 0)
				{
					Kd = Kd + 0.5;
     9be:	60 91 00 01 	lds	r22, 0x0100
     9c2:	70 91 01 01 	lds	r23, 0x0101
     9c6:	80 91 02 01 	lds	r24, 0x0102
     9ca:	90 91 03 01 	lds	r25, 0x0103
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	5f e3       	ldi	r21, 0x3F	; 63
     9d6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
     9da:	60 93 00 01 	sts	0x0100, r22
     9de:	70 93 01 01 	sts	0x0101, r23
     9e2:	80 93 02 01 	sts	0x0102, r24
     9e6:	90 93 03 01 	sts	0x0103, r25
					uart_print( "New value of kd : " );
     9ea:	83 ec       	ldi	r24, 0xC3	; 195
     9ec:	93 e0       	ldi	r25, 0x03	; 3
     9ee:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kd, str, 1);
     9f2:	60 91 00 01 	lds	r22, 0x0100
     9f6:	70 91 01 01 	lds	r23, 0x0101
     9fa:	80 91 02 01 	lds	r24, 0x0102
     9fe:	90 91 03 01 	lds	r25, 0x0103
     a02:	21 e0       	ldi	r18, 0x01	; 1
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	ae 01       	movw	r20, r28
     a08:	4f 5f       	subi	r20, 0xFF	; 255
     a0a:	5f 4f       	sbci	r21, 0xFF	; 255
     a0c:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     a10:	ce 01       	movw	r24, r28
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     a18:	73 01       	movw	r14, r6
     a1a:	62 01       	movw	r12, r4
     a1c:	b4 c0       	rjmp	.+360    	; 0xb86 <__stack+0x87>
				}
				break;
				case 'd':
				if(printed == 0)
				{
					Kd = Kd - 0.5;
     a1e:	60 91 00 01 	lds	r22, 0x0100
     a22:	70 91 01 01 	lds	r23, 0x0101
     a26:	80 91 02 01 	lds	r24, 0x0102
     a2a:	90 91 03 01 	lds	r25, 0x0103
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	5f e3       	ldi	r21, 0x3F	; 63
     a36:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__subsf3>
     a3a:	60 93 00 01 	sts	0x0100, r22
     a3e:	70 93 01 01 	sts	0x0101, r23
     a42:	80 93 02 01 	sts	0x0102, r24
     a46:	90 93 03 01 	sts	0x0103, r25
					uart_print( "New value of kd : \n" );
     a4a:	86 ed       	ldi	r24, 0xD6	; 214
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kd, str, 1);
     a52:	60 91 00 01 	lds	r22, 0x0100
     a56:	70 91 01 01 	lds	r23, 0x0101
     a5a:	80 91 02 01 	lds	r24, 0x0102
     a5e:	90 91 03 01 	lds	r25, 0x0103
     a62:	21 e0       	ldi	r18, 0x01	; 1
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	ae 01       	movw	r20, r28
     a68:	4f 5f       	subi	r20, 0xFF	; 255
     a6a:	5f 4f       	sbci	r21, 0xFF	; 255
     a6c:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     a70:	ce 01       	movw	r24, r28
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     a78:	73 01       	movw	r14, r6
     a7a:	62 01       	movw	r12, r4
     a7c:	84 c0       	rjmp	.+264    	; 0xb86 <__stack+0x87>
				}
				break;
				case 'V':
				if(printed == 0)
				{
					uart_print( "Current value of kp : " );
     a7e:	8a ee       	ldi	r24, 0xEA	; 234
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kp, str, 1);
     a86:	60 91 04 01 	lds	r22, 0x0104
     a8a:	70 91 05 01 	lds	r23, 0x0105
     a8e:	07 2e       	mov	r0, r23
     a90:	00 0c       	add	r0, r0
     a92:	88 0b       	sbc	r24, r24
     a94:	99 0b       	sbc	r25, r25
     a96:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     a9a:	21 e0       	ldi	r18, 0x01	; 1
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	ae 01       	movw	r20, r28
     aa0:	4f 5f       	subi	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "\n" );
     ab0:	84 ec       	ldi	r24, 0xC4	; 196
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Current value of kd : " );
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	94 e0       	ldi	r25, 0x04	; 4
     abc:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kd, str, 1);
     ac0:	60 91 00 01 	lds	r22, 0x0100
     ac4:	70 91 01 01 	lds	r23, 0x0101
     ac8:	80 91 02 01 	lds	r24, 0x0102
     acc:	90 91 03 01 	lds	r25, 0x0103
     ad0:	21 e0       	ldi	r18, 0x01	; 1
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	ae 01       	movw	r20, r28
     ad6:	4f 5f       	subi	r20, 0xFF	; 255
     ad8:	5f 4f       	sbci	r21, 0xFF	; 255
     ada:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     ade:	ce 01       	movw	r24, r28
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print("\n");
     ae6:	84 ec       	ldi	r24, 0xC4	; 196
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Measured position 'Pm' in count : " );
     aee:	88 e1       	ldi	r24, 0x18	; 24
     af0:	94 e0       	ldi	r25, 0x04	; 4
     af2:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     af6:	4a e0       	ldi	r20, 0x0A	; 10
     af8:	be 01       	movw	r22, r28
     afa:	6f 5f       	subi	r22, 0xFF	; 255
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	c7 01       	movw	r24, r14
     b00:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__itoa_ncheck>
					itoa(global_counts_m2,str,10);
					uart_print(str);
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "\n" );
     b0c:	84 ec       	ldi	r24, 0xC4	; 196
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Reference position in count : " );
     b14:	8b e3       	ldi	r24, 0x3B	; 59
     b16:	94 e0       	ldi	r25, 0x04	; 4
     b18:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     b1c:	4a e0       	ldi	r20, 0x0A	; 10
     b1e:	be 01       	movw	r22, r28
     b20:	6f 5f       	subi	r22, 0xFF	; 255
     b22:	7f 4f       	sbci	r23, 0xFF	; 255
     b24:	c2 01       	movw	r24, r4
     b26:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__itoa_ncheck>
					itoa(target_count,str,10);
					uart_print(str);
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "\n" );
     b32:	84 ec       	ldi	r24, 0xC4	; 196
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Reference position in degree : " );
     b3a:	8a e5       	ldi	r24, 0x5A	; 90
     b3c:	94 e0       	ldi	r25, 0x04	; 4
     b3e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					itoa(target_degree,str,10);
     b42:	80 91 06 01 	lds	r24, 0x0106
     b46:	90 91 07 01 	lds	r25, 0x0107
     b4a:	a0 91 08 01 	lds	r26, 0x0108
     b4e:	b0 91 09 01 	lds	r27, 0x0109
     b52:	4a e0       	ldi	r20, 0x0A	; 10
     b54:	be 01       	movw	r22, r28
     b56:	6f 5f       	subi	r22, 0xFF	; 255
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__itoa_ncheck>
					uart_print(str);
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     b66:	73 01       	movw	r14, r6
     b68:	62 01       	movw	r12, r4
     b6a:	0d c0       	rjmp	.+26     	; 0xb86 <__stack+0x87>
				}
				break;
				case 't':
				if(printed == 0)
				{
					if(target_count != global_counts_m2)
     b6c:	48 14       	cp	r4, r8
     b6e:	59 04       	cpc	r5, r9
     b70:	6a 04       	cpc	r6, r10
     b72:	7b 04       	cpc	r7, r11
     b74:	69 f4       	brne	.+26     	; 0xb90 <__stack+0x91>
     b76:	75 01       	movw	r14, r10
     b78:	64 01       	movw	r12, r8
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <__stack+0x87>
     b7c:	73 01       	movw	r14, r6
     b7e:	62 01       	movw	r12, r4
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <__stack+0x87>
		}
		
		if(uart_dataAvailable())
		{
			receivedChar = uart_receive();
			switch(receivedChar)
     b82:	73 01       	movw	r14, r6
     b84:	62 01       	movw	r12, r4
				}
				break;
			}
		}
		
		if(run_motor == 1)
     b86:	01 30       	cpi	r16, 0x01	; 1
     b88:	11 05       	cpc	r17, r1
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__stack+0x8f>
     b8c:	82 cd       	rjmp	.-1276   	; 0x692 <main+0xe2>
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <__stack+0x95>
     b90:	73 01       	movw	r14, r6
     b92:	62 01       	movw	r12, r4
		{
			error = abs(global_counts_m2 - (target_count)) ;
     b94:	80 91 83 04 	lds	r24, 0x0483
     b98:	90 91 84 04 	lds	r25, 0x0484
     b9c:	9c 01       	movw	r18, r24
     b9e:	2c 19       	sub	r18, r12
     ba0:	3d 09       	sbc	r19, r13
     ba2:	49 01       	movw	r8, r18
     ba4:	22 f4       	brpl	.+8      	; 0xbae <__stack+0xaf>
     ba6:	88 24       	eor	r8, r8
     ba8:	99 24       	eor	r9, r9
     baa:	82 1a       	sub	r8, r18
     bac:	93 0a       	sbc	r9, r19
     bae:	09 2c       	mov	r0, r9
     bb0:	00 0c       	add	r0, r0
     bb2:	aa 08       	sbc	r10, r10
     bb4:	bb 08       	sbc	r11, r11
			if(global_counts_m2 > target_count)
     bb6:	ac 01       	movw	r20, r24
     bb8:	09 2e       	mov	r0, r25
     bba:	00 0c       	add	r0, r0
     bbc:	66 0b       	sbc	r22, r22
     bbe:	77 0b       	sbc	r23, r23
     bc0:	c4 16       	cp	r12, r20
     bc2:	d5 06       	cpc	r13, r21
     bc4:	e6 06       	cpc	r14, r22
     bc6:	f7 06       	cpc	r15, r23
     bc8:	0c f0       	brlt	.+2      	; 0xbcc <__stack+0xcd>
     bca:	e5 c0       	rjmp	.+458    	; 0xd96 <__stack+0x297>
     bcc:	4a e0       	ldi	r20, 0x0A	; 10
     bce:	be 01       	movw	r22, r28
     bd0:	6f 5f       	subi	r22, 0xFF	; 255
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__itoa_ncheck>
			{
				itoa(global_counts_m2,str,10);
				uart_print(str);
     bd8:	ce 01       	movw	r24, r28
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
				uart_print( "\n" );
     be0:	84 ec       	ldi	r24, 0xC4	; 196
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
				T = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
     be8:	a0 91 04 01 	lds	r26, 0x0104
     bec:	b0 91 05 01 	lds	r27, 0x0105
     bf0:	20 91 7a 04 	lds	r18, 0x047A
     bf4:	30 91 7b 04 	lds	r19, 0x047B
     bf8:	40 91 7c 04 	lds	r20, 0x047C
     bfc:	50 91 7d 04 	lds	r21, 0x047D
     c00:	2f 87       	std	Y+15, r18	; 0x0f
     c02:	38 8b       	std	Y+16, r19	; 0x10
     c04:	49 8b       	std	Y+17, r20	; 0x11
     c06:	5a 8b       	std	Y+18, r21	; 0x12
     c08:	40 90 7e 04 	lds	r4, 0x047E
     c0c:	50 90 7f 04 	lds	r5, 0x047F
     c10:	60 90 80 04 	lds	r6, 0x0480
     c14:	70 90 81 04 	lds	r7, 0x0481
     c18:	20 91 00 01 	lds	r18, 0x0100
     c1c:	30 91 01 01 	lds	r19, 0x0101
     c20:	40 91 02 01 	lds	r20, 0x0102
     c24:	50 91 03 01 	lds	r21, 0x0103
     c28:	2b 8b       	std	Y+19, r18	; 0x13
     c2a:	3c 8b       	std	Y+20, r19	; 0x14
     c2c:	4d 8b       	std	Y+21, r20	; 0x15
     c2e:	5e 8b       	std	Y+22, r21	; 0x16
     c30:	a5 01       	movw	r20, r10
     c32:	94 01       	movw	r18, r8
     c34:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulshisi3>
     c38:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     c3c:	6f 8b       	std	Y+23, r22	; 0x17
     c3e:	78 8f       	std	Y+24, r23	; 0x18
     c40:	89 8f       	std	Y+25, r24	; 0x19
     c42:	9a 8f       	std	Y+26, r25	; 0x1a
     c44:	6f 85       	ldd	r22, Y+15	; 0x0f
     c46:	78 89       	ldd	r23, Y+16	; 0x10
     c48:	89 89       	ldd	r24, Y+17	; 0x11
     c4a:	9a 89       	ldd	r25, Y+18	; 0x12
     c4c:	64 19       	sub	r22, r4
     c4e:	75 09       	sbc	r23, r5
     c50:	86 09       	sbc	r24, r6
     c52:	97 09       	sbc	r25, r7
     c54:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     c58:	2f e6       	ldi	r18, 0x6F	; 111
     c5a:	32 e1       	ldi	r19, 0x12	; 18
     c5c:	43 e8       	ldi	r20, 0x83	; 131
     c5e:	5b e3       	ldi	r21, 0x3B	; 59
     c60:	0e 94 23 08 	call	0x1046	; 0x1046 <__divsf3>
     c64:	0e 94 95 08 	call	0x112a	; 0x112a <__fixsfsi>
     c68:	9b 01       	movw	r18, r22
     c6a:	77 23       	and	r23, r23
     c6c:	24 f4       	brge	.+8      	; 0xc76 <__stack+0x177>
     c6e:	22 27       	eor	r18, r18
     c70:	33 27       	eor	r19, r19
     c72:	26 1b       	sub	r18, r22
     c74:	37 0b       	sbc	r19, r23
     c76:	b9 01       	movw	r22, r18
     c78:	33 0f       	add	r19, r19
     c7a:	88 0b       	sbc	r24, r24
     c7c:	99 0b       	sbc	r25, r25
     c7e:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     c82:	2b 89       	ldd	r18, Y+19	; 0x13
     c84:	3c 89       	ldd	r19, Y+20	; 0x14
     c86:	4d 89       	ldd	r20, Y+21	; 0x15
     c88:	5e 89       	ldd	r21, Y+22	; 0x16
     c8a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     c8e:	9b 01       	movw	r18, r22
     c90:	ac 01       	movw	r20, r24
     c92:	6f 89       	ldd	r22, Y+23	; 0x17
     c94:	78 8d       	ldd	r23, Y+24	; 0x18
     c96:	89 8d       	ldd	r24, Y+25	; 0x19
     c98:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c9a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
     c9e:	0e 94 95 08 	call	0x112a	; 0x112a <__fixsfsi>
				if(T < 10000)
     ca2:	60 31       	cpi	r22, 0x10	; 16
     ca4:	77 42       	sbci	r23, 0x27	; 39
     ca6:	81 05       	cpc	r24, r1
     ca8:	91 05       	cpc	r25, r1
     caa:	0c f0       	brlt	.+2      	; 0xcae <__stack+0x1af>
     cac:	68 c0       	rjmp	.+208    	; 0xd7e <__stack+0x27f>
				{
					OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
     cae:	a0 91 04 01 	lds	r26, 0x0104
     cb2:	b0 91 05 01 	lds	r27, 0x0105
     cb6:	20 91 7a 04 	lds	r18, 0x047A
     cba:	30 91 7b 04 	lds	r19, 0x047B
     cbe:	40 91 7c 04 	lds	r20, 0x047C
     cc2:	50 91 7d 04 	lds	r21, 0x047D
     cc6:	2f 87       	std	Y+15, r18	; 0x0f
     cc8:	38 8b       	std	Y+16, r19	; 0x10
     cca:	49 8b       	std	Y+17, r20	; 0x11
     ccc:	5a 8b       	std	Y+18, r21	; 0x12
     cce:	40 90 7e 04 	lds	r4, 0x047E
     cd2:	50 90 7f 04 	lds	r5, 0x047F
     cd6:	60 90 80 04 	lds	r6, 0x0480
     cda:	70 90 81 04 	lds	r7, 0x0481
     cde:	20 91 00 01 	lds	r18, 0x0100
     ce2:	30 91 01 01 	lds	r19, 0x0101
     ce6:	40 91 02 01 	lds	r20, 0x0102
     cea:	50 91 03 01 	lds	r21, 0x0103
     cee:	2b 8b       	std	Y+19, r18	; 0x13
     cf0:	3c 8b       	std	Y+20, r19	; 0x14
     cf2:	4d 8b       	std	Y+21, r20	; 0x15
     cf4:	5e 8b       	std	Y+22, r21	; 0x16
     cf6:	a5 01       	movw	r20, r10
     cf8:	94 01       	movw	r18, r8
     cfa:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulshisi3>
     cfe:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     d02:	6f 8b       	std	Y+23, r22	; 0x17
     d04:	78 8f       	std	Y+24, r23	; 0x18
     d06:	89 8f       	std	Y+25, r24	; 0x19
     d08:	9a 8f       	std	Y+26, r25	; 0x1a
     d0a:	6f 85       	ldd	r22, Y+15	; 0x0f
     d0c:	78 89       	ldd	r23, Y+16	; 0x10
     d0e:	89 89       	ldd	r24, Y+17	; 0x11
     d10:	9a 89       	ldd	r25, Y+18	; 0x12
     d12:	64 19       	sub	r22, r4
     d14:	75 09       	sbc	r23, r5
     d16:	86 09       	sbc	r24, r6
     d18:	97 09       	sbc	r25, r7
     d1a:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     d1e:	2f e6       	ldi	r18, 0x6F	; 111
     d20:	32 e1       	ldi	r19, 0x12	; 18
     d22:	43 e8       	ldi	r20, 0x83	; 131
     d24:	5b e3       	ldi	r21, 0x3B	; 59
     d26:	0e 94 23 08 	call	0x1046	; 0x1046 <__divsf3>
     d2a:	0e 94 95 08 	call	0x112a	; 0x112a <__fixsfsi>
     d2e:	9b 01       	movw	r18, r22
     d30:	77 23       	and	r23, r23
     d32:	24 f4       	brge	.+8      	; 0xd3c <__stack+0x23d>
     d34:	22 27       	eor	r18, r18
     d36:	33 27       	eor	r19, r19
     d38:	26 1b       	sub	r18, r22
     d3a:	37 0b       	sbc	r19, r23
     d3c:	b9 01       	movw	r22, r18
     d3e:	33 0f       	add	r19, r19
     d40:	88 0b       	sbc	r24, r24
     d42:	99 0b       	sbc	r25, r25
     d44:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     d48:	2b 89       	ldd	r18, Y+19	; 0x13
     d4a:	3c 89       	ldd	r19, Y+20	; 0x14
     d4c:	4d 89       	ldd	r20, Y+21	; 0x15
     d4e:	5e 89       	ldd	r21, Y+22	; 0x16
     d50:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     d54:	9b 01       	movw	r18, r22
     d56:	ac 01       	movw	r20, r24
     d58:	6f 89       	ldd	r22, Y+23	; 0x17
     d5a:	78 8d       	ldd	r23, Y+24	; 0x18
     d5c:	89 8d       	ldd	r24, Y+25	; 0x19
     d5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d60:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
     d64:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fixunssfsi>
     d68:	aa e8       	ldi	r26, 0x8A	; 138
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	7c 93       	st	X, r23
     d70:	6e 93       	st	-X, r22
					PORTE |= (1<<PORTE2);
     d72:	72 9a       	sbi	0x0e, 2	; 14
     d74:	26 01       	movw	r4, r12
     d76:	37 01       	movw	r6, r14
     d78:	01 e0       	ldi	r16, 0x01	; 1
     d7a:	10 e0       	ldi	r17, 0x00	; 0
     d7c:	99 cc       	rjmp	.-1742   	; 0x6b0 <main+0x100>
				}
				else
				{
					OCR1B = 10000;
     d7e:	20 e1       	ldi	r18, 0x10	; 16
     d80:	37 e2       	ldi	r19, 0x27	; 39
     d82:	ea e8       	ldi	r30, 0x8A	; 138
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	31 83       	std	Z+1, r19	; 0x01
     d88:	20 83       	st	Z, r18
					PORTE |= (1<<PORTE2);
     d8a:	72 9a       	sbi	0x0e, 2	; 14
     d8c:	26 01       	movw	r4, r12
     d8e:	37 01       	movw	r6, r14
     d90:	01 e0       	ldi	r16, 0x01	; 1
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	8d cc       	rjmp	.-1766   	; 0x6b0 <main+0x100>
				}

			}
			else if(global_counts_m2 < target_count)
     d96:	4c 15       	cp	r20, r12
     d98:	5d 05       	cpc	r21, r13
     d9a:	6e 05       	cpc	r22, r14
     d9c:	7f 05       	cpc	r23, r15
     d9e:	0c f0       	brlt	.+2      	; 0xda2 <__stack+0x2a3>
     da0:	83 cc       	rjmp	.-1786   	; 0x6a8 <main+0xf8>
     da2:	4a e0       	ldi	r20, 0x0A	; 10
     da4:	be 01       	movw	r22, r28
     da6:	6f 5f       	subi	r22, 0xFF	; 255
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__itoa_ncheck>
			{
				itoa(global_counts_m2,str,10);
				uart_print(str);
     dae:	ce 01       	movw	r24, r28
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
				uart_print( "\n" );
     db6:	84 ec       	ldi	r24, 0xC4	; 196
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
				T = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
     dbe:	a0 91 04 01 	lds	r26, 0x0104
     dc2:	b0 91 05 01 	lds	r27, 0x0105
     dc6:	20 91 7a 04 	lds	r18, 0x047A
     dca:	30 91 7b 04 	lds	r19, 0x047B
     dce:	40 91 7c 04 	lds	r20, 0x047C
     dd2:	50 91 7d 04 	lds	r21, 0x047D
     dd6:	2f 87       	std	Y+15, r18	; 0x0f
     dd8:	38 8b       	std	Y+16, r19	; 0x10
     dda:	49 8b       	std	Y+17, r20	; 0x11
     ddc:	5a 8b       	std	Y+18, r21	; 0x12
     dde:	40 90 7e 04 	lds	r4, 0x047E
     de2:	50 90 7f 04 	lds	r5, 0x047F
     de6:	60 90 80 04 	lds	r6, 0x0480
     dea:	70 90 81 04 	lds	r7, 0x0481
     dee:	20 91 00 01 	lds	r18, 0x0100
     df2:	30 91 01 01 	lds	r19, 0x0101
     df6:	40 91 02 01 	lds	r20, 0x0102
     dfa:	50 91 03 01 	lds	r21, 0x0103
     dfe:	2b 8b       	std	Y+19, r18	; 0x13
     e00:	3c 8b       	std	Y+20, r19	; 0x14
     e02:	4d 8b       	std	Y+21, r20	; 0x15
     e04:	5e 8b       	std	Y+22, r21	; 0x16
     e06:	a5 01       	movw	r20, r10
     e08:	94 01       	movw	r18, r8
     e0a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulshisi3>
     e0e:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     e12:	6f 8b       	std	Y+23, r22	; 0x17
     e14:	78 8f       	std	Y+24, r23	; 0x18
     e16:	89 8f       	std	Y+25, r24	; 0x19
     e18:	9a 8f       	std	Y+26, r25	; 0x1a
     e1a:	6f 85       	ldd	r22, Y+15	; 0x0f
     e1c:	78 89       	ldd	r23, Y+16	; 0x10
     e1e:	89 89       	ldd	r24, Y+17	; 0x11
     e20:	9a 89       	ldd	r25, Y+18	; 0x12
     e22:	64 19       	sub	r22, r4
     e24:	75 09       	sbc	r23, r5
     e26:	86 09       	sbc	r24, r6
     e28:	97 09       	sbc	r25, r7
     e2a:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     e2e:	2f e6       	ldi	r18, 0x6F	; 111
     e30:	32 e1       	ldi	r19, 0x12	; 18
     e32:	43 e8       	ldi	r20, 0x83	; 131
     e34:	5b e3       	ldi	r21, 0x3B	; 59
     e36:	0e 94 23 08 	call	0x1046	; 0x1046 <__divsf3>
     e3a:	0e 94 95 08 	call	0x112a	; 0x112a <__fixsfsi>
     e3e:	9b 01       	movw	r18, r22
     e40:	77 23       	and	r23, r23
     e42:	24 f4       	brge	.+8      	; 0xe4c <__stack+0x34d>
     e44:	22 27       	eor	r18, r18
     e46:	33 27       	eor	r19, r19
     e48:	26 1b       	sub	r18, r22
     e4a:	37 0b       	sbc	r19, r23
     e4c:	b9 01       	movw	r22, r18
     e4e:	33 0f       	add	r19, r19
     e50:	88 0b       	sbc	r24, r24
     e52:	99 0b       	sbc	r25, r25
     e54:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     e58:	2b 89       	ldd	r18, Y+19	; 0x13
     e5a:	3c 89       	ldd	r19, Y+20	; 0x14
     e5c:	4d 89       	ldd	r20, Y+21	; 0x15
     e5e:	5e 89       	ldd	r21, Y+22	; 0x16
     e60:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	6f 89       	ldd	r22, Y+23	; 0x17
     e6a:	78 8d       	ldd	r23, Y+24	; 0x18
     e6c:	89 8d       	ldd	r24, Y+25	; 0x19
     e6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e70:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
     e74:	0e 94 95 08 	call	0x112a	; 0x112a <__fixsfsi>
				if(T < 10000)
     e78:	60 31       	cpi	r22, 0x10	; 16
     e7a:	77 42       	sbci	r23, 0x27	; 39
     e7c:	81 05       	cpc	r24, r1
     e7e:	91 05       	cpc	r25, r1
     e80:	0c f0       	brlt	.+2      	; 0xe84 <__stack+0x385>
     e82:	68 c0       	rjmp	.+208    	; 0xf54 <__stack+0x455>
				{
					OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
     e84:	a0 91 04 01 	lds	r26, 0x0104
     e88:	b0 91 05 01 	lds	r27, 0x0105
     e8c:	20 91 7a 04 	lds	r18, 0x047A
     e90:	30 91 7b 04 	lds	r19, 0x047B
     e94:	40 91 7c 04 	lds	r20, 0x047C
     e98:	50 91 7d 04 	lds	r21, 0x047D
     e9c:	2f 87       	std	Y+15, r18	; 0x0f
     e9e:	38 8b       	std	Y+16, r19	; 0x10
     ea0:	49 8b       	std	Y+17, r20	; 0x11
     ea2:	5a 8b       	std	Y+18, r21	; 0x12
     ea4:	40 90 7e 04 	lds	r4, 0x047E
     ea8:	50 90 7f 04 	lds	r5, 0x047F
     eac:	60 90 80 04 	lds	r6, 0x0480
     eb0:	70 90 81 04 	lds	r7, 0x0481
     eb4:	20 91 00 01 	lds	r18, 0x0100
     eb8:	30 91 01 01 	lds	r19, 0x0101
     ebc:	40 91 02 01 	lds	r20, 0x0102
     ec0:	50 91 03 01 	lds	r21, 0x0103
     ec4:	2b 8b       	std	Y+19, r18	; 0x13
     ec6:	3c 8b       	std	Y+20, r19	; 0x14
     ec8:	4d 8b       	std	Y+21, r20	; 0x15
     eca:	5e 8b       	std	Y+22, r21	; 0x16
     ecc:	a5 01       	movw	r20, r10
     ece:	94 01       	movw	r18, r8
     ed0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulshisi3>
     ed4:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     ed8:	6f 8b       	std	Y+23, r22	; 0x17
     eda:	78 8f       	std	Y+24, r23	; 0x18
     edc:	89 8f       	std	Y+25, r24	; 0x19
     ede:	9a 8f       	std	Y+26, r25	; 0x1a
     ee0:	6f 85       	ldd	r22, Y+15	; 0x0f
     ee2:	78 89       	ldd	r23, Y+16	; 0x10
     ee4:	89 89       	ldd	r24, Y+17	; 0x11
     ee6:	9a 89       	ldd	r25, Y+18	; 0x12
     ee8:	64 19       	sub	r22, r4
     eea:	75 09       	sbc	r23, r5
     eec:	86 09       	sbc	r24, r6
     eee:	97 09       	sbc	r25, r7
     ef0:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     ef4:	2f e6       	ldi	r18, 0x6F	; 111
     ef6:	32 e1       	ldi	r19, 0x12	; 18
     ef8:	43 e8       	ldi	r20, 0x83	; 131
     efa:	5b e3       	ldi	r21, 0x3B	; 59
     efc:	0e 94 23 08 	call	0x1046	; 0x1046 <__divsf3>
     f00:	0e 94 95 08 	call	0x112a	; 0x112a <__fixsfsi>
     f04:	9b 01       	movw	r18, r22
     f06:	77 23       	and	r23, r23
     f08:	24 f4       	brge	.+8      	; 0xf12 <__stack+0x413>
     f0a:	22 27       	eor	r18, r18
     f0c:	33 27       	eor	r19, r19
     f0e:	26 1b       	sub	r18, r22
     f10:	37 0b       	sbc	r19, r23
     f12:	b9 01       	movw	r22, r18
     f14:	33 0f       	add	r19, r19
     f16:	88 0b       	sbc	r24, r24
     f18:	99 0b       	sbc	r25, r25
     f1a:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
     f1e:	2b 89       	ldd	r18, Y+19	; 0x13
     f20:	3c 89       	ldd	r19, Y+20	; 0x14
     f22:	4d 89       	ldd	r20, Y+21	; 0x15
     f24:	5e 89       	ldd	r21, Y+22	; 0x16
     f26:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     f2a:	9b 01       	movw	r18, r22
     f2c:	ac 01       	movw	r20, r24
     f2e:	6f 89       	ldd	r22, Y+23	; 0x17
     f30:	78 8d       	ldd	r23, Y+24	; 0x18
     f32:	89 8d       	ldd	r24, Y+25	; 0x19
     f34:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f36:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
     f3a:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fixunssfsi>
     f3e:	aa e8       	ldi	r26, 0x8A	; 138
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	11 96       	adiw	r26, 0x01	; 1
     f44:	7c 93       	st	X, r23
     f46:	6e 93       	st	-X, r22
					PORTE &= ~(1<<PORTE2);					
     f48:	72 98       	cbi	0x0e, 2	; 14
     f4a:	26 01       	movw	r4, r12
     f4c:	37 01       	movw	r6, r14
     f4e:	01 e0       	ldi	r16, 0x01	; 1
     f50:	10 e0       	ldi	r17, 0x00	; 0
     f52:	ae cb       	rjmp	.-2212   	; 0x6b0 <main+0x100>
				}
				else
				{
					OCR1B = 10000;
     f54:	20 e1       	ldi	r18, 0x10	; 16
     f56:	37 e2       	ldi	r19, 0x27	; 39
     f58:	ea e8       	ldi	r30, 0x8A	; 138
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	31 83       	std	Z+1, r19	; 0x01
     f5e:	20 83       	st	Z, r18
					PORTE &= ~(1<<PORTE2);					
     f60:	72 98       	cbi	0x0e, 2	; 14
     f62:	26 01       	movw	r4, r12
     f64:	37 01       	movw	r6, r14
     f66:	01 e0       	ldi	r16, 0x01	; 1
     f68:	10 e0       	ldi	r17, 0x00	; 0
     f6a:	a2 cb       	rjmp	.-2236   	; 0x6b0 <main+0x100>

00000f6c <__subsf3>:
     f6c:	50 58       	subi	r21, 0x80	; 128

00000f6e <__addsf3>:
     f6e:	bb 27       	eor	r27, r27
     f70:	aa 27       	eor	r26, r26
     f72:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__addsf3x>
     f76:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_round>
     f7a:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_pscA>
     f7e:	38 f0       	brcs	.+14     	; 0xf8e <__addsf3+0x20>
     f80:	0e 94 18 09 	call	0x1230	; 0x1230 <__fp_pscB>
     f84:	20 f0       	brcs	.+8      	; 0xf8e <__addsf3+0x20>
     f86:	39 f4       	brne	.+14     	; 0xf96 <__addsf3+0x28>
     f88:	9f 3f       	cpi	r25, 0xFF	; 255
     f8a:	19 f4       	brne	.+6      	; 0xf92 <__addsf3+0x24>
     f8c:	26 f4       	brtc	.+8      	; 0xf96 <__addsf3+0x28>
     f8e:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_nan>
     f92:	0e f4       	brtc	.+2      	; 0xf96 <__addsf3+0x28>
     f94:	e0 95       	com	r30
     f96:	e7 fb       	bst	r30, 7
     f98:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_inf>

00000f9c <__addsf3x>:
     f9c:	e9 2f       	mov	r30, r25
     f9e:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_split3>
     fa2:	58 f3       	brcs	.-42     	; 0xf7a <__addsf3+0xc>
     fa4:	ba 17       	cp	r27, r26
     fa6:	62 07       	cpc	r22, r18
     fa8:	73 07       	cpc	r23, r19
     faa:	84 07       	cpc	r24, r20
     fac:	95 07       	cpc	r25, r21
     fae:	20 f0       	brcs	.+8      	; 0xfb8 <__addsf3x+0x1c>
     fb0:	79 f4       	brne	.+30     	; 0xfd0 <__addsf3x+0x34>
     fb2:	a6 f5       	brtc	.+104    	; 0x101c <__addsf3x+0x80>
     fb4:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__fp_zero>
     fb8:	0e f4       	brtc	.+2      	; 0xfbc <__addsf3x+0x20>
     fba:	e0 95       	com	r30
     fbc:	0b 2e       	mov	r0, r27
     fbe:	ba 2f       	mov	r27, r26
     fc0:	a0 2d       	mov	r26, r0
     fc2:	0b 01       	movw	r0, r22
     fc4:	b9 01       	movw	r22, r18
     fc6:	90 01       	movw	r18, r0
     fc8:	0c 01       	movw	r0, r24
     fca:	ca 01       	movw	r24, r20
     fcc:	a0 01       	movw	r20, r0
     fce:	11 24       	eor	r1, r1
     fd0:	ff 27       	eor	r31, r31
     fd2:	59 1b       	sub	r21, r25
     fd4:	99 f0       	breq	.+38     	; 0xffc <__addsf3x+0x60>
     fd6:	59 3f       	cpi	r21, 0xF9	; 249
     fd8:	50 f4       	brcc	.+20     	; 0xfee <__addsf3x+0x52>
     fda:	50 3e       	cpi	r21, 0xE0	; 224
     fdc:	68 f1       	brcs	.+90     	; 0x1038 <__addsf3x+0x9c>
     fde:	1a 16       	cp	r1, r26
     fe0:	f0 40       	sbci	r31, 0x00	; 0
     fe2:	a2 2f       	mov	r26, r18
     fe4:	23 2f       	mov	r18, r19
     fe6:	34 2f       	mov	r19, r20
     fe8:	44 27       	eor	r20, r20
     fea:	58 5f       	subi	r21, 0xF8	; 248
     fec:	f3 cf       	rjmp	.-26     	; 0xfd4 <__addsf3x+0x38>
     fee:	46 95       	lsr	r20
     ff0:	37 95       	ror	r19
     ff2:	27 95       	ror	r18
     ff4:	a7 95       	ror	r26
     ff6:	f0 40       	sbci	r31, 0x00	; 0
     ff8:	53 95       	inc	r21
     ffa:	c9 f7       	brne	.-14     	; 0xfee <__addsf3x+0x52>
     ffc:	7e f4       	brtc	.+30     	; 0x101c <__addsf3x+0x80>
     ffe:	1f 16       	cp	r1, r31
    1000:	ba 0b       	sbc	r27, r26
    1002:	62 0b       	sbc	r22, r18
    1004:	73 0b       	sbc	r23, r19
    1006:	84 0b       	sbc	r24, r20
    1008:	ba f0       	brmi	.+46     	; 0x1038 <__addsf3x+0x9c>
    100a:	91 50       	subi	r25, 0x01	; 1
    100c:	a1 f0       	breq	.+40     	; 0x1036 <__addsf3x+0x9a>
    100e:	ff 0f       	add	r31, r31
    1010:	bb 1f       	adc	r27, r27
    1012:	66 1f       	adc	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	c2 f7       	brpl	.-16     	; 0x100a <__addsf3x+0x6e>
    101a:	0e c0       	rjmp	.+28     	; 0x1038 <__addsf3x+0x9c>
    101c:	ba 0f       	add	r27, r26
    101e:	62 1f       	adc	r22, r18
    1020:	73 1f       	adc	r23, r19
    1022:	84 1f       	adc	r24, r20
    1024:	48 f4       	brcc	.+18     	; 0x1038 <__addsf3x+0x9c>
    1026:	87 95       	ror	r24
    1028:	77 95       	ror	r23
    102a:	67 95       	ror	r22
    102c:	b7 95       	ror	r27
    102e:	f7 95       	ror	r31
    1030:	9e 3f       	cpi	r25, 0xFE	; 254
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__addsf3x+0x9a>
    1034:	b0 cf       	rjmp	.-160    	; 0xf96 <__addsf3+0x28>
    1036:	93 95       	inc	r25
    1038:	88 0f       	add	r24, r24
    103a:	08 f0       	brcs	.+2      	; 0x103e <__addsf3x+0xa2>
    103c:	99 27       	eor	r25, r25
    103e:	ee 0f       	add	r30, r30
    1040:	97 95       	ror	r25
    1042:	87 95       	ror	r24
    1044:	08 95       	ret

00001046 <__divsf3>:
    1046:	0e 94 37 08 	call	0x106e	; 0x106e <__divsf3x>
    104a:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_round>
    104e:	0e 94 18 09 	call	0x1230	; 0x1230 <__fp_pscB>
    1052:	58 f0       	brcs	.+22     	; 0x106a <__divsf3+0x24>
    1054:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_pscA>
    1058:	40 f0       	brcs	.+16     	; 0x106a <__divsf3+0x24>
    105a:	29 f4       	brne	.+10     	; 0x1066 <__divsf3+0x20>
    105c:	5f 3f       	cpi	r21, 0xFF	; 255
    105e:	29 f0       	breq	.+10     	; 0x106a <__divsf3+0x24>
    1060:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_inf>
    1064:	51 11       	cpse	r21, r1
    1066:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__fp_szero>
    106a:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_nan>

0000106e <__divsf3x>:
    106e:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_split3>
    1072:	68 f3       	brcs	.-38     	; 0x104e <__divsf3+0x8>

00001074 <__divsf3_pse>:
    1074:	99 23       	and	r25, r25
    1076:	b1 f3       	breq	.-20     	; 0x1064 <__divsf3+0x1e>
    1078:	55 23       	and	r21, r21
    107a:	91 f3       	breq	.-28     	; 0x1060 <__divsf3+0x1a>
    107c:	95 1b       	sub	r25, r21
    107e:	55 0b       	sbc	r21, r21
    1080:	bb 27       	eor	r27, r27
    1082:	aa 27       	eor	r26, r26
    1084:	62 17       	cp	r22, r18
    1086:	73 07       	cpc	r23, r19
    1088:	84 07       	cpc	r24, r20
    108a:	38 f0       	brcs	.+14     	; 0x109a <__divsf3_pse+0x26>
    108c:	9f 5f       	subi	r25, 0xFF	; 255
    108e:	5f 4f       	sbci	r21, 0xFF	; 255
    1090:	22 0f       	add	r18, r18
    1092:	33 1f       	adc	r19, r19
    1094:	44 1f       	adc	r20, r20
    1096:	aa 1f       	adc	r26, r26
    1098:	a9 f3       	breq	.-22     	; 0x1084 <__divsf3_pse+0x10>
    109a:	35 d0       	rcall	.+106    	; 0x1106 <__divsf3_pse+0x92>
    109c:	0e 2e       	mov	r0, r30
    109e:	3a f0       	brmi	.+14     	; 0x10ae <__divsf3_pse+0x3a>
    10a0:	e0 e8       	ldi	r30, 0x80	; 128
    10a2:	32 d0       	rcall	.+100    	; 0x1108 <__divsf3_pse+0x94>
    10a4:	91 50       	subi	r25, 0x01	; 1
    10a6:	50 40       	sbci	r21, 0x00	; 0
    10a8:	e6 95       	lsr	r30
    10aa:	00 1c       	adc	r0, r0
    10ac:	ca f7       	brpl	.-14     	; 0x10a0 <__divsf3_pse+0x2c>
    10ae:	2b d0       	rcall	.+86     	; 0x1106 <__divsf3_pse+0x92>
    10b0:	fe 2f       	mov	r31, r30
    10b2:	29 d0       	rcall	.+82     	; 0x1106 <__divsf3_pse+0x92>
    10b4:	66 0f       	add	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	88 1f       	adc	r24, r24
    10ba:	bb 1f       	adc	r27, r27
    10bc:	26 17       	cp	r18, r22
    10be:	37 07       	cpc	r19, r23
    10c0:	48 07       	cpc	r20, r24
    10c2:	ab 07       	cpc	r26, r27
    10c4:	b0 e8       	ldi	r27, 0x80	; 128
    10c6:	09 f0       	breq	.+2      	; 0x10ca <__divsf3_pse+0x56>
    10c8:	bb 0b       	sbc	r27, r27
    10ca:	80 2d       	mov	r24, r0
    10cc:	bf 01       	movw	r22, r30
    10ce:	ff 27       	eor	r31, r31
    10d0:	93 58       	subi	r25, 0x83	; 131
    10d2:	5f 4f       	sbci	r21, 0xFF	; 255
    10d4:	3a f0       	brmi	.+14     	; 0x10e4 <__divsf3_pse+0x70>
    10d6:	9e 3f       	cpi	r25, 0xFE	; 254
    10d8:	51 05       	cpc	r21, r1
    10da:	78 f0       	brcs	.+30     	; 0x10fa <__divsf3_pse+0x86>
    10dc:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_inf>
    10e0:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__fp_szero>
    10e4:	5f 3f       	cpi	r21, 0xFF	; 255
    10e6:	e4 f3       	brlt	.-8      	; 0x10e0 <__divsf3_pse+0x6c>
    10e8:	98 3e       	cpi	r25, 0xE8	; 232
    10ea:	d4 f3       	brlt	.-12     	; 0x10e0 <__divsf3_pse+0x6c>
    10ec:	86 95       	lsr	r24
    10ee:	77 95       	ror	r23
    10f0:	67 95       	ror	r22
    10f2:	b7 95       	ror	r27
    10f4:	f7 95       	ror	r31
    10f6:	9f 5f       	subi	r25, 0xFF	; 255
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__divsf3_pse+0x78>
    10fa:	88 0f       	add	r24, r24
    10fc:	91 1d       	adc	r25, r1
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	97 f9       	bld	r25, 7
    1104:	08 95       	ret
    1106:	e1 e0       	ldi	r30, 0x01	; 1
    1108:	66 0f       	add	r22, r22
    110a:	77 1f       	adc	r23, r23
    110c:	88 1f       	adc	r24, r24
    110e:	bb 1f       	adc	r27, r27
    1110:	62 17       	cp	r22, r18
    1112:	73 07       	cpc	r23, r19
    1114:	84 07       	cpc	r24, r20
    1116:	ba 07       	cpc	r27, r26
    1118:	20 f0       	brcs	.+8      	; 0x1122 <__divsf3_pse+0xae>
    111a:	62 1b       	sub	r22, r18
    111c:	73 0b       	sbc	r23, r19
    111e:	84 0b       	sbc	r24, r20
    1120:	ba 0b       	sbc	r27, r26
    1122:	ee 1f       	adc	r30, r30
    1124:	88 f7       	brcc	.-30     	; 0x1108 <__divsf3_pse+0x94>
    1126:	e0 95       	com	r30
    1128:	08 95       	ret

0000112a <__fixsfsi>:
    112a:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fixunssfsi>
    112e:	68 94       	set
    1130:	b1 11       	cpse	r27, r1
    1132:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__fp_szero>
    1136:	08 95       	ret

00001138 <__fixunssfsi>:
    1138:	0e 94 38 09 	call	0x1270	; 0x1270 <__fp_splitA>
    113c:	88 f0       	brcs	.+34     	; 0x1160 <__fixunssfsi+0x28>
    113e:	9f 57       	subi	r25, 0x7F	; 127
    1140:	98 f0       	brcs	.+38     	; 0x1168 <__fixunssfsi+0x30>
    1142:	b9 2f       	mov	r27, r25
    1144:	99 27       	eor	r25, r25
    1146:	b7 51       	subi	r27, 0x17	; 23
    1148:	b0 f0       	brcs	.+44     	; 0x1176 <__fixunssfsi+0x3e>
    114a:	e1 f0       	breq	.+56     	; 0x1184 <__fixunssfsi+0x4c>
    114c:	66 0f       	add	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	1a f0       	brmi	.+6      	; 0x115c <__fixunssfsi+0x24>
    1156:	ba 95       	dec	r27
    1158:	c9 f7       	brne	.-14     	; 0x114c <__fixunssfsi+0x14>
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <__fixunssfsi+0x4c>
    115c:	b1 30       	cpi	r27, 0x01	; 1
    115e:	91 f0       	breq	.+36     	; 0x1184 <__fixunssfsi+0x4c>
    1160:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__fp_zero>
    1164:	b1 e0       	ldi	r27, 0x01	; 1
    1166:	08 95       	ret
    1168:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__fp_zero>
    116c:	67 2f       	mov	r22, r23
    116e:	78 2f       	mov	r23, r24
    1170:	88 27       	eor	r24, r24
    1172:	b8 5f       	subi	r27, 0xF8	; 248
    1174:	39 f0       	breq	.+14     	; 0x1184 <__fixunssfsi+0x4c>
    1176:	b9 3f       	cpi	r27, 0xF9	; 249
    1178:	cc f3       	brlt	.-14     	; 0x116c <__fixunssfsi+0x34>
    117a:	86 95       	lsr	r24
    117c:	77 95       	ror	r23
    117e:	67 95       	ror	r22
    1180:	b3 95       	inc	r27
    1182:	d9 f7       	brne	.-10     	; 0x117a <__fixunssfsi+0x42>
    1184:	3e f4       	brtc	.+14     	; 0x1194 <__fixunssfsi+0x5c>
    1186:	90 95       	com	r25
    1188:	80 95       	com	r24
    118a:	70 95       	com	r23
    118c:	61 95       	neg	r22
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	08 95       	ret

00001196 <__floatunsisf>:
    1196:	e8 94       	clt
    1198:	09 c0       	rjmp	.+18     	; 0x11ac <__floatsisf+0x12>

0000119a <__floatsisf>:
    119a:	97 fb       	bst	r25, 7
    119c:	3e f4       	brtc	.+14     	; 0x11ac <__floatsisf+0x12>
    119e:	90 95       	com	r25
    11a0:	80 95       	com	r24
    11a2:	70 95       	com	r23
    11a4:	61 95       	neg	r22
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	8f 4f       	sbci	r24, 0xFF	; 255
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	99 23       	and	r25, r25
    11ae:	a9 f0       	breq	.+42     	; 0x11da <__floatsisf+0x40>
    11b0:	f9 2f       	mov	r31, r25
    11b2:	96 e9       	ldi	r25, 0x96	; 150
    11b4:	bb 27       	eor	r27, r27
    11b6:	93 95       	inc	r25
    11b8:	f6 95       	lsr	r31
    11ba:	87 95       	ror	r24
    11bc:	77 95       	ror	r23
    11be:	67 95       	ror	r22
    11c0:	b7 95       	ror	r27
    11c2:	f1 11       	cpse	r31, r1
    11c4:	f8 cf       	rjmp	.-16     	; 0x11b6 <__floatsisf+0x1c>
    11c6:	fa f4       	brpl	.+62     	; 0x1206 <__floatsisf+0x6c>
    11c8:	bb 0f       	add	r27, r27
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <__floatsisf+0x36>
    11cc:	60 ff       	sbrs	r22, 0
    11ce:	1b c0       	rjmp	.+54     	; 0x1206 <__floatsisf+0x6c>
    11d0:	6f 5f       	subi	r22, 0xFF	; 255
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	8f 4f       	sbci	r24, 0xFF	; 255
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	16 c0       	rjmp	.+44     	; 0x1206 <__floatsisf+0x6c>
    11da:	88 23       	and	r24, r24
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <__floatsisf+0x48>
    11de:	96 e9       	ldi	r25, 0x96	; 150
    11e0:	11 c0       	rjmp	.+34     	; 0x1204 <__floatsisf+0x6a>
    11e2:	77 23       	and	r23, r23
    11e4:	21 f0       	breq	.+8      	; 0x11ee <__floatsisf+0x54>
    11e6:	9e e8       	ldi	r25, 0x8E	; 142
    11e8:	87 2f       	mov	r24, r23
    11ea:	76 2f       	mov	r23, r22
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <__floatsisf+0x5e>
    11ee:	66 23       	and	r22, r22
    11f0:	71 f0       	breq	.+28     	; 0x120e <__floatsisf+0x74>
    11f2:	96 e8       	ldi	r25, 0x86	; 134
    11f4:	86 2f       	mov	r24, r22
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	2a f0       	brmi	.+10     	; 0x1206 <__floatsisf+0x6c>
    11fc:	9a 95       	dec	r25
    11fe:	66 0f       	add	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	da f7       	brpl	.-10     	; 0x11fc <__floatsisf+0x62>
    1206:	88 0f       	add	r24, r24
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	97 f9       	bld	r25, 7
    120e:	08 95       	ret

00001210 <__fp_inf>:
    1210:	97 f9       	bld	r25, 7
    1212:	9f 67       	ori	r25, 0x7F	; 127
    1214:	80 e8       	ldi	r24, 0x80	; 128
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	08 95       	ret

0000121c <__fp_nan>:
    121c:	9f ef       	ldi	r25, 0xFF	; 255
    121e:	80 ec       	ldi	r24, 0xC0	; 192
    1220:	08 95       	ret

00001222 <__fp_pscA>:
    1222:	00 24       	eor	r0, r0
    1224:	0a 94       	dec	r0
    1226:	16 16       	cp	r1, r22
    1228:	17 06       	cpc	r1, r23
    122a:	18 06       	cpc	r1, r24
    122c:	09 06       	cpc	r0, r25
    122e:	08 95       	ret

00001230 <__fp_pscB>:
    1230:	00 24       	eor	r0, r0
    1232:	0a 94       	dec	r0
    1234:	12 16       	cp	r1, r18
    1236:	13 06       	cpc	r1, r19
    1238:	14 06       	cpc	r1, r20
    123a:	05 06       	cpc	r0, r21
    123c:	08 95       	ret

0000123e <__fp_round>:
    123e:	09 2e       	mov	r0, r25
    1240:	03 94       	inc	r0
    1242:	00 0c       	add	r0, r0
    1244:	11 f4       	brne	.+4      	; 0x124a <__fp_round+0xc>
    1246:	88 23       	and	r24, r24
    1248:	52 f0       	brmi	.+20     	; 0x125e <__fp_round+0x20>
    124a:	bb 0f       	add	r27, r27
    124c:	40 f4       	brcc	.+16     	; 0x125e <__fp_round+0x20>
    124e:	bf 2b       	or	r27, r31
    1250:	11 f4       	brne	.+4      	; 0x1256 <__fp_round+0x18>
    1252:	60 ff       	sbrs	r22, 0
    1254:	04 c0       	rjmp	.+8      	; 0x125e <__fp_round+0x20>
    1256:	6f 5f       	subi	r22, 0xFF	; 255
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	8f 4f       	sbci	r24, 0xFF	; 255
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	08 95       	ret

00001260 <__fp_split3>:
    1260:	57 fd       	sbrc	r21, 7
    1262:	90 58       	subi	r25, 0x80	; 128
    1264:	44 0f       	add	r20, r20
    1266:	55 1f       	adc	r21, r21
    1268:	59 f0       	breq	.+22     	; 0x1280 <__fp_splitA+0x10>
    126a:	5f 3f       	cpi	r21, 0xFF	; 255
    126c:	71 f0       	breq	.+28     	; 0x128a <__fp_splitA+0x1a>
    126e:	47 95       	ror	r20

00001270 <__fp_splitA>:
    1270:	88 0f       	add	r24, r24
    1272:	97 fb       	bst	r25, 7
    1274:	99 1f       	adc	r25, r25
    1276:	61 f0       	breq	.+24     	; 0x1290 <__fp_splitA+0x20>
    1278:	9f 3f       	cpi	r25, 0xFF	; 255
    127a:	79 f0       	breq	.+30     	; 0x129a <__fp_splitA+0x2a>
    127c:	87 95       	ror	r24
    127e:	08 95       	ret
    1280:	12 16       	cp	r1, r18
    1282:	13 06       	cpc	r1, r19
    1284:	14 06       	cpc	r1, r20
    1286:	55 1f       	adc	r21, r21
    1288:	f2 cf       	rjmp	.-28     	; 0x126e <__fp_split3+0xe>
    128a:	46 95       	lsr	r20
    128c:	f1 df       	rcall	.-30     	; 0x1270 <__fp_splitA>
    128e:	08 c0       	rjmp	.+16     	; 0x12a0 <__fp_splitA+0x30>
    1290:	16 16       	cp	r1, r22
    1292:	17 06       	cpc	r1, r23
    1294:	18 06       	cpc	r1, r24
    1296:	99 1f       	adc	r25, r25
    1298:	f1 cf       	rjmp	.-30     	; 0x127c <__fp_splitA+0xc>
    129a:	86 95       	lsr	r24
    129c:	71 05       	cpc	r23, r1
    129e:	61 05       	cpc	r22, r1
    12a0:	08 94       	sec
    12a2:	08 95       	ret

000012a4 <__fp_zero>:
    12a4:	e8 94       	clt

000012a6 <__fp_szero>:
    12a6:	bb 27       	eor	r27, r27
    12a8:	66 27       	eor	r22, r22
    12aa:	77 27       	eor	r23, r23
    12ac:	cb 01       	movw	r24, r22
    12ae:	97 f9       	bld	r25, 7
    12b0:	08 95       	ret

000012b2 <__mulsf3>:
    12b2:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3x>
    12b6:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_round>
    12ba:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_pscA>
    12be:	38 f0       	brcs	.+14     	; 0x12ce <__mulsf3+0x1c>
    12c0:	0e 94 18 09 	call	0x1230	; 0x1230 <__fp_pscB>
    12c4:	20 f0       	brcs	.+8      	; 0x12ce <__mulsf3+0x1c>
    12c6:	95 23       	and	r25, r21
    12c8:	11 f0       	breq	.+4      	; 0x12ce <__mulsf3+0x1c>
    12ca:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_inf>
    12ce:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_nan>
    12d2:	11 24       	eor	r1, r1
    12d4:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__fp_szero>

000012d8 <__mulsf3x>:
    12d8:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_split3>
    12dc:	70 f3       	brcs	.-36     	; 0x12ba <__mulsf3+0x8>

000012de <__mulsf3_pse>:
    12de:	95 9f       	mul	r25, r21
    12e0:	c1 f3       	breq	.-16     	; 0x12d2 <__mulsf3+0x20>
    12e2:	95 0f       	add	r25, r21
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	55 1f       	adc	r21, r21
    12e8:	62 9f       	mul	r22, r18
    12ea:	f0 01       	movw	r30, r0
    12ec:	72 9f       	mul	r23, r18
    12ee:	bb 27       	eor	r27, r27
    12f0:	f0 0d       	add	r31, r0
    12f2:	b1 1d       	adc	r27, r1
    12f4:	63 9f       	mul	r22, r19
    12f6:	aa 27       	eor	r26, r26
    12f8:	f0 0d       	add	r31, r0
    12fa:	b1 1d       	adc	r27, r1
    12fc:	aa 1f       	adc	r26, r26
    12fe:	64 9f       	mul	r22, r20
    1300:	66 27       	eor	r22, r22
    1302:	b0 0d       	add	r27, r0
    1304:	a1 1d       	adc	r26, r1
    1306:	66 1f       	adc	r22, r22
    1308:	82 9f       	mul	r24, r18
    130a:	22 27       	eor	r18, r18
    130c:	b0 0d       	add	r27, r0
    130e:	a1 1d       	adc	r26, r1
    1310:	62 1f       	adc	r22, r18
    1312:	73 9f       	mul	r23, r19
    1314:	b0 0d       	add	r27, r0
    1316:	a1 1d       	adc	r26, r1
    1318:	62 1f       	adc	r22, r18
    131a:	83 9f       	mul	r24, r19
    131c:	a0 0d       	add	r26, r0
    131e:	61 1d       	adc	r22, r1
    1320:	22 1f       	adc	r18, r18
    1322:	74 9f       	mul	r23, r20
    1324:	33 27       	eor	r19, r19
    1326:	a0 0d       	add	r26, r0
    1328:	61 1d       	adc	r22, r1
    132a:	23 1f       	adc	r18, r19
    132c:	84 9f       	mul	r24, r20
    132e:	60 0d       	add	r22, r0
    1330:	21 1d       	adc	r18, r1
    1332:	82 2f       	mov	r24, r18
    1334:	76 2f       	mov	r23, r22
    1336:	6a 2f       	mov	r22, r26
    1338:	11 24       	eor	r1, r1
    133a:	9f 57       	subi	r25, 0x7F	; 127
    133c:	50 40       	sbci	r21, 0x00	; 0
    133e:	9a f0       	brmi	.+38     	; 0x1366 <__mulsf3_pse+0x88>
    1340:	f1 f0       	breq	.+60     	; 0x137e <__mulsf3_pse+0xa0>
    1342:	88 23       	and	r24, r24
    1344:	4a f0       	brmi	.+18     	; 0x1358 <__mulsf3_pse+0x7a>
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	bb 1f       	adc	r27, r27
    134c:	66 1f       	adc	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	50 40       	sbci	r21, 0x00	; 0
    1356:	a9 f7       	brne	.-22     	; 0x1342 <__mulsf3_pse+0x64>
    1358:	9e 3f       	cpi	r25, 0xFE	; 254
    135a:	51 05       	cpc	r21, r1
    135c:	80 f0       	brcs	.+32     	; 0x137e <__mulsf3_pse+0xa0>
    135e:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_inf>
    1362:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__fp_szero>
    1366:	5f 3f       	cpi	r21, 0xFF	; 255
    1368:	e4 f3       	brlt	.-8      	; 0x1362 <__mulsf3_pse+0x84>
    136a:	98 3e       	cpi	r25, 0xE8	; 232
    136c:	d4 f3       	brlt	.-12     	; 0x1362 <__mulsf3_pse+0x84>
    136e:	86 95       	lsr	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f7 95       	ror	r31
    1378:	e7 95       	ror	r30
    137a:	9f 5f       	subi	r25, 0xFF	; 255
    137c:	c1 f7       	brne	.-16     	; 0x136e <__mulsf3_pse+0x90>
    137e:	fe 2b       	or	r31, r30
    1380:	88 0f       	add	r24, r24
    1382:	91 1d       	adc	r25, r1
    1384:	96 95       	lsr	r25
    1386:	87 95       	ror	r24
    1388:	97 f9       	bld	r25, 7
    138a:	08 95       	ret

0000138c <pow>:
    138c:	fa 01       	movw	r30, r20
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	30 96       	adiw	r30, 0x00	; 0
    1394:	21 05       	cpc	r18, r1
    1396:	31 05       	cpc	r19, r1
    1398:	a1 f1       	breq	.+104    	; 0x1402 <pow+0x76>
    139a:	61 15       	cp	r22, r1
    139c:	71 05       	cpc	r23, r1
    139e:	61 f4       	brne	.+24     	; 0x13b8 <pow+0x2c>
    13a0:	80 38       	cpi	r24, 0x80	; 128
    13a2:	bf e3       	ldi	r27, 0x3F	; 63
    13a4:	9b 07       	cpc	r25, r27
    13a6:	49 f1       	breq	.+82     	; 0x13fa <pow+0x6e>
    13a8:	68 94       	set
    13aa:	90 38       	cpi	r25, 0x80	; 128
    13ac:	81 05       	cpc	r24, r1
    13ae:	61 f0       	breq	.+24     	; 0x13c8 <pow+0x3c>
    13b0:	80 38       	cpi	r24, 0x80	; 128
    13b2:	bf ef       	ldi	r27, 0xFF	; 255
    13b4:	9b 07       	cpc	r25, r27
    13b6:	41 f0       	breq	.+16     	; 0x13c8 <pow+0x3c>
    13b8:	99 23       	and	r25, r25
    13ba:	4a f5       	brpl	.+82     	; 0x140e <pow+0x82>
    13bc:	ff 3f       	cpi	r31, 0xFF	; 255
    13be:	e1 05       	cpc	r30, r1
    13c0:	31 05       	cpc	r19, r1
    13c2:	21 05       	cpc	r18, r1
    13c4:	19 f1       	breq	.+70     	; 0x140c <pow+0x80>
    13c6:	e8 94       	clt
    13c8:	08 94       	sec
    13ca:	e7 95       	ror	r30
    13cc:	d9 01       	movw	r26, r18
    13ce:	aa 23       	and	r26, r26
    13d0:	29 f4       	brne	.+10     	; 0x13dc <pow+0x50>
    13d2:	ab 2f       	mov	r26, r27
    13d4:	be 2f       	mov	r27, r30
    13d6:	f8 5f       	subi	r31, 0xF8	; 248
    13d8:	d0 f3       	brcs	.-12     	; 0x13ce <pow+0x42>
    13da:	10 c0       	rjmp	.+32     	; 0x13fc <pow+0x70>
    13dc:	ff 5f       	subi	r31, 0xFF	; 255
    13de:	70 f4       	brcc	.+28     	; 0x13fc <pow+0x70>
    13e0:	a6 95       	lsr	r26
    13e2:	e0 f7       	brcc	.-8      	; 0x13dc <pow+0x50>
    13e4:	f7 39       	cpi	r31, 0x97	; 151
    13e6:	50 f0       	brcs	.+20     	; 0x13fc <pow+0x70>
    13e8:	19 f0       	breq	.+6      	; 0x13f0 <pow+0x64>
    13ea:	ff 3a       	cpi	r31, 0xAF	; 175
    13ec:	38 f4       	brcc	.+14     	; 0x13fc <pow+0x70>
    13ee:	9f 77       	andi	r25, 0x7F	; 127
    13f0:	9f 93       	push	r25
    13f2:	0d d0       	rcall	.+26     	; 0x140e <pow+0x82>
    13f4:	0f 90       	pop	r0
    13f6:	07 fc       	sbrc	r0, 7
    13f8:	90 58       	subi	r25, 0x80	; 128
    13fa:	08 95       	ret
    13fc:	46 f0       	brts	.+16     	; 0x140e <pow+0x82>
    13fe:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_nan>
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	9f e3       	ldi	r25, 0x3F	; 63
    140a:	08 95       	ret
    140c:	4f e7       	ldi	r20, 0x7F	; 127
    140e:	9f 77       	andi	r25, 0x7F	; 127
    1410:	5f 93       	push	r21
    1412:	4f 93       	push	r20
    1414:	3f 93       	push	r19
    1416:	2f 93       	push	r18
    1418:	0e 94 c1 0a 	call	0x1582	; 0x1582 <log>
    141c:	2f 91       	pop	r18
    141e:	3f 91       	pop	r19
    1420:	4f 91       	pop	r20
    1422:	5f 91       	pop	r21
    1424:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
    1428:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <exp>
    142c:	29 f4       	brne	.+10     	; 0x1438 <pow+0xac>
    142e:	16 f0       	brts	.+4      	; 0x1434 <pow+0xa8>
    1430:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_inf>
    1434:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__fp_zero>
    1438:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_nan>

0000143c <exp>:
    143c:	0e 94 38 09 	call	0x1270	; 0x1270 <__fp_splitA>
    1440:	a8 f3       	brcs	.-22     	; 0x142c <pow+0xa0>
    1442:	96 38       	cpi	r25, 0x86	; 134
    1444:	a0 f7       	brcc	.-24     	; 0x142e <pow+0xa2>
    1446:	07 f8       	bld	r0, 7
    1448:	0f 92       	push	r0
    144a:	e8 94       	clt
    144c:	2b e3       	ldi	r18, 0x3B	; 59
    144e:	3a ea       	ldi	r19, 0xAA	; 170
    1450:	48 eb       	ldi	r20, 0xB8	; 184
    1452:	5f e7       	ldi	r21, 0x7F	; 127
    1454:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3_pse>
    1458:	0f 92       	push	r0
    145a:	0f 92       	push	r0
    145c:	0f 92       	push	r0
    145e:	4d b7       	in	r20, 0x3d	; 61
    1460:	5e b7       	in	r21, 0x3e	; 62
    1462:	0f 92       	push	r0
    1464:	0e 94 09 0b 	call	0x1612	; 0x1612 <modf>
    1468:	ee e0       	ldi	r30, 0x0E	; 14
    146a:	f1 e0       	ldi	r31, 0x01	; 1
    146c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_powser>
    1470:	4f 91       	pop	r20
    1472:	5f 91       	pop	r21
    1474:	ef 91       	pop	r30
    1476:	ff 91       	pop	r31
    1478:	e5 95       	asr	r30
    147a:	ee 1f       	adc	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	49 f0       	breq	.+18     	; 0x1492 <exp+0x56>
    1480:	fe 57       	subi	r31, 0x7E	; 126
    1482:	e0 68       	ori	r30, 0x80	; 128
    1484:	44 27       	eor	r20, r20
    1486:	ee 0f       	add	r30, r30
    1488:	44 1f       	adc	r20, r20
    148a:	fa 95       	dec	r31
    148c:	e1 f7       	brne	.-8      	; 0x1486 <exp+0x4a>
    148e:	41 95       	neg	r20
    1490:	55 0b       	sbc	r21, r21
    1492:	0e 94 83 0a 	call	0x1506	; 0x1506 <ldexp>
    1496:	0f 90       	pop	r0
    1498:	07 fe       	sbrs	r0, 7
    149a:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <inverse>
    149e:	08 95       	ret

000014a0 <__fp_powser>:
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	1f 93       	push	r17
    14a6:	0f 93       	push	r16
    14a8:	ff 92       	push	r15
    14aa:	ef 92       	push	r14
    14ac:	df 92       	push	r13
    14ae:	7b 01       	movw	r14, r22
    14b0:	8c 01       	movw	r16, r24
    14b2:	68 94       	set
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <__fp_powser+0x22>
    14b6:	da 2e       	mov	r13, r26
    14b8:	ef 01       	movw	r28, r30
    14ba:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3x>
    14be:	fe 01       	movw	r30, r28
    14c0:	e8 94       	clt
    14c2:	a5 91       	lpm	r26, Z+
    14c4:	25 91       	lpm	r18, Z+
    14c6:	35 91       	lpm	r19, Z+
    14c8:	45 91       	lpm	r20, Z+
    14ca:	55 91       	lpm	r21, Z+
    14cc:	a6 f3       	brts	.-24     	; 0x14b6 <__fp_powser+0x16>
    14ce:	ef 01       	movw	r28, r30
    14d0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__addsf3x>
    14d4:	fe 01       	movw	r30, r28
    14d6:	97 01       	movw	r18, r14
    14d8:	a8 01       	movw	r20, r16
    14da:	da 94       	dec	r13
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <__fp_powser+0x18>
    14de:	df 90       	pop	r13
    14e0:	ef 90       	pop	r14
    14e2:	ff 90       	pop	r15
    14e4:	0f 91       	pop	r16
    14e6:	1f 91       	pop	r17
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <inverse>:
    14ee:	9b 01       	movw	r18, r22
    14f0:	ac 01       	movw	r20, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	80 e8       	ldi	r24, 0x80	; 128
    14f8:	9f e3       	ldi	r25, 0x3F	; 63
    14fa:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__divsf3>
    14fe:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_inf>
    1502:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__fp_mpack>

00001506 <ldexp>:
    1506:	0e 94 38 09 	call	0x1270	; 0x1270 <__fp_splitA>
    150a:	d8 f3       	brcs	.-10     	; 0x1502 <inverse+0x14>
    150c:	99 23       	and	r25, r25
    150e:	c9 f3       	breq	.-14     	; 0x1502 <inverse+0x14>
    1510:	94 0f       	add	r25, r20
    1512:	51 1d       	adc	r21, r1
    1514:	a3 f3       	brvs	.-24     	; 0x14fe <inverse+0x10>
    1516:	91 50       	subi	r25, 0x01	; 1
    1518:	50 40       	sbci	r21, 0x00	; 0
    151a:	94 f0       	brlt	.+36     	; 0x1540 <ldexp+0x3a>
    151c:	59 f0       	breq	.+22     	; 0x1534 <ldexp+0x2e>
    151e:	88 23       	and	r24, r24
    1520:	32 f0       	brmi	.+12     	; 0x152e <ldexp+0x28>
    1522:	66 0f       	add	r22, r22
    1524:	77 1f       	adc	r23, r23
    1526:	88 1f       	adc	r24, r24
    1528:	91 50       	subi	r25, 0x01	; 1
    152a:	50 40       	sbci	r21, 0x00	; 0
    152c:	c1 f7       	brne	.-16     	; 0x151e <ldexp+0x18>
    152e:	9e 3f       	cpi	r25, 0xFE	; 254
    1530:	51 05       	cpc	r21, r1
    1532:	2c f7       	brge	.-54     	; 0x14fe <inverse+0x10>
    1534:	88 0f       	add	r24, r24
    1536:	91 1d       	adc	r25, r1
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	97 f9       	bld	r25, 7
    153e:	08 95       	ret
    1540:	5f 3f       	cpi	r21, 0xFF	; 255
    1542:	ac f0       	brlt	.+42     	; 0x156e <ldexp+0x68>
    1544:	98 3e       	cpi	r25, 0xE8	; 232
    1546:	9c f0       	brlt	.+38     	; 0x156e <ldexp+0x68>
    1548:	bb 27       	eor	r27, r27
    154a:	86 95       	lsr	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	b7 95       	ror	r27
    1552:	08 f4       	brcc	.+2      	; 0x1556 <ldexp+0x50>
    1554:	b1 60       	ori	r27, 0x01	; 1
    1556:	93 95       	inc	r25
    1558:	c1 f7       	brne	.-16     	; 0x154a <ldexp+0x44>
    155a:	bb 0f       	add	r27, r27
    155c:	58 f7       	brcc	.-42     	; 0x1534 <ldexp+0x2e>
    155e:	11 f4       	brne	.+4      	; 0x1564 <ldexp+0x5e>
    1560:	60 ff       	sbrs	r22, 0
    1562:	e8 cf       	rjmp	.-48     	; 0x1534 <ldexp+0x2e>
    1564:	6f 5f       	subi	r22, 0xFF	; 255
    1566:	7f 4f       	sbci	r23, 0xFF	; 255
    1568:	8f 4f       	sbci	r24, 0xFF	; 255
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	e3 cf       	rjmp	.-58     	; 0x1534 <ldexp+0x2e>
    156e:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__fp_szero>
    1572:	16 f0       	brts	.+4      	; 0x1578 <ldexp+0x72>
    1574:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__fp_mpack>
    1578:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_nan>
    157c:	68 94       	set
    157e:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_inf>

00001582 <log>:
    1582:	0e 94 38 09 	call	0x1270	; 0x1270 <__fp_splitA>
    1586:	a8 f3       	brcs	.-22     	; 0x1572 <ldexp+0x6c>
    1588:	99 23       	and	r25, r25
    158a:	c1 f3       	breq	.-16     	; 0x157c <ldexp+0x76>
    158c:	ae f3       	brts	.-22     	; 0x1578 <ldexp+0x72>
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	1f 93       	push	r17
    1594:	0f 93       	push	r16
    1596:	ff 92       	push	r15
    1598:	c9 2f       	mov	r28, r25
    159a:	dd 27       	eor	r29, r29
    159c:	88 23       	and	r24, r24
    159e:	2a f0       	brmi	.+10     	; 0x15aa <log+0x28>
    15a0:	21 97       	sbiw	r28, 0x01	; 1
    15a2:	66 0f       	add	r22, r22
    15a4:	77 1f       	adc	r23, r23
    15a6:	88 1f       	adc	r24, r24
    15a8:	da f7       	brpl	.-10     	; 0x15a0 <log+0x1e>
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e8       	ldi	r20, 0x80	; 128
    15b0:	5f eb       	ldi	r21, 0xBF	; 191
    15b2:	9f e3       	ldi	r25, 0x3F	; 63
    15b4:	88 39       	cpi	r24, 0x98	; 152
    15b6:	20 f0       	brcs	.+8      	; 0x15c0 <log+0x3e>
    15b8:	80 3e       	cpi	r24, 0xE0	; 224
    15ba:	38 f0       	brcs	.+14     	; 0x15ca <log+0x48>
    15bc:	21 96       	adiw	r28, 0x01	; 1
    15be:	8f 77       	andi	r24, 0x7F	; 127
    15c0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
    15c4:	e6 e3       	ldi	r30, 0x36	; 54
    15c6:	f1 e0       	ldi	r31, 0x01	; 1
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <log+0x50>
    15ca:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
    15ce:	e3 e6       	ldi	r30, 0x63	; 99
    15d0:	f1 e0       	ldi	r31, 0x01	; 1
    15d2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_powser>
    15d6:	8b 01       	movw	r16, r22
    15d8:	be 01       	movw	r22, r28
    15da:	ec 01       	movw	r28, r24
    15dc:	fb 2e       	mov	r15, r27
    15de:	6f 57       	subi	r22, 0x7F	; 127
    15e0:	71 09       	sbc	r23, r1
    15e2:	75 95       	asr	r23
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 0b       	sbc	r24, r24
    15e8:	99 0b       	sbc	r25, r25
    15ea:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
    15ee:	28 e1       	ldi	r18, 0x18	; 24
    15f0:	32 e7       	ldi	r19, 0x72	; 114
    15f2:	41 e3       	ldi	r20, 0x31	; 49
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3x>
    15fa:	af 2d       	mov	r26, r15
    15fc:	98 01       	movw	r18, r16
    15fe:	ae 01       	movw	r20, r28
    1600:	ff 90       	pop	r15
    1602:	0f 91       	pop	r16
    1604:	1f 91       	pop	r17
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__addsf3x>
    160e:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_round>

00001612 <modf>:
    1612:	fa 01       	movw	r30, r20
    1614:	dc 01       	movw	r26, r24
    1616:	aa 0f       	add	r26, r26
    1618:	bb 1f       	adc	r27, r27
    161a:	9b 01       	movw	r18, r22
    161c:	ac 01       	movw	r20, r24
    161e:	bf 57       	subi	r27, 0x7F	; 127
    1620:	28 f4       	brcc	.+10     	; 0x162c <modf+0x1a>
    1622:	22 27       	eor	r18, r18
    1624:	33 27       	eor	r19, r19
    1626:	44 27       	eor	r20, r20
    1628:	50 78       	andi	r21, 0x80	; 128
    162a:	20 c0       	rjmp	.+64     	; 0x166c <modf+0x5a>
    162c:	b7 51       	subi	r27, 0x17	; 23
    162e:	90 f4       	brcc	.+36     	; 0x1654 <modf+0x42>
    1630:	ab 2f       	mov	r26, r27
    1632:	00 24       	eor	r0, r0
    1634:	46 95       	lsr	r20
    1636:	37 95       	ror	r19
    1638:	27 95       	ror	r18
    163a:	01 1c       	adc	r0, r1
    163c:	a3 95       	inc	r26
    163e:	d2 f3       	brmi	.-12     	; 0x1634 <modf+0x22>
    1640:	00 20       	and	r0, r0
    1642:	71 f0       	breq	.+28     	; 0x1660 <modf+0x4e>
    1644:	22 0f       	add	r18, r18
    1646:	33 1f       	adc	r19, r19
    1648:	44 1f       	adc	r20, r20
    164a:	b3 95       	inc	r27
    164c:	da f3       	brmi	.-10     	; 0x1644 <modf+0x32>
    164e:	0e d0       	rcall	.+28     	; 0x166c <modf+0x5a>
    1650:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__subsf3>
    1654:	61 30       	cpi	r22, 0x01	; 1
    1656:	71 05       	cpc	r23, r1
    1658:	a0 e8       	ldi	r26, 0x80	; 128
    165a:	8a 07       	cpc	r24, r26
    165c:	b9 46       	sbci	r27, 0x69	; 105
    165e:	30 f4       	brcc	.+12     	; 0x166c <modf+0x5a>
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	66 27       	eor	r22, r22
    1666:	77 27       	eor	r23, r23
    1668:	88 27       	eor	r24, r24
    166a:	90 78       	andi	r25, 0x80	; 128
    166c:	30 96       	adiw	r30, 0x00	; 0
    166e:	21 f0       	breq	.+8      	; 0x1678 <modf+0x66>
    1670:	20 83       	st	Z, r18
    1672:	31 83       	std	Z+1, r19	; 0x01
    1674:	42 83       	std	Z+2, r20	; 0x02
    1676:	53 83       	std	Z+3, r21	; 0x03
    1678:	08 95       	ret

0000167a <__fp_mpack>:
    167a:	9f 3f       	cpi	r25, 0xFF	; 255
    167c:	31 f0       	breq	.+12     	; 0x168a <__fp_mpack_finite+0xc>

0000167e <__fp_mpack_finite>:
    167e:	91 50       	subi	r25, 0x01	; 1
    1680:	20 f4       	brcc	.+8      	; 0x168a <__fp_mpack_finite+0xc>
    1682:	87 95       	ror	r24
    1684:	77 95       	ror	r23
    1686:	67 95       	ror	r22
    1688:	b7 95       	ror	r27
    168a:	88 0f       	add	r24, r24
    168c:	91 1d       	adc	r25, r1
    168e:	96 95       	lsr	r25
    1690:	87 95       	ror	r24
    1692:	97 f9       	bld	r25, 7
    1694:	08 95       	ret

00001696 <__divmodhi4>:
    1696:	97 fb       	bst	r25, 7
    1698:	07 2e       	mov	r0, r23
    169a:	16 f4       	brtc	.+4      	; 0x16a0 <__divmodhi4+0xa>
    169c:	00 94       	com	r0
    169e:	07 d0       	rcall	.+14     	; 0x16ae <__divmodhi4_neg1>
    16a0:	77 fd       	sbrc	r23, 7
    16a2:	09 d0       	rcall	.+18     	; 0x16b6 <__divmodhi4_neg2>
    16a4:	0e 94 6d 0b 	call	0x16da	; 0x16da <__udivmodhi4>
    16a8:	07 fc       	sbrc	r0, 7
    16aa:	05 d0       	rcall	.+10     	; 0x16b6 <__divmodhi4_neg2>
    16ac:	3e f4       	brtc	.+14     	; 0x16bc <__divmodhi4_exit>

000016ae <__divmodhi4_neg1>:
    16ae:	90 95       	com	r25
    16b0:	81 95       	neg	r24
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	08 95       	ret

000016b6 <__divmodhi4_neg2>:
    16b6:	70 95       	com	r23
    16b8:	61 95       	neg	r22
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255

000016bc <__divmodhi4_exit>:
    16bc:	08 95       	ret

000016be <__tablejump2__>:
    16be:	ee 0f       	add	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	05 90       	lpm	r0, Z+
    16c4:	f4 91       	lpm	r31, Z
    16c6:	e0 2d       	mov	r30, r0
    16c8:	09 94       	ijmp

000016ca <__mulshisi3>:
    16ca:	b7 ff       	sbrs	r27, 7
    16cc:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__muluhisi3>

000016d0 <__mulohisi3>:
    16d0:	0e 94 81 0b 	call	0x1702	; 0x1702 <__muluhisi3>
    16d4:	82 1b       	sub	r24, r18
    16d6:	93 0b       	sbc	r25, r19
    16d8:	08 95       	ret

000016da <__udivmodhi4>:
    16da:	aa 1b       	sub	r26, r26
    16dc:	bb 1b       	sub	r27, r27
    16de:	51 e1       	ldi	r21, 0x11	; 17
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <__udivmodhi4_ep>

000016e2 <__udivmodhi4_loop>:
    16e2:	aa 1f       	adc	r26, r26
    16e4:	bb 1f       	adc	r27, r27
    16e6:	a6 17       	cp	r26, r22
    16e8:	b7 07       	cpc	r27, r23
    16ea:	10 f0       	brcs	.+4      	; 0x16f0 <__udivmodhi4_ep>
    16ec:	a6 1b       	sub	r26, r22
    16ee:	b7 0b       	sbc	r27, r23

000016f0 <__udivmodhi4_ep>:
    16f0:	88 1f       	adc	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	5a 95       	dec	r21
    16f6:	a9 f7       	brne	.-22     	; 0x16e2 <__udivmodhi4_loop>
    16f8:	80 95       	com	r24
    16fa:	90 95       	com	r25
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	08 95       	ret

00001702 <__muluhisi3>:
    1702:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__umulhisi3>
    1706:	a5 9f       	mul	r26, r21
    1708:	90 0d       	add	r25, r0
    170a:	b4 9f       	mul	r27, r20
    170c:	90 0d       	add	r25, r0
    170e:	a4 9f       	mul	r26, r20
    1710:	80 0d       	add	r24, r0
    1712:	91 1d       	adc	r25, r1
    1714:	11 24       	eor	r1, r1
    1716:	08 95       	ret

00001718 <__umulhisi3>:
    1718:	a2 9f       	mul	r26, r18
    171a:	b0 01       	movw	r22, r0
    171c:	b3 9f       	mul	r27, r19
    171e:	c0 01       	movw	r24, r0
    1720:	a3 9f       	mul	r26, r19
    1722:	70 0d       	add	r23, r0
    1724:	81 1d       	adc	r24, r1
    1726:	11 24       	eor	r1, r1
    1728:	91 1d       	adc	r25, r1
    172a:	b2 9f       	mul	r27, r18
    172c:	70 0d       	add	r23, r0
    172e:	81 1d       	adc	r24, r1
    1730:	11 24       	eor	r1, r1
    1732:	91 1d       	adc	r25, r1
    1734:	08 95       	ret

00001736 <__itoa_ncheck>:
    1736:	bb 27       	eor	r27, r27
    1738:	4a 30       	cpi	r20, 0x0A	; 10
    173a:	31 f4       	brne	.+12     	; 0x1748 <__itoa_ncheck+0x12>
    173c:	99 23       	and	r25, r25
    173e:	22 f4       	brpl	.+8      	; 0x1748 <__itoa_ncheck+0x12>
    1740:	bd e2       	ldi	r27, 0x2D	; 45
    1742:	90 95       	com	r25
    1744:	81 95       	neg	r24
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__utoa_common>

0000174c <__utoa_ncheck>:
    174c:	bb 27       	eor	r27, r27

0000174e <__utoa_common>:
    174e:	fb 01       	movw	r30, r22
    1750:	55 27       	eor	r21, r21
    1752:	aa 27       	eor	r26, r26
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	aa 1f       	adc	r26, r26
    175a:	a4 17       	cp	r26, r20
    175c:	10 f0       	brcs	.+4      	; 0x1762 <__utoa_common+0x14>
    175e:	a4 1b       	sub	r26, r20
    1760:	83 95       	inc	r24
    1762:	50 51       	subi	r21, 0x10	; 16
    1764:	b9 f7       	brne	.-18     	; 0x1754 <__utoa_common+0x6>
    1766:	a0 5d       	subi	r26, 0xD0	; 208
    1768:	aa 33       	cpi	r26, 0x3A	; 58
    176a:	08 f0       	brcs	.+2      	; 0x176e <__utoa_common+0x20>
    176c:	a9 5d       	subi	r26, 0xD9	; 217
    176e:	a1 93       	st	Z+, r26
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	79 f7       	brne	.-34     	; 0x1752 <__utoa_common+0x4>
    1774:	b1 11       	cpse	r27, r1
    1776:	b1 93       	st	Z+, r27
    1778:	11 92       	st	Z+, r1
    177a:	cb 01       	movw	r24, r22
    177c:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <strrev>

00001780 <strrev>:
    1780:	dc 01       	movw	r26, r24
    1782:	fc 01       	movw	r30, r24
    1784:	67 2f       	mov	r22, r23
    1786:	71 91       	ld	r23, Z+
    1788:	77 23       	and	r23, r23
    178a:	e1 f7       	brne	.-8      	; 0x1784 <strrev+0x4>
    178c:	32 97       	sbiw	r30, 0x02	; 2
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <strrev+0x18>
    1790:	7c 91       	ld	r23, X
    1792:	6d 93       	st	X+, r22
    1794:	70 83       	st	Z, r23
    1796:	62 91       	ld	r22, -Z
    1798:	ae 17       	cp	r26, r30
    179a:	bf 07       	cpc	r27, r31
    179c:	c8 f3       	brcs	.-14     	; 0x1790 <strrev+0x10>
    179e:	08 95       	ret

000017a0 <_exit>:
    17a0:	f8 94       	cli

000017a2 <__stop_program>:
    17a2:	ff cf       	rjmp	.-2      	; 0x17a2 <__stop_program>
