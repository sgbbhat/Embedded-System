
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c2  00800100  00001828  000018bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  008003c2  008003c2  00001b7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f2c  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000336  00000000  00000000  00002b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030f  00000000  00000000  00002ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000031e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f8  00000000  00000000  000033c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b9b  00000000  00000000  000036bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004257  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__vector_9>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      4c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_21>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      68:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      6c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      70:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      74:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      78:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      7c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      80:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      84:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      88:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      8c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      90:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      94:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      98:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      9c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      a0:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      a4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      a8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      ac:	f0 04       	cpc	r15, r0
      ae:	d2 05       	cpc	r29, r2
      b0:	d2 05       	cpc	r29, r2
      b2:	d2 05       	cpc	r29, r2
      b4:	d2 05       	cpc	r29, r2
      b6:	d2 05       	cpc	r29, r2
      b8:	d2 05       	cpc	r29, r2
      ba:	d2 05       	cpc	r29, r2
      bc:	d2 05       	cpc	r29, r2
      be:	d2 05       	cpc	r29, r2
      c0:	d2 05       	cpc	r29, r2
      c2:	d2 05       	cpc	r29, r2
      c4:	a6 04       	cpc	r10, r6
      c6:	d2 05       	cpc	r29, r2
      c8:	4b 04       	cpc	r4, r11
      ca:	d2 05       	cpc	r29, r2
      cc:	d2 05       	cpc	r29, r2
      ce:	d2 05       	cpc	r29, r2
      d0:	50 05       	cpc	r21, r0
      d2:	d2 05       	cpc	r29, r2
      d4:	d2 05       	cpc	r29, r2
      d6:	d2 05       	cpc	r29, r2
      d8:	d2 05       	cpc	r29, r2
      da:	d2 05       	cpc	r29, r2
      dc:	d2 05       	cpc	r29, r2
      de:	d2 05       	cpc	r29, r2
      e0:	d2 05       	cpc	r29, r2
      e2:	d2 05       	cpc	r29, r2
      e4:	d2 05       	cpc	r29, r2
      e6:	d2 05       	cpc	r29, r2
      e8:	d2 05       	cpc	r29, r2
      ea:	d2 05       	cpc	r29, r2
      ec:	20 05       	cpc	r18, r0
      ee:	d2 05       	cpc	r29, r2
      f0:	d2 05       	cpc	r29, r2
      f2:	d2 05       	cpc	r29, r2
      f4:	d2 05       	cpc	r29, r2
      f6:	d2 05       	cpc	r29, r2
      f8:	d2 05       	cpc	r29, r2
      fa:	d2 05       	cpc	r29, r2
      fc:	d2 05       	cpc	r29, r2
      fe:	d2 05       	cpc	r29, r2
     100:	d2 05       	cpc	r29, r2
     102:	d2 05       	cpc	r29, r2
     104:	cb 04       	cpc	r12, r11
     106:	d2 05       	cpc	r29, r2
     108:	7c 04       	cpc	r7, r12
     10a:	d2 05       	cpc	r29, r2
     10c:	c7 05       	cpc	r28, r7
     10e:	07 63       	ori	r16, 0x37	; 55
     110:	42 36       	cpi	r20, 0x62	; 98
     112:	b7 9b       	sbis	0x16, 7	; 22
     114:	d8 a7       	std	Y+40, r29	; 0x28
     116:	1a 39       	cpi	r17, 0x9A	; 154
     118:	68 56       	subi	r22, 0x68	; 104
     11a:	18 ae       	std	Y+56, r1	; 0x38
     11c:	ba ab       	std	Y+50, r27	; 0x32
     11e:	55 8c       	ldd	r5, Z+29	; 0x1d
     120:	1d 3c       	cpi	r17, 0xCD	; 205
     122:	b7 cc       	rjmp	.-1682   	; 0xfffffa92 <__eeprom_end+0xff7efa92>
     124:	57 63       	ori	r21, 0x37	; 55
     126:	bd 6d       	ori	r27, 0xDD	; 221
     128:	ed fd       	.word	0xfded	; ????
     12a:	75 3e       	cpi	r23, 0xE5	; 229
     12c:	f6 17       	cp	r31, r22
     12e:	72 31       	cpi	r23, 0x12	; 18
     130:	bf 00       	.word	0x00bf	; ????
     132:	00 00       	nop
     134:	80 3f       	cpi	r24, 0xF0	; 240
     136:	08 00       	.word	0x0008	; ????
     138:	00 00       	nop
     13a:	be 92       	st	-X, r11
     13c:	24 49       	sbci	r18, 0x94	; 148
     13e:	12 3e       	cpi	r17, 0xE2	; 226
     140:	ab aa       	std	Y+51, r10	; 0x33
     142:	aa 2a       	or	r10, r26
     144:	be cd       	rjmp	.-1156   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     146:	cc cc       	rjmp	.-1640   	; 0xfffffae0 <__eeprom_end+0xff7efae0>
     148:	4c 3e       	cpi	r20, 0xEC	; 236
     14a:	00 00       	nop
     14c:	00 80       	ld	r0, Z
     14e:	be ab       	std	Y+54, r27	; 0x36
     150:	aa aa       	std	Y+50, r10	; 0x32
     152:	aa 3e       	cpi	r26, 0xEA	; 234
     154:	00 00       	nop
     156:	00 00       	nop
     158:	bf 00       	.word	0x00bf	; ????
     15a:	00 00       	nop
     15c:	80 3f       	cpi	r24, 0xF0	; 240
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	00 08       	sbc	r0, r0
     164:	41 78       	andi	r20, 0x81	; 129
     166:	d3 bb       	out	0x13, r29	; 19
     168:	43 87       	std	Z+11, r20	; 0x0b
     16a:	d1 13       	cpse	r29, r17
     16c:	3d 19       	sub	r19, r13
     16e:	0e 3c       	cpi	r16, 0xCE	; 206
     170:	c3 bd       	out	0x23, r28	; 35
     172:	42 82       	std	Z+2, r4	; 0x02
     174:	ad 2b       	or	r26, r29
     176:	3e 68       	ori	r19, 0x8E	; 142
     178:	ec 82       	std	Y+4, r14	; 0x04
     17a:	76 be       	out	0x36, r7	; 54
     17c:	d9 8f       	std	Y+25, r29	; 0x19
     17e:	e1 a9       	ldd	r30, Z+49	; 0x31
     180:	3e 4c       	sbci	r19, 0xCE	; 206
     182:	80 ef       	ldi	r24, 0xF0	; 240
     184:	ff be       	out	0x3f, r15	; 63
     186:	01 c4       	rjmp	.+2050   	; 0x98a <main+0x3da>
     188:	ff 7f       	andi	r31, 0xFF	; 255
     18a:	3f 00       	.word	0x003f	; ????
     18c:	00 00       	nop
	...

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	da e0       	ldi	r29, 0x0A	; 10
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	13 e0       	ldi	r17, 0x03	; 3
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	e8 e2       	ldi	r30, 0x28	; 40
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	a2 3c       	cpi	r26, 0xC2	; 194
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	23 e0       	ldi	r18, 0x03	; 3
     1b4:	a2 ec       	ldi	r26, 0xC2	; 194
     1b6:	b3 e0       	ldi	r27, 0x03	; 3
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	a3 3d       	cpi	r26, 0xD3	; 211
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <main>
     1c6:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <reverse>:
 */ 


void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
     1ce:	9b 01       	movw	r18, r22
     1d0:	21 50       	subi	r18, 0x01	; 1
     1d2:	31 09       	sbc	r19, r1
	while (i<j)
     1d4:	12 16       	cp	r1, r18
     1d6:	13 06       	cpc	r1, r19
     1d8:	84 f4       	brge	.+32     	; 0x1fa <reverse+0x2c>
     1da:	fc 01       	movw	r30, r24
     1dc:	e6 0f       	add	r30, r22
     1de:	f7 1f       	adc	r31, r23
     1e0:	dc 01       	movw	r26, r24
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp = str[i];
     1e6:	4c 91       	ld	r20, X
		str[i] = str[j];
     1e8:	52 91       	ld	r21, -Z
     1ea:	5d 93       	st	X+, r21
		str[j] = temp;
     1ec:	40 83       	st	Z, r20
		i++; j--;
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	21 50       	subi	r18, 0x01	; 1
     1f2:	31 09       	sbc	r19, r1


void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
	while (i<j)
     1f4:	82 17       	cp	r24, r18
     1f6:	93 07       	cpc	r25, r19
     1f8:	b4 f3       	brlt	.-20     	; 0x1e6 <reverse+0x18>
     1fa:	08 95       	ret

000001fc <intToStr>:
		i++; j--;
	}
}

int intToStr(int x, char str[], int d)
{
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	8b 01       	movw	r16, r22
     20a:	9a 01       	movw	r18, r20
	int i = 0;
	while (x)
     20c:	00 97       	sbiw	r24, 0x00	; 0
     20e:	99 f0       	breq	.+38     	; 0x236 <intToStr+0x3a>
     210:	fb 01       	movw	r30, r22
     212:	c0 e0       	ldi	r28, 0x00	; 0
     214:	d0 e0       	ldi	r29, 0x00	; 0
	{
		str[i++] = (x%10) + '0';
     216:	0f 2e       	mov	r0, r31
     218:	fa e0       	ldi	r31, 0x0A	; 10
     21a:	ef 2e       	mov	r14, r31
     21c:	f1 2c       	mov	r15, r1
     21e:	f0 2d       	mov	r31, r0
     220:	21 96       	adiw	r28, 0x01	; 1
     222:	b7 01       	movw	r22, r14
     224:	0e 94 8d 0b 	call	0x171a	; 0x171a <__divmodhi4>
     228:	80 5d       	subi	r24, 0xD0	; 208
     22a:	81 93       	st	Z+, r24
		x = x/10;
     22c:	86 2f       	mov	r24, r22
     22e:	97 2f       	mov	r25, r23
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
     230:	00 97       	sbiw	r24, 0x00	; 0
     232:	b1 f7       	brne	.-20     	; 0x220 <intToStr+0x24>
     234:	02 c0       	rjmp	.+4      	; 0x23a <intToStr+0x3e>
	}
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
     236:	c0 e0       	ldi	r28, 0x00	; 0
     238:	d0 e0       	ldi	r29, 0x00	; 0
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     23a:	c2 17       	cp	r28, r18
     23c:	d3 07       	cpc	r29, r19
     23e:	64 f4       	brge	.+24     	; 0x258 <intToStr+0x5c>
     240:	f8 01       	movw	r30, r16
     242:	ec 0f       	add	r30, r28
     244:	fd 1f       	adc	r31, r29
     246:	a8 01       	movw	r20, r16
     248:	42 0f       	add	r20, r18
     24a:	53 1f       	adc	r21, r19
	str[i++] = '0';
     24c:	80 e3       	ldi	r24, 0x30	; 48
     24e:	81 93       	st	Z+, r24
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     250:	e4 17       	cp	r30, r20
     252:	f5 07       	cpc	r31, r21
     254:	e1 f7       	brne	.-8      	; 0x24e <intToStr+0x52>
     256:	e9 01       	movw	r28, r18
	str[i++] = '0';
	
	reverse(str, i);
     258:	be 01       	movw	r22, r28
     25a:	c8 01       	movw	r24, r16
     25c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <reverse>
	str[i] = '\0';
     260:	f8 01       	movw	r30, r16
     262:	ec 0f       	add	r30, r28
     264:	fd 1f       	adc	r31, r29
     266:	10 82       	st	Z, r1
	return i;
}
     268:	ce 01       	movw	r24, r28
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	08 95       	ret

00000278 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
     278:	2f 92       	push	r2
     27a:	3f 92       	push	r3
     27c:	4f 92       	push	r4
     27e:	5f 92       	push	r5
     280:	6f 92       	push	r6
     282:	7f 92       	push	r7
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	4b 01       	movw	r8, r22
     29e:	5c 01       	movw	r10, r24
     2a0:	8a 01       	movw	r16, r20
     2a2:	e9 01       	movw	r28, r18
	// Extract integer part
	int ipart = (int)n;
     2a4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixsfsi>
     2a8:	6b 01       	movw	r12, r22
     2aa:	7c 01       	movw	r14, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	b8 01       	movw	r22, r16
     2b2:	c6 01       	movw	r24, r12
     2b4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <intToStr>
     2b8:	1c 01       	movw	r2, r24
	
	// check for display option after point
	if (afterpoint != 0)
     2ba:	20 97       	sbiw	r28, 0x00	; 0
     2bc:	a9 f1       	breq	.+106    	; 0x328 <ftoa+0xb0>
	{
		res[i] = '.';  // add dot
     2be:	f8 01       	movw	r30, r16
     2c0:	e8 0f       	add	r30, r24
     2c2:	f9 1f       	adc	r31, r25
     2c4:	8e e2       	ldi	r24, 0x2E	; 46
     2c6:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     2c8:	be 01       	movw	r22, r28
     2ca:	0d 2e       	mov	r0, r29
     2cc:	00 0c       	add	r0, r0
     2ce:	88 0b       	sbc	r24, r24
     2d0:	99 0b       	sbc	r25, r25
     2d2:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     2d6:	9b 01       	movw	r18, r22
     2d8:	ac 01       	movw	r20, r24
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	91 e4       	ldi	r25, 0x41	; 65
     2e2:	0e 94 08 0a 	call	0x1410	; 0x1410 <pow>
     2e6:	2b 01       	movw	r4, r22
     2e8:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
     2ea:	b6 01       	movw	r22, r12
     2ec:	dd 0c       	add	r13, r13
     2ee:	88 0b       	sbc	r24, r24
     2f0:	99 0b       	sbc	r25, r25
     2f2:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     2f6:	9b 01       	movw	r18, r22
     2f8:	ac 01       	movw	r20, r24
     2fa:	c5 01       	movw	r24, r10
     2fc:	b4 01       	movw	r22, r8
     2fe:	0e 94 f8 07 	call	0xff0	; 0xff0 <__subsf3>
     302:	9b 01       	movw	r18, r22
     304:	ac 01       	movw	r20, r24
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	28 1a       	sub	r2, r24
     30a:	38 0a       	sbc	r3, r24
     30c:	02 0d       	add	r16, r2
     30e:	13 1d       	adc	r17, r3
		res[i] = '.';  // add dot
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     310:	c3 01       	movw	r24, r6
     312:	b2 01       	movw	r22, r4
     314:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     318:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixsfsi>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	ae 01       	movw	r20, r28
     322:	b8 01       	movw	r22, r16
     324:	0e 94 fe 00 	call	0x1fc	; 0x1fc <intToStr>
	}
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	9f 90       	pop	r9
     33e:	8f 90       	pop	r8
     340:	7f 90       	pop	r7
     342:	6f 90       	pop	r6
     344:	5f 90       	pop	r5
     346:	4f 90       	pop	r4
     348:	3f 90       	pop	r3
     34a:	2f 90       	pop	r2
     34c:	08 95       	ret

0000034e <uart_init>:
// init uart
void uart_init(void)
{
	// set baud rate
	
	UBRR1 = ((F_CPU/(16*38400)) - 1);
     34e:	89 e1       	ldi	r24, 0x19	; 25
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 cd 00 	sts	0x00CD, r25
     356:	80 93 cc 00 	sts	0x00CC, r24
	
	// enable received and transmitter
	UCSR1B = ( 1 << RXEN1 ) | ( 1 << TXEN1 );
     35a:	88 e1       	ldi	r24, 0x18	; 24
     35c:	80 93 c9 00 	sts	0x00C9, r24
	
	// set frame format ( 8data, 2stop )
	UCSR1C = ( 1 << USBS1 ) | ( 3 << UCSZ10 );
     360:	8e e0       	ldi	r24, 0x0E	; 14
     362:	80 93 ca 00 	sts	0x00CA, r24
     366:	08 95       	ret

00000368 <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
     368:	e8 ec       	ldi	r30, 0xC8	; 200
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	90 81       	ld	r25, Z
     36e:	95 ff       	sbrs	r25, 5
     370:	fd cf       	rjmp	.-6      	; 0x36c <uart_transmit+0x4>
	;
	// put data into buffer, sends data
	UDR1 = data;
     372:	80 93 ce 00 	sts	0x00CE, r24
     376:	08 95       	ret

00000378 <uart_receive>:
}

// read a char from uart
unsigned char uart_receive(void)
{
	while (!( UCSR1A & ( 1 << RXC1) ))
     378:	e8 ec       	ldi	r30, 0xC8	; 200
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	88 23       	and	r24, r24
     380:	ec f7       	brge	.-6      	; 0x37c <uart_receive+0x4>
	;
	return UDR1;
     382:	80 91 ce 00 	lds	r24, 0x00CE
}
     386:	08 95       	ret

00000388 <uart_dataAvailable>:

// check if there are any chars to be read
int uart_dataAvailable(void)
{
	if ( UCSR1A & ( 1 << RXC1) )
     388:	80 91 c8 00 	lds	r24, 0x00C8
     38c:	08 2e       	mov	r0, r24
     38e:	00 0c       	add	r0, r0
     390:	99 0b       	sbc	r25, r25
	return 1;
	
	return 0;
}
     392:	89 2f       	mov	r24, r25
     394:	88 1f       	adc	r24, r24
     396:	88 27       	eor	r24, r24
     398:	88 1f       	adc	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	08 95       	ret

0000039e <uart_print>:

// write a string to the uart
void uart_print( char data[] )
{
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	8c 01       	movw	r16, r24
     3ac:	7c 01       	movw	r14, r24
	for (int c = 0; c < strlen(data); c++ )
     3ae:	c0 e0       	ldi	r28, 0x00	; 0
     3b0:	d0 e0       	ldi	r29, 0x00	; 0
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <uart_print+0x22>
	uart_transmit(data[c]);
     3b4:	f7 01       	movw	r30, r14
     3b6:	81 91       	ld	r24, Z+
     3b8:	7f 01       	movw	r14, r30
     3ba:	0e 94 b4 01 	call	0x368	; 0x368 <uart_transmit>
}

// write a string to the uart
void uart_print( char data[] )
{
	for (int c = 0; c < strlen(data); c++ )
     3be:	21 96       	adiw	r28, 0x01	; 1
     3c0:	f8 01       	movw	r30, r16
     3c2:	01 90       	ld	r0, Z+
     3c4:	00 20       	and	r0, r0
     3c6:	e9 f7       	brne	.-6      	; 0x3c2 <uart_print+0x24>
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	e0 1b       	sub	r30, r16
     3cc:	f1 0b       	sbc	r31, r17
     3ce:	ce 17       	cp	r28, r30
     3d0:	df 07       	cpc	r29, r31
     3d2:	80 f3       	brcs	.-32     	; 0x3b4 <uart_print+0x16>
	uart_transmit(data[c]);
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	08 95       	ret

000003e2 <timer0_init>:
volatile int32_t count_time2 = 0 ;

void timer0_init()
{
	//Timer 0 initialization
	TCNT0 = 0;						// initialize timer 0 counter
     3e2:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE0A);		// enable  interrupt
     3e4:	ee e6       	ldi	r30, 0x6E	; 110
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	82 60       	ori	r24, 0x02	; 2
     3ec:	80 83       	st	Z, r24
	TCCR0A |= (1 << WGM01);
     3ee:	84 b5       	in	r24, 0x24	; 36
     3f0:	82 60       	ori	r24, 0x02	; 2
     3f2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
     3f4:	85 b5       	in	r24, 0x25	; 37
     3f6:	82 60       	ori	r24, 0x02	; 2
     3f8:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << CS00);
     3fa:	85 b5       	in	r24, 0x25	; 37
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;
     400:	8a ef       	ldi	r24, 0xFA	; 250
     402:	87 bd       	out	0x27, r24	; 39
     404:	08 95       	ret

00000406 <__vector_21>:
}
//Tracking time in ms increments
ISR(TIMER0_COMPA_vect)
{
     406:	1f 92       	push	r1
     408:	0f 92       	push	r0
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	0f 92       	push	r0
     40e:	11 24       	eor	r1, r1
     410:	8f 93       	push	r24
     412:	9f 93       	push	r25
     414:	af 93       	push	r26
     416:	bf 93       	push	r27
	time_ms++;
     418:	80 91 cf 03 	lds	r24, 0x03CF
     41c:	90 91 d0 03 	lds	r25, 0x03D0
     420:	a0 91 d1 03 	lds	r26, 0x03D1
     424:	b0 91 d2 03 	lds	r27, 0x03D2
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	a1 1d       	adc	r26, r1
     42c:	b1 1d       	adc	r27, r1
     42e:	80 93 cf 03 	sts	0x03CF, r24
     432:	90 93 d0 03 	sts	0x03D0, r25
     436:	a0 93 d1 03 	sts	0x03D1, r26
     43a:	b0 93 d2 03 	sts	0x03D2, r27
	
	if((time_ms % 2)== 0)
     43e:	80 91 cf 03 	lds	r24, 0x03CF
     442:	90 91 d0 03 	lds	r25, 0x03D0
     446:	a0 91 d1 03 	lds	r26, 0x03D1
     44a:	b0 91 d2 03 	lds	r27, 0x03D2
     44e:	80 fd       	sbrc	r24, 0
     450:	11 c0       	rjmp	.+34     	; 0x474 <__vector_21+0x6e>
	{
		count_time1 = global_counts_m2;
     452:	80 91 cb 03 	lds	r24, 0x03CB
     456:	90 91 cc 03 	lds	r25, 0x03CC
     45a:	09 2e       	mov	r0, r25
     45c:	00 0c       	add	r0, r0
     45e:	aa 0b       	sbc	r26, r26
     460:	bb 0b       	sbc	r27, r27
     462:	80 93 c6 03 	sts	0x03C6, r24
     466:	90 93 c7 03 	sts	0x03C7, r25
     46a:	a0 93 c8 03 	sts	0x03C8, r26
     46e:	b0 93 c9 03 	sts	0x03C9, r27
     472:	2c c0       	rjmp	.+88     	; 0x4cc <__vector_21+0xc6>
	}
	else if((time_ms % 2)== 1)
     474:	80 91 cf 03 	lds	r24, 0x03CF
     478:	90 91 d0 03 	lds	r25, 0x03D0
     47c:	a0 91 d1 03 	lds	r26, 0x03D1
     480:	b0 91 d2 03 	lds	r27, 0x03D2
     484:	81 70       	andi	r24, 0x01	; 1
     486:	99 27       	eor	r25, r25
     488:	aa 27       	eor	r26, r26
     48a:	b0 78       	andi	r27, 0x80	; 128
     48c:	bb 23       	and	r27, r27
     48e:	54 f4       	brge	.+20     	; 0x4a4 <__vector_21+0x9e>
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	a1 09       	sbc	r26, r1
     494:	b1 09       	sbc	r27, r1
     496:	8e 6f       	ori	r24, 0xFE	; 254
     498:	9f 6f       	ori	r25, 0xFF	; 255
     49a:	af 6f       	ori	r26, 0xFF	; 255
     49c:	bf 6f       	ori	r27, 0xFF	; 255
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	a1 1d       	adc	r26, r1
     4a2:	b1 1d       	adc	r27, r1
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	a1 05       	cpc	r26, r1
     4a8:	b1 05       	cpc	r27, r1
     4aa:	81 f4       	brne	.+32     	; 0x4cc <__vector_21+0xc6>
	{
		count_time2 = global_counts_m2;
     4ac:	80 91 cb 03 	lds	r24, 0x03CB
     4b0:	90 91 cc 03 	lds	r25, 0x03CC
     4b4:	09 2e       	mov	r0, r25
     4b6:	00 0c       	add	r0, r0
     4b8:	aa 0b       	sbc	r26, r26
     4ba:	bb 0b       	sbc	r27, r27
     4bc:	80 93 c2 03 	sts	0x03C2, r24
     4c0:	90 93 c3 03 	sts	0x03C3, r25
     4c4:	a0 93 c4 03 	sts	0x03C4, r26
     4c8:	b0 93 c5 03 	sts	0x03C5, r27
	}
}
     4cc:	bf 91       	pop	r27
     4ce:	af 91       	pop	r26
     4d0:	9f 91       	pop	r25
     4d2:	8f 91       	pop	r24
     4d4:	0f 90       	pop	r0
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti

000004de <__vector_9>:
	return 0;
}

// Reading
ISR(PCINT0_vect)
{
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	4f 93       	push	r20
     4ee:	5f 93       	push	r21
     4f0:	6f 93       	push	r22
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
	unsigned char m2b_val;
	char plus_m2;
	char minus_m2 ;
	
	// Determine the current value of all channels.
	m2a_val = ((PINB & (1<<PINB4))>>PINB4);
     4f6:	93 b1       	in	r25, 0x03	; 3
     4f8:	92 95       	swap	r25
     4fa:	91 70       	andi	r25, 0x01	; 1
     4fc:	29 2f       	mov	r18, r25
	m2b_val = ((PINB & (1<<PINB5))>>PINB5);
     4fe:	83 b1       	in	r24, 0x03	; 3
     500:	85 fb       	bst	r24, 5
     502:	88 27       	eor	r24, r24
     504:	80 f9       	bld	r24, 0
     506:	38 2f       	mov	r19, r24
	
	// Determine if the last read of one channel is different from the current read of the other channel
	// which tells you whether you need to add or subtract from encoder count
	
	plus_m2 = m2a_val^last_m2b_val;
	minus_m2 = m2b_val^last_m2a_val;
     508:	60 91 ce 03 	lds	r22, 0x03CE
	
	// add and/or subtract as determined above
	if(plus_m2)
     50c:	40 91 cd 03 	lds	r20, 0x03CD
     510:	94 17       	cp	r25, r20
     512:	51 f0       	breq	.+20     	; 0x528 <__vector_9+0x4a>
	{
		global_counts_m2++;
     514:	40 91 cb 03 	lds	r20, 0x03CB
     518:	50 91 cc 03 	lds	r21, 0x03CC
     51c:	4f 5f       	subi	r20, 0xFF	; 255
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	50 93 cc 03 	sts	0x03CC, r21
     524:	40 93 cb 03 	sts	0x03CB, r20
	}
	if(minus_m2)
     528:	36 17       	cp	r19, r22
     52a:	51 f0       	breq	.+20     	; 0x540 <__vector_9+0x62>
	{
		global_counts_m2--;
     52c:	40 91 cb 03 	lds	r20, 0x03CB
     530:	50 91 cc 03 	lds	r21, 0x03CC
     534:	41 50       	subi	r20, 0x01	; 1
     536:	51 09       	sbc	r21, r1
     538:	50 93 cc 03 	sts	0x03CC, r21
     53c:	40 93 cb 03 	sts	0x03CB, r20
	}
	// do some error checking to see if you missed an interrupt or something is wrong
	if(m2a_val != global_last_m2a_val && m2b_val != global_last_m2b_val)
     540:	22 23       	and	r18, r18
     542:	29 f0       	breq	.+10     	; 0x54e <__vector_9+0x70>
     544:	33 23       	and	r19, r19
     546:	19 f0       	breq	.+6      	; 0x54e <__vector_9+0x70>
	{
		global_error_m2 = 1;
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	20 93 ca 03 	sts	0x03CA, r18
	}
	// save state for next interrupt
	last_m2a_val = m2a_val;
     54e:	90 93 ce 03 	sts	0x03CE, r25
	last_m2b_val = m2b_val;
     552:	80 93 cd 03 	sts	0x03CD, r24
}
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	6f 91       	pop	r22
     55c:	5f 91       	pop	r21
     55e:	4f 91       	pop	r20
     560:	3f 91       	pop	r19
     562:	2f 91       	pop	r18
     564:	0f 90       	pop	r0
     566:	0f be       	out	0x3f, r0	; 63
     568:	0f 90       	pop	r0
     56a:	1f 90       	pop	r1
     56c:	18 95       	reti

0000056e <pwm_init>:

//Initialize PWM
void pwm_init()
{
	TCNT1 = 0;						//Timer 1 initialization
     56e:	10 92 85 00 	sts	0x0085, r1
     572:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << WGM10) ;		//Fast PWM mode - Mode 15
     576:	e0 e8       	ldi	r30, 0x80	; 128
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	81 60       	ori	r24, 0x01	; 1
     57e:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11) ;
     580:	80 81       	ld	r24, Z
     582:	82 60       	ori	r24, 0x02	; 2
     584:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) ;
     586:	a1 e8       	ldi	r26, 0x81	; 129
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	8c 91       	ld	r24, X
     58c:	88 60       	ori	r24, 0x08	; 8
     58e:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13) ;
     590:	8c 91       	ld	r24, X
     592:	80 61       	ori	r24, 0x10	; 16
     594:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS10) ;			// No scaling
     596:	8c 91       	ld	r24, X
     598:	81 60       	ori	r24, 0x01	; 1
     59a:	8c 93       	st	X, r24
	TCCR1A |= (1 << COM1B1) ;
     59c:	80 81       	ld	r24, Z
     59e:	80 62       	ori	r24, 0x20	; 32
     5a0:	80 83       	st	Z, r24
	OCR1A = 10000;
     5a2:	80 e1       	ldi	r24, 0x10	; 16
     5a4:	97 e2       	ldi	r25, 0x27	; 39
     5a6:	90 93 89 00 	sts	0x0089, r25
     5aa:	80 93 88 00 	sts	0x0088, r24
     5ae:	08 95       	ret

000005b0 <main>:
}

void pwm_init(void);

int main()
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	6e 97       	sbiw	r28, 0x1e	; 30
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
	// Initialize serial communication
	uart_init();
     5c4:	0e 94 a7 01 	call	0x34e	; 0x34e <uart_init>
	pwm_init();
     5c8:	0e 94 b7 02 	call	0x56e	; 0x56e <pwm_init>
	timer0_init();
     5cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <timer0_init>
	
	int target_array = 0 ;
	
	// Setting motor 2 PMW as output
	DDRB |= (1<<PORTB6) ;
     5d0:	26 9a       	sbi	0x04, 6	; 4
	
	// Enabling interrupt at PB4 and PB5
	PCMSK0 |= (1<<PCINT4) ;
     5d2:	eb e6       	ldi	r30, 0x6B	; 107
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	80 61       	ori	r24, 0x10	; 16
     5da:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5) ;
     5dc:	80 81       	ld	r24, Z
     5de:	80 62       	ori	r24, 0x20	; 32
     5e0:	80 83       	st	Z, r24
	
	// Enabling external interrupt
	PCICR |= (1<<PCIE0);
     5e2:	e8 e6       	ldi	r30, 0x68	; 104
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	81 60       	ori	r24, 0x01	; 1
     5ea:	80 83       	st	Z, r24
	sei();
     5ec:	78 94       	sei
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
	int32_t error = 2 ;
	int print_menu = 0 ;
	int32_t target_count = target_degree*7;
     5ee:	80 91 06 01 	lds	r24, 0x0106
     5f2:	90 91 07 01 	lds	r25, 0x0107
     5f6:	a0 91 08 01 	lds	r26, 0x0108
     5fa:	b0 91 09 01 	lds	r27, 0x0109
     5fe:	6c 01       	movw	r12, r24
     600:	7d 01       	movw	r14, r26
     602:	cc 0c       	add	r12, r12
     604:	dd 1c       	adc	r13, r13
     606:	ee 1c       	adc	r14, r14
     608:	ff 1c       	adc	r15, r15
     60a:	cc 0c       	add	r12, r12
     60c:	dd 1c       	adc	r13, r13
     60e:	ee 1c       	adc	r14, r14
     610:	ff 1c       	adc	r15, r15
     612:	cc 0c       	add	r12, r12
     614:	dd 1c       	adc	r13, r13
     616:	ee 1c       	adc	r14, r14
     618:	ff 1c       	adc	r15, r15
     61a:	c8 1a       	sub	r12, r24
     61c:	d9 0a       	sbc	r13, r25
     61e:	ea 0a       	sbc	r14, r26
     620:	fb 0a       	sbc	r15, r27
     622:	26 01       	movw	r4, r12
     624:	37 01       	movw	r6, r14
	int32_t T = 0; 
	
	uart_print( "Welcome\n" );
     626:	8a e0       	ldi	r24, 0x0A	; 10
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print("Target position in degree : ");
     62e:	83 e1       	ldi	r24, 0x13	; 19
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	itoa(target_degree,str,10);
     636:	80 91 06 01 	lds	r24, 0x0106
     63a:	90 91 07 01 	lds	r25, 0x0107
     63e:	a0 91 08 01 	lds	r26, 0x0108
     642:	b0 91 09 01 	lds	r27, 0x0109
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     646:	4a e0       	ldi	r20, 0x0A	; 10
     648:	be 01       	movw	r22, r28
     64a:	6f 5f       	subi	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__itoa_ncheck>
	uart_print(str);
     652:	ce 01       	movw	r24, r28
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print( "\n" );
     65a:	8c e0       	ldi	r24, 0x0C	; 12
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print("Target position in counts : ");
     662:	80 e3       	ldi	r24, 0x30	; 48
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     66a:	4a e0       	ldi	r20, 0x0A	; 10
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	c6 01       	movw	r24, r12
     674:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__itoa_ncheck>
	itoa(target_count,str,10);
	uart_print(str);
     678:	ce 01       	movw	r24, r28
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print( "\n" );
     680:	8c e0       	ldi	r24, 0x0C	; 12
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print("Current position in count : ");
     688:	8d e4       	ldi	r24, 0x4D	; 77
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     690:	4a e0       	ldi	r20, 0x0A	; 10
     692:	be 01       	movw	r22, r28
     694:	6f 5f       	subi	r22, 0xFF	; 255
     696:	7f 4f       	sbci	r23, 0xFF	; 255
     698:	80 91 cb 03 	lds	r24, 0x03CB
     69c:	90 91 cc 03 	lds	r25, 0x03CC
     6a0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__itoa_ncheck>
	itoa(global_counts_m2,str,10);
	uart_print(str);
     6a4:	ce 01       	movw	r24, r28
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print( "\n" );
     6ac:	8c e0       	ldi	r24, 0x0C	; 12
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	unsigned char receivedChar = '0';
	int run_motor = 2;
	int32_t error = 2 ;
	int print_menu = 0 ;
	int32_t target_count = target_degree*7;
	int32_t T = 0; 
     6b4:	1b 86       	std	Y+11, r1	; 0x0b
     6b6:	1c 86       	std	Y+12, r1	; 0x0c
     6b8:	1d 86       	std	Y+13, r1	; 0x0d
     6ba:	1e 86       	std	Y+14, r1	; 0x0e
	
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
	int32_t error = 2 ;
	int print_menu = 0 ;
     6bc:	21 2c       	mov	r2, r1
     6be:	31 2c       	mov	r3, r1
	int printed = 0;
	
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
	int32_t error = 2 ;
     6c0:	81 2c       	mov	r8, r1
     6c2:	91 2c       	mov	r9, r1
     6c4:	54 01       	movw	r10, r8
     6c6:	68 94       	set
     6c8:	81 f8       	bld	r8, 1
	char str[10];
	int printed = 0;
	
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
     6ca:	02 e0       	ldi	r16, 0x02	; 2
     6cc:	10 e0       	ldi	r17, 0x00	; 0
	// Initialize serial communication
	uart_init();
	pwm_init();
	timer0_init();
	
	int target_array = 0 ;
     6ce:	18 8a       	std	Y+16, r1	; 0x10
     6d0:	1f 86       	std	Y+15, r1	; 0x0f
     6d2:	0f c0       	rjmp	.+30     	; 0x6f2 <main+0x142>
			target_array = 3;
			OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.001));
		}
		printed = 0;
	}
		error = target_count - global_counts_m2;
     6d4:	a3 01       	movw	r20, r6
     6d6:	92 01       	movw	r18, r4
     6d8:	28 19       	sub	r18, r8
     6da:	39 09       	sbc	r19, r9
     6dc:	4a 09       	sbc	r20, r10
     6de:	5b 09       	sbc	r21, r11
     6e0:	49 01       	movw	r8, r18
     6e2:	5a 01       	movw	r10, r20
     6e4:	26 01       	movw	r4, r12
     6e6:	37 01       	movw	r6, r14
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <main+0x142>
     6ea:	26 01       	movw	r4, r12
     6ec:	37 01       	movw	r6, r14
     6ee:	01 e0       	ldi	r16, 0x01	; 1
     6f0:	10 e0       	ldi	r17, 0x00	; 0
	uart_print(str);
	uart_print( "\n" );
	
	while(1)
	{
	if((error < 5) && (run_motor == 1))
     6f2:	35 e0       	ldi	r19, 0x05	; 5
     6f4:	83 16       	cp	r8, r19
     6f6:	91 04       	cpc	r9, r1
     6f8:	a1 04       	cpc	r10, r1
     6fa:	b1 04       	cpc	r11, r1
     6fc:	0c f0       	brlt	.+2      	; 0x700 <main+0x150>
     6fe:	89 c0       	rjmp	.+274    	; 0x812 <main+0x262>
     700:	01 30       	cpi	r16, 0x01	; 1
     702:	11 05       	cpc	r17, r1
     704:	09 f0       	breq	.+2      	; 0x708 <main+0x158>
     706:	85 c0       	rjmp	.+266    	; 0x812 <main+0x262>
	{
		if(target_array == 0)
     708:	4f 85       	ldd	r20, Y+15	; 0x0f
     70a:	58 89       	ldd	r21, Y+16	; 0x10
     70c:	45 2b       	or	r20, r21
     70e:	41 f4       	brne	.+16     	; 0x720 <main+0x170>
		{
			uart_print( "\n" );
     710:	8c e0       	ldi	r24, 0x0C	; 12
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			target_array = 1;
     718:	51 e0       	ldi	r21, 0x01	; 1
     71a:	5f 87       	std	Y+15, r21	; 0x0f
     71c:	18 8a       	std	Y+16, r1	; 0x10
     71e:	79 c0       	rjmp	.+242    	; 0x812 <main+0x262>
			//OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
		}
		else if(target_array == 1)
     720:	8f 85       	ldd	r24, Y+15	; 0x0f
     722:	98 89       	ldd	r25, Y+16	; 0x10
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	51 f4       	brne	.+20     	; 0x73c <main+0x18c>
		{
			target_array = 2;
			target_count = target_count - 2500;
     728:	94 ec       	ldi	r25, 0xC4	; 196
     72a:	49 1a       	sub	r4, r25
     72c:	99 e0       	ldi	r25, 0x09	; 9
     72e:	59 0a       	sbc	r5, r25
     730:	61 08       	sbc	r6, r1
     732:	71 08       	sbc	r7, r1
			target_array = 1;
			//OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
		}
		else if(target_array == 1)
		{
			target_array = 2;
     734:	a2 e0       	ldi	r26, 0x02	; 2
     736:	af 87       	std	Y+15, r26	; 0x0f
     738:	18 8a       	std	Y+16, r1	; 0x10
     73a:	6b c0       	rjmp	.+214    	; 0x812 <main+0x262>
			target_count = target_count - 2500;
			//OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/());
		}
		else if(target_array == 2)
     73c:	ef 85       	ldd	r30, Y+15	; 0x0f
     73e:	f8 89       	ldd	r31, Y+16	; 0x10
     740:	32 97       	sbiw	r30, 0x02	; 2
     742:	09 f0       	breq	.+2      	; 0x746 <main+0x196>
     744:	66 c0       	rjmp	.+204    	; 0x812 <main+0x262>
		{
			target_count = target_count + 35;
     746:	f3 e2       	ldi	r31, 0x23	; 35
     748:	4f 0e       	add	r4, r31
     74a:	51 1c       	adc	r5, r1
     74c:	61 1c       	adc	r6, r1
     74e:	71 1c       	adc	r7, r1
			target_array = 3;
			OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.001));
     750:	a0 91 04 01 	lds	r26, 0x0104
     754:	b0 91 05 01 	lds	r27, 0x0105
     758:	20 91 c2 03 	lds	r18, 0x03C2
     75c:	30 91 c3 03 	lds	r19, 0x03C3
     760:	40 91 c4 03 	lds	r20, 0x03C4
     764:	50 91 c5 03 	lds	r21, 0x03C5
     768:	2f 87       	std	Y+15, r18	; 0x0f
     76a:	38 8b       	std	Y+16, r19	; 0x10
     76c:	49 8b       	std	Y+17, r20	; 0x11
     76e:	5a 8b       	std	Y+18, r21	; 0x12
     770:	c0 90 c6 03 	lds	r12, 0x03C6
     774:	d0 90 c7 03 	lds	r13, 0x03C7
     778:	e0 90 c8 03 	lds	r14, 0x03C8
     77c:	f0 90 c9 03 	lds	r15, 0x03C9
     780:	20 91 00 01 	lds	r18, 0x0100
     784:	30 91 01 01 	lds	r19, 0x0101
     788:	40 91 02 01 	lds	r20, 0x0102
     78c:	50 91 03 01 	lds	r21, 0x0103
     790:	2b 8b       	std	Y+19, r18	; 0x13
     792:	3c 8b       	std	Y+20, r19	; 0x14
     794:	4d 8b       	std	Y+21, r20	; 0x15
     796:	5e 8b       	std	Y+22, r21	; 0x16
     798:	a5 01       	movw	r20, r10
     79a:	94 01       	movw	r18, r8
     79c:	0e 94 a7 0b 	call	0x174e	; 0x174e <__mulshisi3>
     7a0:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     7a4:	4b 01       	movw	r8, r22
     7a6:	5c 01       	movw	r10, r24
     7a8:	6f 85       	ldd	r22, Y+15	; 0x0f
     7aa:	78 89       	ldd	r23, Y+16	; 0x10
     7ac:	89 89       	ldd	r24, Y+17	; 0x11
     7ae:	9a 89       	ldd	r25, Y+18	; 0x12
     7b0:	6c 19       	sub	r22, r12
     7b2:	7d 09       	sbc	r23, r13
     7b4:	8e 09       	sbc	r24, r14
     7b6:	9f 09       	sbc	r25, r15
     7b8:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     7bc:	2f e6       	ldi	r18, 0x6F	; 111
     7be:	32 e1       	ldi	r19, 0x12	; 18
     7c0:	43 e8       	ldi	r20, 0x83	; 131
     7c2:	5a e3       	ldi	r21, 0x3A	; 58
     7c4:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     7c8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixsfsi>
     7cc:	9b 01       	movw	r18, r22
     7ce:	77 23       	and	r23, r23
     7d0:	24 f4       	brge	.+8      	; 0x7da <main+0x22a>
     7d2:	22 27       	eor	r18, r18
     7d4:	33 27       	eor	r19, r19
     7d6:	26 1b       	sub	r18, r22
     7d8:	37 0b       	sbc	r19, r23
     7da:	b9 01       	movw	r22, r18
     7dc:	33 0f       	add	r19, r19
     7de:	88 0b       	sbc	r24, r24
     7e0:	99 0b       	sbc	r25, r25
     7e2:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     7e6:	2b 89       	ldd	r18, Y+19	; 0x13
     7e8:	3c 89       	ldd	r19, Y+20	; 0x14
     7ea:	4d 89       	ldd	r20, Y+21	; 0x15
     7ec:	5e 89       	ldd	r21, Y+22	; 0x16
     7ee:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     7f2:	9b 01       	movw	r18, r22
     7f4:	ac 01       	movw	r20, r24
     7f6:	c5 01       	movw	r24, r10
     7f8:	b4 01       	movw	r22, r8
     7fa:	0e 94 f9 07 	call	0xff2	; 0xff2 <__addsf3>
     7fe:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fixunssfsi>
     802:	aa e8       	ldi	r26, 0x8A	; 138
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	11 96       	adiw	r26, 0x01	; 1
     808:	7c 93       	st	X, r23
     80a:	6e 93       	st	-X, r22
			//OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/());
		}
		else if(target_array == 2)
		{
			target_count = target_count + 35;
			target_array = 3;
     80c:	b3 e0       	ldi	r27, 0x03	; 3
     80e:	bf 87       	std	Y+15, r27	; 0x0f
     810:	18 8a       	std	Y+16, r1	; 0x10
			OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.001));
		}
		printed = 0;
	}
		error = target_count - global_counts_m2;
     812:	e0 90 cb 03 	lds	r14, 0x03CB
     816:	f0 90 cc 03 	lds	r15, 0x03CC
     81a:	47 01       	movw	r8, r14
     81c:	0f 2c       	mov	r0, r15
     81e:	00 0c       	add	r0, r0
     820:	aa 08       	sbc	r10, r10
     822:	bb 08       	sbc	r11, r11
		if(print_menu == 0)
     824:	21 14       	cp	r2, r1
     826:	31 04       	cpc	r3, r1
     828:	19 f5       	brne	.+70     	; 0x870 <main+0x2c0>
		{
			uart_print( "Enter 'R' to increase the reference by 10 degree\n" );
     82a:	8a e6       	ldi	r24, 0x6A	; 106
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'r' to increase the reference by 10 degree\n" );
     832:	8c e9       	ldi	r24, 0x9C	; 156
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'P' to increase Kp by 1 \n" );
     83a:	8e ec       	ldi	r24, 0xCE	; 206
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'p' to decrease Kp by 1 \n" );
     842:	8e ee       	ldi	r24, 0xEE	; 238
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'D' to increase Kd by 0.5\n" );
     84a:	8e e0       	ldi	r24, 0x0E	; 14
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'd' to decrease Kd by 0.5\n" );
     852:	8f e2       	ldi	r24, 0x2F	; 47
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'V' to view current values of Kd, Kp, Pr, Pm \n" );
     85a:	80 e5       	ldi	r24, 0x50	; 80
     85c:	92 e0       	ldi	r25, 0x02	; 2
     85e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 't' to Start the trajectory" );
     862:	85 e8       	ldi	r24, 0x85	; 133
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			print_menu = 1;
     86a:	22 24       	eor	r2, r2
     86c:	23 94       	inc	r2
     86e:	31 2c       	mov	r3, r1
		}
		
		if(uart_dataAvailable())
     870:	0e 94 c4 01 	call	0x388	; 0x388 <uart_dataAvailable>
     874:	89 2b       	or	r24, r25
     876:	09 f4       	brne	.+2      	; 0x87a <main+0x2ca>
     878:	92 c1       	rjmp	.+804    	; 0xb9e <__stack+0x9f>
		{
			receivedChar = uart_receive();
     87a:	0e 94 bc 01 	call	0x378	; 0x378 <uart_receive>
			switch(receivedChar)
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	fc 01       	movw	r30, r24
     882:	e4 54       	subi	r30, 0x44	; 68
     884:	f1 09       	sbc	r31, r1
     886:	e1 33       	cpi	r30, 0x31	; 49
     888:	f1 05       	cpc	r31, r1
     88a:	08 f0       	brcs	.+2      	; 0x88e <main+0x2de>
     88c:	8b c1       	rjmp	.+790    	; 0xba4 <__stack+0xa5>
     88e:	ea 5a       	subi	r30, 0xAA	; 170
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__tablejump2__>
			{
				case 'R':
				if(printed == 0)
				{
					target_count = target_count + 70 ;
     896:	73 01       	movw	r14, r6
     898:	62 01       	movw	r12, r4
     89a:	e6 e4       	ldi	r30, 0x46	; 70
     89c:	ce 0e       	add	r12, r30
     89e:	d1 1c       	adc	r13, r1
     8a0:	e1 1c       	adc	r14, r1
     8a2:	f1 1c       	adc	r15, r1
					target_degree = target_degree + 10;
     8a4:	80 91 06 01 	lds	r24, 0x0106
     8a8:	90 91 07 01 	lds	r25, 0x0107
     8ac:	a0 91 08 01 	lds	r26, 0x0108
     8b0:	b0 91 09 01 	lds	r27, 0x0109
     8b4:	0a 96       	adiw	r24, 0x0a	; 10
     8b6:	a1 1d       	adc	r26, r1
     8b8:	b1 1d       	adc	r27, r1
     8ba:	80 93 06 01 	sts	0x0106, r24
     8be:	90 93 07 01 	sts	0x0107, r25
     8c2:	a0 93 08 01 	sts	0x0108, r26
     8c6:	b0 93 09 01 	sts	0x0109, r27
					uart_print( "New reference position set to(in degrees) : \n" );
     8ca:	87 ea       	ldi	r24, 0xA7	; 167
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					itoa(target_degree, str, 10);
     8d2:	80 91 06 01 	lds	r24, 0x0106
     8d6:	90 91 07 01 	lds	r25, 0x0107
     8da:	a0 91 08 01 	lds	r26, 0x0108
     8de:	b0 91 09 01 	lds	r27, 0x0109
     8e2:	4a e0       	ldi	r20, 0x0A	; 10
     8e4:	be 01       	movw	r22, r28
     8e6:	6f 5f       	subi	r22, 0xFF	; 255
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__itoa_ncheck>
					uart_print(str);
     8ee:	ce 01       	movw	r24, r28
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     8f6:	58 c1       	rjmp	.+688    	; 0xba8 <__stack+0xa9>
				}
				break;
				case 'r':
				if(printed == 0)
				{
					target_count = target_count - 70;
     8f8:	73 01       	movw	r14, r6
     8fa:	62 01       	movw	r12, r4
     8fc:	f6 e4       	ldi	r31, 0x46	; 70
     8fe:	cf 1a       	sub	r12, r31
     900:	d1 08       	sbc	r13, r1
     902:	e1 08       	sbc	r14, r1
     904:	f1 08       	sbc	r15, r1
					target_degree = target_degree - 10;
     906:	80 91 06 01 	lds	r24, 0x0106
     90a:	90 91 07 01 	lds	r25, 0x0107
     90e:	a0 91 08 01 	lds	r26, 0x0108
     912:	b0 91 09 01 	lds	r27, 0x0109
     916:	0a 97       	sbiw	r24, 0x0a	; 10
     918:	a1 09       	sbc	r26, r1
     91a:	b1 09       	sbc	r27, r1
     91c:	80 93 06 01 	sts	0x0106, r24
     920:	90 93 07 01 	sts	0x0107, r25
     924:	a0 93 08 01 	sts	0x0108, r26
     928:	b0 93 09 01 	sts	0x0109, r27
					uart_print( "New reference position set to : \n" );
     92c:	85 ed       	ldi	r24, 0xD5	; 213
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     934:	4a e0       	ldi	r20, 0x0A	; 10
     936:	be 01       	movw	r22, r28
     938:	6f 5f       	subi	r22, 0xFF	; 255
     93a:	7f 4f       	sbci	r23, 0xFF	; 255
     93c:	c6 01       	movw	r24, r12
     93e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__itoa_ncheck>
					itoa(target_count, str, 10);
					uart_print(str);
     942:	ce 01       	movw	r24, r28
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     94a:	2e c1       	rjmp	.+604    	; 0xba8 <__stack+0xa9>
				}
				break;
				case 'P':
				if(printed == 0)
				{
					Kp = Kp + 1;
     94c:	80 91 04 01 	lds	r24, 0x0104
     950:	90 91 05 01 	lds	r25, 0x0105
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	90 93 05 01 	sts	0x0105, r25
     95a:	80 93 04 01 	sts	0x0104, r24
					uart_print( "New value of kp : \n" );
     95e:	87 ef       	ldi	r24, 0xF7	; 247
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kp, str, 1);
     966:	60 91 04 01 	lds	r22, 0x0104
     96a:	70 91 05 01 	lds	r23, 0x0105
     96e:	07 2e       	mov	r0, r23
     970:	00 0c       	add	r0, r0
     972:	88 0b       	sbc	r24, r24
     974:	99 0b       	sbc	r25, r25
     976:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	ae 01       	movw	r20, r28
     980:	4f 5f       	subi	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     988:	ce 01       	movw	r24, r28
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     990:	73 01       	movw	r14, r6
     992:	62 01       	movw	r12, r4
     994:	09 c1       	rjmp	.+530    	; 0xba8 <__stack+0xa9>
				}
				break;
				case 'p':
				if(printed == 0)
				{
					Kp = Kp -1 ;
     996:	80 91 04 01 	lds	r24, 0x0104
     99a:	90 91 05 01 	lds	r25, 0x0105
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	90 93 05 01 	sts	0x0105, r25
     9a4:	80 93 04 01 	sts	0x0104, r24
					uart_print( "New value of kp : \n" );
     9a8:	87 ef       	ldi	r24, 0xF7	; 247
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kp, str, 1);
     9b0:	60 91 04 01 	lds	r22, 0x0104
     9b4:	70 91 05 01 	lds	r23, 0x0105
     9b8:	07 2e       	mov	r0, r23
     9ba:	00 0c       	add	r0, r0
     9bc:	88 0b       	sbc	r24, r24
     9be:	99 0b       	sbc	r25, r25
     9c0:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     9c4:	21 e0       	ldi	r18, 0x01	; 1
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	ae 01       	movw	r20, r28
     9ca:	4f 5f       	subi	r20, 0xFF	; 255
     9cc:	5f 4f       	sbci	r21, 0xFF	; 255
     9ce:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     9da:	73 01       	movw	r14, r6
     9dc:	62 01       	movw	r12, r4
     9de:	e4 c0       	rjmp	.+456    	; 0xba8 <__stack+0xa9>
				}
				break;
				case 'D':
				if(printed == 0)
				{
					Kd = Kd + 0.5;
     9e0:	60 91 00 01 	lds	r22, 0x0100
     9e4:	70 91 01 01 	lds	r23, 0x0101
     9e8:	80 91 02 01 	lds	r24, 0x0102
     9ec:	90 91 03 01 	lds	r25, 0x0103
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	5f e3       	ldi	r21, 0x3F	; 63
     9f8:	0e 94 f9 07 	call	0xff2	; 0xff2 <__addsf3>
     9fc:	60 93 00 01 	sts	0x0100, r22
     a00:	70 93 01 01 	sts	0x0101, r23
     a04:	80 93 02 01 	sts	0x0102, r24
     a08:	90 93 03 01 	sts	0x0103, r25
					uart_print( "New value of kd : " );
     a0c:	8b e0       	ldi	r24, 0x0B	; 11
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kd, str, 1);
     a14:	60 91 00 01 	lds	r22, 0x0100
     a18:	70 91 01 01 	lds	r23, 0x0101
     a1c:	80 91 02 01 	lds	r24, 0x0102
     a20:	90 91 03 01 	lds	r25, 0x0103
     a24:	21 e0       	ldi	r18, 0x01	; 1
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	ae 01       	movw	r20, r28
     a2a:	4f 5f       	subi	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     a32:	ce 01       	movw	r24, r28
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     a3a:	73 01       	movw	r14, r6
     a3c:	62 01       	movw	r12, r4
     a3e:	b4 c0       	rjmp	.+360    	; 0xba8 <__stack+0xa9>
				}
				break;
				case 'd':
				if(printed == 0)
				{
					Kd = Kd - 0.5;
     a40:	60 91 00 01 	lds	r22, 0x0100
     a44:	70 91 01 01 	lds	r23, 0x0101
     a48:	80 91 02 01 	lds	r24, 0x0102
     a4c:	90 91 03 01 	lds	r25, 0x0103
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	5f e3       	ldi	r21, 0x3F	; 63
     a58:	0e 94 f8 07 	call	0xff0	; 0xff0 <__subsf3>
     a5c:	60 93 00 01 	sts	0x0100, r22
     a60:	70 93 01 01 	sts	0x0101, r23
     a64:	80 93 02 01 	sts	0x0102, r24
     a68:	90 93 03 01 	sts	0x0103, r25
					uart_print( "New value of kd : \n" );
     a6c:	8e e1       	ldi	r24, 0x1E	; 30
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kd, str, 1);
     a74:	60 91 00 01 	lds	r22, 0x0100
     a78:	70 91 01 01 	lds	r23, 0x0101
     a7c:	80 91 02 01 	lds	r24, 0x0102
     a80:	90 91 03 01 	lds	r25, 0x0103
     a84:	21 e0       	ldi	r18, 0x01	; 1
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	ae 01       	movw	r20, r28
     a8a:	4f 5f       	subi	r20, 0xFF	; 255
     a8c:	5f 4f       	sbci	r21, 0xFF	; 255
     a8e:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     a92:	ce 01       	movw	r24, r28
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     a9a:	73 01       	movw	r14, r6
     a9c:	62 01       	movw	r12, r4
     a9e:	84 c0       	rjmp	.+264    	; 0xba8 <__stack+0xa9>
				}
				break;
				case 'V':
				if(printed == 0)
				{
					uart_print( "Current value of kp : " );
     aa0:	82 e3       	ldi	r24, 0x32	; 50
     aa2:	93 e0       	ldi	r25, 0x03	; 3
     aa4:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kp, str, 1);
     aa8:	60 91 04 01 	lds	r22, 0x0104
     aac:	70 91 05 01 	lds	r23, 0x0105
     ab0:	07 2e       	mov	r0, r23
     ab2:	00 0c       	add	r0, r0
     ab4:	88 0b       	sbc	r24, r24
     ab6:	99 0b       	sbc	r25, r25
     ab8:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     abc:	21 e0       	ldi	r18, 0x01	; 1
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	ae 01       	movw	r20, r28
     ac2:	4f 5f       	subi	r20, 0xFF	; 255
     ac4:	5f 4f       	sbci	r21, 0xFF	; 255
     ac6:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     aca:	ce 01       	movw	r24, r28
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "\n" );
     ad2:	8c e0       	ldi	r24, 0x0C	; 12
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Current value of kd : " );
     ada:	89 e4       	ldi	r24, 0x49	; 73
     adc:	93 e0       	ldi	r25, 0x03	; 3
     ade:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kd, str, 1);
     ae2:	60 91 00 01 	lds	r22, 0x0100
     ae6:	70 91 01 01 	lds	r23, 0x0101
     aea:	80 91 02 01 	lds	r24, 0x0102
     aee:	90 91 03 01 	lds	r25, 0x0103
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	ae 01       	movw	r20, r28
     af8:	4f 5f       	subi	r20, 0xFF	; 255
     afa:	5f 4f       	sbci	r21, 0xFF	; 255
     afc:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print("\n");
     b08:	8c e0       	ldi	r24, 0x0C	; 12
     b0a:	92 e0       	ldi	r25, 0x02	; 2
     b0c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Measured position 'Pm' in count : " );
     b10:	80 e6       	ldi	r24, 0x60	; 96
     b12:	93 e0       	ldi	r25, 0x03	; 3
     b14:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     b18:	4a e0       	ldi	r20, 0x0A	; 10
     b1a:	be 01       	movw	r22, r28
     b1c:	6f 5f       	subi	r22, 0xFF	; 255
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	c7 01       	movw	r24, r14
     b22:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__itoa_ncheck>
					itoa(global_counts_m2,str,10);
					uart_print(str);
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "\n" );
     b2e:	8c e0       	ldi	r24, 0x0C	; 12
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Reference position in count : " );
     b36:	83 e8       	ldi	r24, 0x83	; 131
     b38:	93 e0       	ldi	r25, 0x03	; 3
     b3a:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     b3e:	4a e0       	ldi	r20, 0x0A	; 10
     b40:	be 01       	movw	r22, r28
     b42:	6f 5f       	subi	r22, 0xFF	; 255
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	c2 01       	movw	r24, r4
     b48:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__itoa_ncheck>
					itoa(target_count,str,10);
					uart_print(str);
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "\n" );
     b54:	8c e0       	ldi	r24, 0x0C	; 12
     b56:	92 e0       	ldi	r25, 0x02	; 2
     b58:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Reference position in degree : " );
     b5c:	82 ea       	ldi	r24, 0xA2	; 162
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					itoa(target_degree,str,10);
     b64:	80 91 06 01 	lds	r24, 0x0106
     b68:	90 91 07 01 	lds	r25, 0x0107
     b6c:	a0 91 08 01 	lds	r26, 0x0108
     b70:	b0 91 09 01 	lds	r27, 0x0109
     b74:	4a e0       	ldi	r20, 0x0A	; 10
     b76:	be 01       	movw	r22, r28
     b78:	6f 5f       	subi	r22, 0xFF	; 255
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__itoa_ncheck>
					uart_print(str);
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     b88:	73 01       	movw	r14, r6
     b8a:	62 01       	movw	r12, r4
     b8c:	0d c0       	rjmp	.+26     	; 0xba8 <__stack+0xa9>
				}
				break;
				case 't':
				if(printed == 0)
				{
					if(target_count != global_counts_m2)
     b8e:	48 14       	cp	r4, r8
     b90:	59 04       	cpc	r5, r9
     b92:	6a 04       	cpc	r6, r10
     b94:	7b 04       	cpc	r7, r11
     b96:	69 f4       	brne	.+26     	; 0xbb2 <__stack+0xb3>
     b98:	75 01       	movw	r14, r10
     b9a:	64 01       	movw	r12, r8
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__stack+0xa9>
     b9e:	73 01       	movw	r14, r6
     ba0:	62 01       	movw	r12, r4
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <__stack+0xa9>
		}
		
		if(uart_dataAvailable())
		{
			receivedChar = uart_receive();
			switch(receivedChar)
     ba4:	73 01       	movw	r14, r6
     ba6:	62 01       	movw	r12, r4
				}
				break;
			}
		}
		
		if(run_motor == 1)
     ba8:	01 30       	cpi	r16, 0x01	; 1
     baa:	11 05       	cpc	r17, r1
     bac:	09 f0       	breq	.+2      	; 0xbb0 <__stack+0xb1>
     bae:	92 cd       	rjmp	.-1244   	; 0x6d4 <main+0x124>
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <__stack+0xb7>
     bb2:	73 01       	movw	r14, r6
     bb4:	62 01       	movw	r12, r4
		{
			error = abs(global_counts_m2 - (target_count)) ;
     bb6:	80 91 cb 03 	lds	r24, 0x03CB
     bba:	90 91 cc 03 	lds	r25, 0x03CC
     bbe:	9c 01       	movw	r18, r24
     bc0:	2c 19       	sub	r18, r12
     bc2:	3d 09       	sbc	r19, r13
     bc4:	49 01       	movw	r8, r18
     bc6:	22 f4       	brpl	.+8      	; 0xbd0 <__stack+0xd1>
     bc8:	88 24       	eor	r8, r8
     bca:	99 24       	eor	r9, r9
     bcc:	82 1a       	sub	r8, r18
     bce:	93 0a       	sbc	r9, r19
     bd0:	09 2c       	mov	r0, r9
     bd2:	00 0c       	add	r0, r0
     bd4:	aa 08       	sbc	r10, r10
     bd6:	bb 08       	sbc	r11, r11
			if(global_counts_m2 > target_count)
     bd8:	09 2e       	mov	r0, r25
     bda:	00 0c       	add	r0, r0
     bdc:	aa 0b       	sbc	r26, r26
     bde:	bb 0b       	sbc	r27, r27
     be0:	c8 16       	cp	r12, r24
     be2:	d9 06       	cpc	r13, r25
     be4:	ea 06       	cpc	r14, r26
     be6:	fb 06       	cpc	r15, r27
     be8:	0c f0       	brlt	.+2      	; 0xbec <__stack+0xed>
     bea:	eb c0       	rjmp	.+470    	; 0xdc2 <__stack+0x2c3>
     bec:	4a e0       	ldi	r20, 0x0A	; 10
     bee:	be 01       	movw	r22, r28
     bf0:	6f 5f       	subi	r22, 0xFF	; 255
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf6:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__itoa_ncheck>
			{
				itoa(T,str,10);
				uart_print(str);
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
				uart_print( "\n" );
     c04:	8c e0       	ldi	r24, 0x0C	; 12
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
				T = error*Kp + Kd*abs((count_time2 - count_time1)/(0.001));
     c0c:	a0 91 04 01 	lds	r26, 0x0104
     c10:	b0 91 05 01 	lds	r27, 0x0105
     c14:	20 91 c2 03 	lds	r18, 0x03C2
     c18:	30 91 c3 03 	lds	r19, 0x03C3
     c1c:	40 91 c4 03 	lds	r20, 0x03C4
     c20:	50 91 c5 03 	lds	r21, 0x03C5
     c24:	2b 87       	std	Y+11, r18	; 0x0b
     c26:	3c 87       	std	Y+12, r19	; 0x0c
     c28:	4d 87       	std	Y+13, r20	; 0x0d
     c2a:	5e 87       	std	Y+14, r21	; 0x0e
     c2c:	40 90 c6 03 	lds	r4, 0x03C6
     c30:	50 90 c7 03 	lds	r5, 0x03C7
     c34:	60 90 c8 03 	lds	r6, 0x03C8
     c38:	70 90 c9 03 	lds	r7, 0x03C9
     c3c:	20 91 00 01 	lds	r18, 0x0100
     c40:	30 91 01 01 	lds	r19, 0x0101
     c44:	40 91 02 01 	lds	r20, 0x0102
     c48:	50 91 03 01 	lds	r21, 0x0103
     c4c:	2b 8b       	std	Y+19, r18	; 0x13
     c4e:	3c 8b       	std	Y+20, r19	; 0x14
     c50:	4d 8b       	std	Y+21, r20	; 0x15
     c52:	5e 8b       	std	Y+22, r21	; 0x16
     c54:	a5 01       	movw	r20, r10
     c56:	94 01       	movw	r18, r8
     c58:	0e 94 a7 0b 	call	0x174e	; 0x174e <__mulshisi3>
     c5c:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     c60:	6f 8b       	std	Y+23, r22	; 0x17
     c62:	78 8f       	std	Y+24, r23	; 0x18
     c64:	89 8f       	std	Y+25, r24	; 0x19
     c66:	9a 8f       	std	Y+26, r25	; 0x1a
     c68:	6b 85       	ldd	r22, Y+11	; 0x0b
     c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c70:	64 19       	sub	r22, r4
     c72:	75 09       	sbc	r23, r5
     c74:	86 09       	sbc	r24, r6
     c76:	97 09       	sbc	r25, r7
     c78:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     c7c:	2f e6       	ldi	r18, 0x6F	; 111
     c7e:	32 e1       	ldi	r19, 0x12	; 18
     c80:	43 e8       	ldi	r20, 0x83	; 131
     c82:	5a e3       	ldi	r21, 0x3A	; 58
     c84:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     c88:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixsfsi>
     c8c:	9b 01       	movw	r18, r22
     c8e:	77 23       	and	r23, r23
     c90:	24 f4       	brge	.+8      	; 0xc9a <__stack+0x19b>
     c92:	22 27       	eor	r18, r18
     c94:	33 27       	eor	r19, r19
     c96:	26 1b       	sub	r18, r22
     c98:	37 0b       	sbc	r19, r23
     c9a:	b9 01       	movw	r22, r18
     c9c:	33 0f       	add	r19, r19
     c9e:	88 0b       	sbc	r24, r24
     ca0:	99 0b       	sbc	r25, r25
     ca2:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     ca6:	2b 89       	ldd	r18, Y+19	; 0x13
     ca8:	3c 89       	ldd	r19, Y+20	; 0x14
     caa:	4d 89       	ldd	r20, Y+21	; 0x15
     cac:	5e 89       	ldd	r21, Y+22	; 0x16
     cae:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     cb2:	9b 01       	movw	r18, r22
     cb4:	ac 01       	movw	r20, r24
     cb6:	6f 89       	ldd	r22, Y+23	; 0x17
     cb8:	78 8d       	ldd	r23, Y+24	; 0x18
     cba:	89 8d       	ldd	r24, Y+25	; 0x19
     cbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cbe:	0e 94 f9 07 	call	0xff2	; 0xff2 <__addsf3>
     cc2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixsfsi>
     cc6:	6b 87       	std	Y+11, r22	; 0x0b
     cc8:	7c 87       	std	Y+12, r23	; 0x0c
     cca:	8d 87       	std	Y+13, r24	; 0x0d
     ccc:	9e 87       	std	Y+14, r25	; 0x0e
				if(T < 10000)
     cce:	60 31       	cpi	r22, 0x10	; 16
     cd0:	77 42       	sbci	r23, 0x27	; 39
     cd2:	81 05       	cpc	r24, r1
     cd4:	91 05       	cpc	r25, r1
     cd6:	0c f0       	brlt	.+2      	; 0xcda <__stack+0x1db>
     cd8:	68 c0       	rjmp	.+208    	; 0xdaa <__stack+0x2ab>
				{
					OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.001));
     cda:	a0 91 04 01 	lds	r26, 0x0104
     cde:	b0 91 05 01 	lds	r27, 0x0105
     ce2:	20 91 c2 03 	lds	r18, 0x03C2
     ce6:	30 91 c3 03 	lds	r19, 0x03C3
     cea:	40 91 c4 03 	lds	r20, 0x03C4
     cee:	50 91 c5 03 	lds	r21, 0x03C5
     cf2:	2b 8b       	std	Y+19, r18	; 0x13
     cf4:	3c 8b       	std	Y+20, r19	; 0x14
     cf6:	4d 8b       	std	Y+21, r20	; 0x15
     cf8:	5e 8b       	std	Y+22, r21	; 0x16
     cfa:	40 90 c6 03 	lds	r4, 0x03C6
     cfe:	50 90 c7 03 	lds	r5, 0x03C7
     d02:	60 90 c8 03 	lds	r6, 0x03C8
     d06:	70 90 c9 03 	lds	r7, 0x03C9
     d0a:	20 91 00 01 	lds	r18, 0x0100
     d0e:	30 91 01 01 	lds	r19, 0x0101
     d12:	40 91 02 01 	lds	r20, 0x0102
     d16:	50 91 03 01 	lds	r21, 0x0103
     d1a:	2f 8b       	std	Y+23, r18	; 0x17
     d1c:	38 8f       	std	Y+24, r19	; 0x18
     d1e:	49 8f       	std	Y+25, r20	; 0x19
     d20:	5a 8f       	std	Y+26, r21	; 0x1a
     d22:	a5 01       	movw	r20, r10
     d24:	94 01       	movw	r18, r8
     d26:	0e 94 a7 0b 	call	0x174e	; 0x174e <__mulshisi3>
     d2a:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     d2e:	6b 8f       	std	Y+27, r22	; 0x1b
     d30:	7c 8f       	std	Y+28, r23	; 0x1c
     d32:	8d 8f       	std	Y+29, r24	; 0x1d
     d34:	9e 8f       	std	Y+30, r25	; 0x1e
     d36:	6b 89       	ldd	r22, Y+19	; 0x13
     d38:	7c 89       	ldd	r23, Y+20	; 0x14
     d3a:	8d 89       	ldd	r24, Y+21	; 0x15
     d3c:	9e 89       	ldd	r25, Y+22	; 0x16
     d3e:	64 19       	sub	r22, r4
     d40:	75 09       	sbc	r23, r5
     d42:	86 09       	sbc	r24, r6
     d44:	97 09       	sbc	r25, r7
     d46:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     d4a:	2f e6       	ldi	r18, 0x6F	; 111
     d4c:	32 e1       	ldi	r19, 0x12	; 18
     d4e:	43 e8       	ldi	r20, 0x83	; 131
     d50:	5a e3       	ldi	r21, 0x3A	; 58
     d52:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     d56:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixsfsi>
     d5a:	9b 01       	movw	r18, r22
     d5c:	77 23       	and	r23, r23
     d5e:	24 f4       	brge	.+8      	; 0xd68 <__stack+0x269>
     d60:	22 27       	eor	r18, r18
     d62:	33 27       	eor	r19, r19
     d64:	26 1b       	sub	r18, r22
     d66:	37 0b       	sbc	r19, r23
     d68:	b9 01       	movw	r22, r18
     d6a:	33 0f       	add	r19, r19
     d6c:	88 0b       	sbc	r24, r24
     d6e:	99 0b       	sbc	r25, r25
     d70:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     d74:	2f 89       	ldd	r18, Y+23	; 0x17
     d76:	38 8d       	ldd	r19, Y+24	; 0x18
     d78:	49 8d       	ldd	r20, Y+25	; 0x19
     d7a:	5a 8d       	ldd	r21, Y+26	; 0x1a
     d7c:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
     d84:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d86:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d8c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__addsf3>
     d90:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fixunssfsi>
     d94:	aa e8       	ldi	r26, 0x8A	; 138
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	11 96       	adiw	r26, 0x01	; 1
     d9a:	7c 93       	st	X, r23
     d9c:	6e 93       	st	-X, r22
					PORTE |= (1<<PORTE2);
     d9e:	72 9a       	sbi	0x0e, 2	; 14
     da0:	26 01       	movw	r4, r12
     da2:	37 01       	movw	r6, r14
     da4:	01 e0       	ldi	r16, 0x01	; 1
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	a4 cc       	rjmp	.-1720   	; 0x6f2 <main+0x142>
				}
				else
				{
					OCR1B = 10000;
     daa:	20 e1       	ldi	r18, 0x10	; 16
     dac:	37 e2       	ldi	r19, 0x27	; 39
     dae:	ea e8       	ldi	r30, 0x8A	; 138
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	31 83       	std	Z+1, r19	; 0x01
     db4:	20 83       	st	Z, r18
					PORTE |= (1<<PORTE2);
     db6:	72 9a       	sbi	0x0e, 2	; 14
     db8:	26 01       	movw	r4, r12
     dba:	37 01       	movw	r6, r14
     dbc:	01 e0       	ldi	r16, 0x01	; 1
     dbe:	10 e0       	ldi	r17, 0x00	; 0
     dc0:	98 cc       	rjmp	.-1744   	; 0x6f2 <main+0x142>
				}

			}
			else if(global_counts_m2 < target_count)
     dc2:	8c 15       	cp	r24, r12
     dc4:	9d 05       	cpc	r25, r13
     dc6:	ae 05       	cpc	r26, r14
     dc8:	bf 05       	cpc	r27, r15
     dca:	0c f0       	brlt	.+2      	; 0xdce <__stack+0x2cf>
     dcc:	8e cc       	rjmp	.-1764   	; 0x6ea <main+0x13a>
			{
				itoa(abs((count_time2 - count_time1)/(0.001)),str,10);
     dce:	80 91 c2 03 	lds	r24, 0x03C2
     dd2:	90 91 c3 03 	lds	r25, 0x03C3
     dd6:	a0 91 c4 03 	lds	r26, 0x03C4
     dda:	b0 91 c5 03 	lds	r27, 0x03C5
     dde:	00 91 c6 03 	lds	r16, 0x03C6
     de2:	10 91 c7 03 	lds	r17, 0x03C7
     de6:	20 91 c8 03 	lds	r18, 0x03C8
     dea:	30 91 c9 03 	lds	r19, 0x03C9
     dee:	bc 01       	movw	r22, r24
     df0:	cd 01       	movw	r24, r26
     df2:	60 1b       	sub	r22, r16
     df4:	71 0b       	sbc	r23, r17
     df6:	82 0b       	sbc	r24, r18
     df8:	93 0b       	sbc	r25, r19
     dfa:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     dfe:	2f e6       	ldi	r18, 0x6F	; 111
     e00:	32 e1       	ldi	r19, 0x12	; 18
     e02:	43 e8       	ldi	r20, 0x83	; 131
     e04:	5a e3       	ldi	r21, 0x3A	; 58
     e06:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     e0a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixsfsi>
     e0e:	9b 01       	movw	r18, r22
     e10:	77 23       	and	r23, r23
     e12:	24 f4       	brge	.+8      	; 0xe1c <__stack+0x31d>
     e14:	22 27       	eor	r18, r18
     e16:	33 27       	eor	r19, r19
     e18:	26 1b       	sub	r18, r22
     e1a:	37 0b       	sbc	r19, r23
     e1c:	4a e0       	ldi	r20, 0x0A	; 10
     e1e:	be 01       	movw	r22, r28
     e20:	6f 5f       	subi	r22, 0xFF	; 255
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	c9 01       	movw	r24, r18
     e26:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__itoa_ncheck>
				uart_print(str);
     e2a:	ce 01       	movw	r24, r28
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
				uart_print( "\n" );
     e32:	8c e0       	ldi	r24, 0x0C	; 12
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
				T = error*Kp + Kd*abs((count_time2 - count_time1)/(0.001));
     e3a:	a0 91 04 01 	lds	r26, 0x0104
     e3e:	b0 91 05 01 	lds	r27, 0x0105
     e42:	20 91 c2 03 	lds	r18, 0x03C2
     e46:	30 91 c3 03 	lds	r19, 0x03C3
     e4a:	40 91 c4 03 	lds	r20, 0x03C4
     e4e:	50 91 c5 03 	lds	r21, 0x03C5
     e52:	2b 87       	std	Y+11, r18	; 0x0b
     e54:	3c 87       	std	Y+12, r19	; 0x0c
     e56:	4d 87       	std	Y+13, r20	; 0x0d
     e58:	5e 87       	std	Y+14, r21	; 0x0e
     e5a:	40 90 c6 03 	lds	r4, 0x03C6
     e5e:	50 90 c7 03 	lds	r5, 0x03C7
     e62:	60 90 c8 03 	lds	r6, 0x03C8
     e66:	70 90 c9 03 	lds	r7, 0x03C9
     e6a:	20 91 00 01 	lds	r18, 0x0100
     e6e:	30 91 01 01 	lds	r19, 0x0101
     e72:	40 91 02 01 	lds	r20, 0x0102
     e76:	50 91 03 01 	lds	r21, 0x0103
     e7a:	2b 8b       	std	Y+19, r18	; 0x13
     e7c:	3c 8b       	std	Y+20, r19	; 0x14
     e7e:	4d 8b       	std	Y+21, r20	; 0x15
     e80:	5e 8b       	std	Y+22, r21	; 0x16
     e82:	a5 01       	movw	r20, r10
     e84:	94 01       	movw	r18, r8
     e86:	0e 94 a7 0b 	call	0x174e	; 0x174e <__mulshisi3>
     e8a:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     e8e:	6f 8b       	std	Y+23, r22	; 0x17
     e90:	78 8f       	std	Y+24, r23	; 0x18
     e92:	89 8f       	std	Y+25, r24	; 0x19
     e94:	9a 8f       	std	Y+26, r25	; 0x1a
     e96:	6b 85       	ldd	r22, Y+11	; 0x0b
     e98:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9e:	64 19       	sub	r22, r4
     ea0:	75 09       	sbc	r23, r5
     ea2:	86 09       	sbc	r24, r6
     ea4:	97 09       	sbc	r25, r7
     ea6:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     eaa:	2f e6       	ldi	r18, 0x6F	; 111
     eac:	32 e1       	ldi	r19, 0x12	; 18
     eae:	43 e8       	ldi	r20, 0x83	; 131
     eb0:	5a e3       	ldi	r21, 0x3A	; 58
     eb2:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     eb6:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixsfsi>
     eba:	9b 01       	movw	r18, r22
     ebc:	77 23       	and	r23, r23
     ebe:	24 f4       	brge	.+8      	; 0xec8 <__stack+0x3c9>
     ec0:	22 27       	eor	r18, r18
     ec2:	33 27       	eor	r19, r19
     ec4:	26 1b       	sub	r18, r22
     ec6:	37 0b       	sbc	r19, r23
     ec8:	b9 01       	movw	r22, r18
     eca:	33 0f       	add	r19, r19
     ecc:	88 0b       	sbc	r24, r24
     ece:	99 0b       	sbc	r25, r25
     ed0:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     ed4:	2b 89       	ldd	r18, Y+19	; 0x13
     ed6:	3c 89       	ldd	r19, Y+20	; 0x14
     ed8:	4d 89       	ldd	r20, Y+21	; 0x15
     eda:	5e 89       	ldd	r21, Y+22	; 0x16
     edc:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     ee0:	9b 01       	movw	r18, r22
     ee2:	ac 01       	movw	r20, r24
     ee4:	6f 89       	ldd	r22, Y+23	; 0x17
     ee6:	78 8d       	ldd	r23, Y+24	; 0x18
     ee8:	89 8d       	ldd	r24, Y+25	; 0x19
     eea:	9a 8d       	ldd	r25, Y+26	; 0x1a
     eec:	0e 94 f9 07 	call	0xff2	; 0xff2 <__addsf3>
     ef0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixsfsi>
     ef4:	6b 87       	std	Y+11, r22	; 0x0b
     ef6:	7c 87       	std	Y+12, r23	; 0x0c
     ef8:	8d 87       	std	Y+13, r24	; 0x0d
     efa:	9e 87       	std	Y+14, r25	; 0x0e
				if(T < 10000)
     efc:	60 31       	cpi	r22, 0x10	; 16
     efe:	77 42       	sbci	r23, 0x27	; 39
     f00:	81 05       	cpc	r24, r1
     f02:	91 05       	cpc	r25, r1
     f04:	0c f0       	brlt	.+2      	; 0xf08 <__stack+0x409>
     f06:	68 c0       	rjmp	.+208    	; 0xfd8 <__stack+0x4d9>
				{
					OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.001));
     f08:	a0 91 04 01 	lds	r26, 0x0104
     f0c:	b0 91 05 01 	lds	r27, 0x0105
     f10:	20 91 c2 03 	lds	r18, 0x03C2
     f14:	30 91 c3 03 	lds	r19, 0x03C3
     f18:	40 91 c4 03 	lds	r20, 0x03C4
     f1c:	50 91 c5 03 	lds	r21, 0x03C5
     f20:	2b 8b       	std	Y+19, r18	; 0x13
     f22:	3c 8b       	std	Y+20, r19	; 0x14
     f24:	4d 8b       	std	Y+21, r20	; 0x15
     f26:	5e 8b       	std	Y+22, r21	; 0x16
     f28:	40 90 c6 03 	lds	r4, 0x03C6
     f2c:	50 90 c7 03 	lds	r5, 0x03C7
     f30:	60 90 c8 03 	lds	r6, 0x03C8
     f34:	70 90 c9 03 	lds	r7, 0x03C9
     f38:	20 91 00 01 	lds	r18, 0x0100
     f3c:	30 91 01 01 	lds	r19, 0x0101
     f40:	40 91 02 01 	lds	r20, 0x0102
     f44:	50 91 03 01 	lds	r21, 0x0103
     f48:	2f 8b       	std	Y+23, r18	; 0x17
     f4a:	38 8f       	std	Y+24, r19	; 0x18
     f4c:	49 8f       	std	Y+25, r20	; 0x19
     f4e:	5a 8f       	std	Y+26, r21	; 0x1a
     f50:	a5 01       	movw	r20, r10
     f52:	94 01       	movw	r18, r8
     f54:	0e 94 a7 0b 	call	0x174e	; 0x174e <__mulshisi3>
     f58:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     f5c:	6b 8f       	std	Y+27, r22	; 0x1b
     f5e:	7c 8f       	std	Y+28, r23	; 0x1c
     f60:	8d 8f       	std	Y+29, r24	; 0x1d
     f62:	9e 8f       	std	Y+30, r25	; 0x1e
     f64:	6b 89       	ldd	r22, Y+19	; 0x13
     f66:	7c 89       	ldd	r23, Y+20	; 0x14
     f68:	8d 89       	ldd	r24, Y+21	; 0x15
     f6a:	9e 89       	ldd	r25, Y+22	; 0x16
     f6c:	64 19       	sub	r22, r4
     f6e:	75 09       	sbc	r23, r5
     f70:	86 09       	sbc	r24, r6
     f72:	97 09       	sbc	r25, r7
     f74:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     f78:	2f e6       	ldi	r18, 0x6F	; 111
     f7a:	32 e1       	ldi	r19, 0x12	; 18
     f7c:	43 e8       	ldi	r20, 0x83	; 131
     f7e:	5a e3       	ldi	r21, 0x3A	; 58
     f80:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     f84:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixsfsi>
     f88:	9b 01       	movw	r18, r22
     f8a:	77 23       	and	r23, r23
     f8c:	24 f4       	brge	.+8      	; 0xf96 <__stack+0x497>
     f8e:	22 27       	eor	r18, r18
     f90:	33 27       	eor	r19, r19
     f92:	26 1b       	sub	r18, r22
     f94:	37 0b       	sbc	r19, r23
     f96:	b9 01       	movw	r22, r18
     f98:	33 0f       	add	r19, r19
     f9a:	88 0b       	sbc	r24, r24
     f9c:	99 0b       	sbc	r25, r25
     f9e:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
     fa2:	2f 89       	ldd	r18, Y+23	; 0x17
     fa4:	38 8d       	ldd	r19, Y+24	; 0x18
     fa6:	49 8d       	ldd	r20, Y+25	; 0x19
     fa8:	5a 8d       	ldd	r21, Y+26	; 0x1a
     faa:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     fae:	9b 01       	movw	r18, r22
     fb0:	ac 01       	movw	r20, r24
     fb2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     fb4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     fb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fba:	0e 94 f9 07 	call	0xff2	; 0xff2 <__addsf3>
     fbe:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fixunssfsi>
     fc2:	aa e8       	ldi	r26, 0x8A	; 138
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	7c 93       	st	X, r23
     fca:	6e 93       	st	-X, r22
					PORTE &= ~(1<<PORTE2);					
     fcc:	72 98       	cbi	0x0e, 2	; 14
     fce:	26 01       	movw	r4, r12
     fd0:	37 01       	movw	r6, r14
     fd2:	01 e0       	ldi	r16, 0x01	; 1
     fd4:	10 e0       	ldi	r17, 0x00	; 0
     fd6:	8d cb       	rjmp	.-2278   	; 0x6f2 <main+0x142>
				}
				else
				{
					OCR1B = 10000;
     fd8:	20 e1       	ldi	r18, 0x10	; 16
     fda:	37 e2       	ldi	r19, 0x27	; 39
     fdc:	ea e8       	ldi	r30, 0x8A	; 138
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	31 83       	std	Z+1, r19	; 0x01
     fe2:	20 83       	st	Z, r18
					PORTE &= ~(1<<PORTE2);					
     fe4:	72 98       	cbi	0x0e, 2	; 14
     fe6:	26 01       	movw	r4, r12
     fe8:	37 01       	movw	r6, r14
     fea:	01 e0       	ldi	r16, 0x01	; 1
     fec:	10 e0       	ldi	r17, 0x00	; 0
     fee:	81 cb       	rjmp	.-2302   	; 0x6f2 <main+0x142>

00000ff0 <__subsf3>:
     ff0:	50 58       	subi	r21, 0x80	; 128

00000ff2 <__addsf3>:
     ff2:	bb 27       	eor	r27, r27
     ff4:	aa 27       	eor	r26, r26
     ff6:	0e 94 10 08 	call	0x1020	; 0x1020 <__addsf3x>
     ffa:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__fp_round>
     ffe:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__fp_pscA>
    1002:	38 f0       	brcs	.+14     	; 0x1012 <__addsf3+0x20>
    1004:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__fp_pscB>
    1008:	20 f0       	brcs	.+8      	; 0x1012 <__addsf3+0x20>
    100a:	39 f4       	brne	.+14     	; 0x101a <__addsf3+0x28>
    100c:	9f 3f       	cpi	r25, 0xFF	; 255
    100e:	19 f4       	brne	.+6      	; 0x1016 <__addsf3+0x24>
    1010:	26 f4       	brtc	.+8      	; 0x101a <__addsf3+0x28>
    1012:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_nan>
    1016:	0e f4       	brtc	.+2      	; 0x101a <__addsf3+0x28>
    1018:	e0 95       	com	r30
    101a:	e7 fb       	bst	r30, 7
    101c:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_inf>

00001020 <__addsf3x>:
    1020:	e9 2f       	mov	r30, r25
    1022:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__fp_split3>
    1026:	58 f3       	brcs	.-42     	; 0xffe <__addsf3+0xc>
    1028:	ba 17       	cp	r27, r26
    102a:	62 07       	cpc	r22, r18
    102c:	73 07       	cpc	r23, r19
    102e:	84 07       	cpc	r24, r20
    1030:	95 07       	cpc	r25, r21
    1032:	20 f0       	brcs	.+8      	; 0x103c <__addsf3x+0x1c>
    1034:	79 f4       	brne	.+30     	; 0x1054 <__addsf3x+0x34>
    1036:	a6 f5       	brtc	.+104    	; 0x10a0 <__addsf3x+0x80>
    1038:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_zero>
    103c:	0e f4       	brtc	.+2      	; 0x1040 <__addsf3x+0x20>
    103e:	e0 95       	com	r30
    1040:	0b 2e       	mov	r0, r27
    1042:	ba 2f       	mov	r27, r26
    1044:	a0 2d       	mov	r26, r0
    1046:	0b 01       	movw	r0, r22
    1048:	b9 01       	movw	r22, r18
    104a:	90 01       	movw	r18, r0
    104c:	0c 01       	movw	r0, r24
    104e:	ca 01       	movw	r24, r20
    1050:	a0 01       	movw	r20, r0
    1052:	11 24       	eor	r1, r1
    1054:	ff 27       	eor	r31, r31
    1056:	59 1b       	sub	r21, r25
    1058:	99 f0       	breq	.+38     	; 0x1080 <__addsf3x+0x60>
    105a:	59 3f       	cpi	r21, 0xF9	; 249
    105c:	50 f4       	brcc	.+20     	; 0x1072 <__addsf3x+0x52>
    105e:	50 3e       	cpi	r21, 0xE0	; 224
    1060:	68 f1       	brcs	.+90     	; 0x10bc <__addsf3x+0x9c>
    1062:	1a 16       	cp	r1, r26
    1064:	f0 40       	sbci	r31, 0x00	; 0
    1066:	a2 2f       	mov	r26, r18
    1068:	23 2f       	mov	r18, r19
    106a:	34 2f       	mov	r19, r20
    106c:	44 27       	eor	r20, r20
    106e:	58 5f       	subi	r21, 0xF8	; 248
    1070:	f3 cf       	rjmp	.-26     	; 0x1058 <__addsf3x+0x38>
    1072:	46 95       	lsr	r20
    1074:	37 95       	ror	r19
    1076:	27 95       	ror	r18
    1078:	a7 95       	ror	r26
    107a:	f0 40       	sbci	r31, 0x00	; 0
    107c:	53 95       	inc	r21
    107e:	c9 f7       	brne	.-14     	; 0x1072 <__addsf3x+0x52>
    1080:	7e f4       	brtc	.+30     	; 0x10a0 <__addsf3x+0x80>
    1082:	1f 16       	cp	r1, r31
    1084:	ba 0b       	sbc	r27, r26
    1086:	62 0b       	sbc	r22, r18
    1088:	73 0b       	sbc	r23, r19
    108a:	84 0b       	sbc	r24, r20
    108c:	ba f0       	brmi	.+46     	; 0x10bc <__addsf3x+0x9c>
    108e:	91 50       	subi	r25, 0x01	; 1
    1090:	a1 f0       	breq	.+40     	; 0x10ba <__addsf3x+0x9a>
    1092:	ff 0f       	add	r31, r31
    1094:	bb 1f       	adc	r27, r27
    1096:	66 1f       	adc	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	c2 f7       	brpl	.-16     	; 0x108e <__addsf3x+0x6e>
    109e:	0e c0       	rjmp	.+28     	; 0x10bc <__addsf3x+0x9c>
    10a0:	ba 0f       	add	r27, r26
    10a2:	62 1f       	adc	r22, r18
    10a4:	73 1f       	adc	r23, r19
    10a6:	84 1f       	adc	r24, r20
    10a8:	48 f4       	brcc	.+18     	; 0x10bc <__addsf3x+0x9c>
    10aa:	87 95       	ror	r24
    10ac:	77 95       	ror	r23
    10ae:	67 95       	ror	r22
    10b0:	b7 95       	ror	r27
    10b2:	f7 95       	ror	r31
    10b4:	9e 3f       	cpi	r25, 0xFE	; 254
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__addsf3x+0x9a>
    10b8:	b0 cf       	rjmp	.-160    	; 0x101a <__addsf3+0x28>
    10ba:	93 95       	inc	r25
    10bc:	88 0f       	add	r24, r24
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <__addsf3x+0xa2>
    10c0:	99 27       	eor	r25, r25
    10c2:	ee 0f       	add	r30, r30
    10c4:	97 95       	ror	r25
    10c6:	87 95       	ror	r24
    10c8:	08 95       	ret

000010ca <__divsf3>:
    10ca:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__divsf3x>
    10ce:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__fp_round>
    10d2:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__fp_pscB>
    10d6:	58 f0       	brcs	.+22     	; 0x10ee <__divsf3+0x24>
    10d8:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__fp_pscA>
    10dc:	40 f0       	brcs	.+16     	; 0x10ee <__divsf3+0x24>
    10de:	29 f4       	brne	.+10     	; 0x10ea <__divsf3+0x20>
    10e0:	5f 3f       	cpi	r21, 0xFF	; 255
    10e2:	29 f0       	breq	.+10     	; 0x10ee <__divsf3+0x24>
    10e4:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_inf>
    10e8:	51 11       	cpse	r21, r1
    10ea:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_szero>
    10ee:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_nan>

000010f2 <__divsf3x>:
    10f2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__fp_split3>
    10f6:	68 f3       	brcs	.-38     	; 0x10d2 <__divsf3+0x8>

000010f8 <__divsf3_pse>:
    10f8:	99 23       	and	r25, r25
    10fa:	b1 f3       	breq	.-20     	; 0x10e8 <__divsf3+0x1e>
    10fc:	55 23       	and	r21, r21
    10fe:	91 f3       	breq	.-28     	; 0x10e4 <__divsf3+0x1a>
    1100:	95 1b       	sub	r25, r21
    1102:	55 0b       	sbc	r21, r21
    1104:	bb 27       	eor	r27, r27
    1106:	aa 27       	eor	r26, r26
    1108:	62 17       	cp	r22, r18
    110a:	73 07       	cpc	r23, r19
    110c:	84 07       	cpc	r24, r20
    110e:	38 f0       	brcs	.+14     	; 0x111e <__divsf3_pse+0x26>
    1110:	9f 5f       	subi	r25, 0xFF	; 255
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	44 1f       	adc	r20, r20
    111a:	aa 1f       	adc	r26, r26
    111c:	a9 f3       	breq	.-22     	; 0x1108 <__divsf3_pse+0x10>
    111e:	35 d0       	rcall	.+106    	; 0x118a <__divsf3_pse+0x92>
    1120:	0e 2e       	mov	r0, r30
    1122:	3a f0       	brmi	.+14     	; 0x1132 <__divsf3_pse+0x3a>
    1124:	e0 e8       	ldi	r30, 0x80	; 128
    1126:	32 d0       	rcall	.+100    	; 0x118c <__divsf3_pse+0x94>
    1128:	91 50       	subi	r25, 0x01	; 1
    112a:	50 40       	sbci	r21, 0x00	; 0
    112c:	e6 95       	lsr	r30
    112e:	00 1c       	adc	r0, r0
    1130:	ca f7       	brpl	.-14     	; 0x1124 <__divsf3_pse+0x2c>
    1132:	2b d0       	rcall	.+86     	; 0x118a <__divsf3_pse+0x92>
    1134:	fe 2f       	mov	r31, r30
    1136:	29 d0       	rcall	.+82     	; 0x118a <__divsf3_pse+0x92>
    1138:	66 0f       	add	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	bb 1f       	adc	r27, r27
    1140:	26 17       	cp	r18, r22
    1142:	37 07       	cpc	r19, r23
    1144:	48 07       	cpc	r20, r24
    1146:	ab 07       	cpc	r26, r27
    1148:	b0 e8       	ldi	r27, 0x80	; 128
    114a:	09 f0       	breq	.+2      	; 0x114e <__divsf3_pse+0x56>
    114c:	bb 0b       	sbc	r27, r27
    114e:	80 2d       	mov	r24, r0
    1150:	bf 01       	movw	r22, r30
    1152:	ff 27       	eor	r31, r31
    1154:	93 58       	subi	r25, 0x83	; 131
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
    1158:	3a f0       	brmi	.+14     	; 0x1168 <__divsf3_pse+0x70>
    115a:	9e 3f       	cpi	r25, 0xFE	; 254
    115c:	51 05       	cpc	r21, r1
    115e:	78 f0       	brcs	.+30     	; 0x117e <__divsf3_pse+0x86>
    1160:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_inf>
    1164:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_szero>
    1168:	5f 3f       	cpi	r21, 0xFF	; 255
    116a:	e4 f3       	brlt	.-8      	; 0x1164 <__divsf3_pse+0x6c>
    116c:	98 3e       	cpi	r25, 0xE8	; 232
    116e:	d4 f3       	brlt	.-12     	; 0x1164 <__divsf3_pse+0x6c>
    1170:	86 95       	lsr	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b7 95       	ror	r27
    1178:	f7 95       	ror	r31
    117a:	9f 5f       	subi	r25, 0xFF	; 255
    117c:	c9 f7       	brne	.-14     	; 0x1170 <__divsf3_pse+0x78>
    117e:	88 0f       	add	r24, r24
    1180:	91 1d       	adc	r25, r1
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	97 f9       	bld	r25, 7
    1188:	08 95       	ret
    118a:	e1 e0       	ldi	r30, 0x01	; 1
    118c:	66 0f       	add	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	88 1f       	adc	r24, r24
    1192:	bb 1f       	adc	r27, r27
    1194:	62 17       	cp	r22, r18
    1196:	73 07       	cpc	r23, r19
    1198:	84 07       	cpc	r24, r20
    119a:	ba 07       	cpc	r27, r26
    119c:	20 f0       	brcs	.+8      	; 0x11a6 <__divsf3_pse+0xae>
    119e:	62 1b       	sub	r22, r18
    11a0:	73 0b       	sbc	r23, r19
    11a2:	84 0b       	sbc	r24, r20
    11a4:	ba 0b       	sbc	r27, r26
    11a6:	ee 1f       	adc	r30, r30
    11a8:	88 f7       	brcc	.-30     	; 0x118c <__divsf3_pse+0x94>
    11aa:	e0 95       	com	r30
    11ac:	08 95       	ret

000011ae <__fixsfsi>:
    11ae:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fixunssfsi>
    11b2:	68 94       	set
    11b4:	b1 11       	cpse	r27, r1
    11b6:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_szero>
    11ba:	08 95       	ret

000011bc <__fixunssfsi>:
    11bc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__fp_splitA>
    11c0:	88 f0       	brcs	.+34     	; 0x11e4 <__fixunssfsi+0x28>
    11c2:	9f 57       	subi	r25, 0x7F	; 127
    11c4:	98 f0       	brcs	.+38     	; 0x11ec <__fixunssfsi+0x30>
    11c6:	b9 2f       	mov	r27, r25
    11c8:	99 27       	eor	r25, r25
    11ca:	b7 51       	subi	r27, 0x17	; 23
    11cc:	b0 f0       	brcs	.+44     	; 0x11fa <__fixunssfsi+0x3e>
    11ce:	e1 f0       	breq	.+56     	; 0x1208 <__fixunssfsi+0x4c>
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	88 1f       	adc	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	1a f0       	brmi	.+6      	; 0x11e0 <__fixunssfsi+0x24>
    11da:	ba 95       	dec	r27
    11dc:	c9 f7       	brne	.-14     	; 0x11d0 <__fixunssfsi+0x14>
    11de:	14 c0       	rjmp	.+40     	; 0x1208 <__fixunssfsi+0x4c>
    11e0:	b1 30       	cpi	r27, 0x01	; 1
    11e2:	91 f0       	breq	.+36     	; 0x1208 <__fixunssfsi+0x4c>
    11e4:	0e 94 94 09 	call	0x1328	; 0x1328 <__fp_zero>
    11e8:	b1 e0       	ldi	r27, 0x01	; 1
    11ea:	08 95       	ret
    11ec:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_zero>
    11f0:	67 2f       	mov	r22, r23
    11f2:	78 2f       	mov	r23, r24
    11f4:	88 27       	eor	r24, r24
    11f6:	b8 5f       	subi	r27, 0xF8	; 248
    11f8:	39 f0       	breq	.+14     	; 0x1208 <__fixunssfsi+0x4c>
    11fa:	b9 3f       	cpi	r27, 0xF9	; 249
    11fc:	cc f3       	brlt	.-14     	; 0x11f0 <__fixunssfsi+0x34>
    11fe:	86 95       	lsr	r24
    1200:	77 95       	ror	r23
    1202:	67 95       	ror	r22
    1204:	b3 95       	inc	r27
    1206:	d9 f7       	brne	.-10     	; 0x11fe <__fixunssfsi+0x42>
    1208:	3e f4       	brtc	.+14     	; 0x1218 <__fixunssfsi+0x5c>
    120a:	90 95       	com	r25
    120c:	80 95       	com	r24
    120e:	70 95       	com	r23
    1210:	61 95       	neg	r22
    1212:	7f 4f       	sbci	r23, 0xFF	; 255
    1214:	8f 4f       	sbci	r24, 0xFF	; 255
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	08 95       	ret

0000121a <__floatunsisf>:
    121a:	e8 94       	clt
    121c:	09 c0       	rjmp	.+18     	; 0x1230 <__floatsisf+0x12>

0000121e <__floatsisf>:
    121e:	97 fb       	bst	r25, 7
    1220:	3e f4       	brtc	.+14     	; 0x1230 <__floatsisf+0x12>
    1222:	90 95       	com	r25
    1224:	80 95       	com	r24
    1226:	70 95       	com	r23
    1228:	61 95       	neg	r22
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	99 23       	and	r25, r25
    1232:	a9 f0       	breq	.+42     	; 0x125e <__floatsisf+0x40>
    1234:	f9 2f       	mov	r31, r25
    1236:	96 e9       	ldi	r25, 0x96	; 150
    1238:	bb 27       	eor	r27, r27
    123a:	93 95       	inc	r25
    123c:	f6 95       	lsr	r31
    123e:	87 95       	ror	r24
    1240:	77 95       	ror	r23
    1242:	67 95       	ror	r22
    1244:	b7 95       	ror	r27
    1246:	f1 11       	cpse	r31, r1
    1248:	f8 cf       	rjmp	.-16     	; 0x123a <__floatsisf+0x1c>
    124a:	fa f4       	brpl	.+62     	; 0x128a <__floatsisf+0x6c>
    124c:	bb 0f       	add	r27, r27
    124e:	11 f4       	brne	.+4      	; 0x1254 <__floatsisf+0x36>
    1250:	60 ff       	sbrs	r22, 0
    1252:	1b c0       	rjmp	.+54     	; 0x128a <__floatsisf+0x6c>
    1254:	6f 5f       	subi	r22, 0xFF	; 255
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	8f 4f       	sbci	r24, 0xFF	; 255
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	16 c0       	rjmp	.+44     	; 0x128a <__floatsisf+0x6c>
    125e:	88 23       	and	r24, r24
    1260:	11 f0       	breq	.+4      	; 0x1266 <__floatsisf+0x48>
    1262:	96 e9       	ldi	r25, 0x96	; 150
    1264:	11 c0       	rjmp	.+34     	; 0x1288 <__floatsisf+0x6a>
    1266:	77 23       	and	r23, r23
    1268:	21 f0       	breq	.+8      	; 0x1272 <__floatsisf+0x54>
    126a:	9e e8       	ldi	r25, 0x8E	; 142
    126c:	87 2f       	mov	r24, r23
    126e:	76 2f       	mov	r23, r22
    1270:	05 c0       	rjmp	.+10     	; 0x127c <__floatsisf+0x5e>
    1272:	66 23       	and	r22, r22
    1274:	71 f0       	breq	.+28     	; 0x1292 <__floatsisf+0x74>
    1276:	96 e8       	ldi	r25, 0x86	; 134
    1278:	86 2f       	mov	r24, r22
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	2a f0       	brmi	.+10     	; 0x128a <__floatsisf+0x6c>
    1280:	9a 95       	dec	r25
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	da f7       	brpl	.-10     	; 0x1280 <__floatsisf+0x62>
    128a:	88 0f       	add	r24, r24
    128c:	96 95       	lsr	r25
    128e:	87 95       	ror	r24
    1290:	97 f9       	bld	r25, 7
    1292:	08 95       	ret

00001294 <__fp_inf>:
    1294:	97 f9       	bld	r25, 7
    1296:	9f 67       	ori	r25, 0x7F	; 127
    1298:	80 e8       	ldi	r24, 0x80	; 128
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	08 95       	ret

000012a0 <__fp_nan>:
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	80 ec       	ldi	r24, 0xC0	; 192
    12a4:	08 95       	ret

000012a6 <__fp_pscA>:
    12a6:	00 24       	eor	r0, r0
    12a8:	0a 94       	dec	r0
    12aa:	16 16       	cp	r1, r22
    12ac:	17 06       	cpc	r1, r23
    12ae:	18 06       	cpc	r1, r24
    12b0:	09 06       	cpc	r0, r25
    12b2:	08 95       	ret

000012b4 <__fp_pscB>:
    12b4:	00 24       	eor	r0, r0
    12b6:	0a 94       	dec	r0
    12b8:	12 16       	cp	r1, r18
    12ba:	13 06       	cpc	r1, r19
    12bc:	14 06       	cpc	r1, r20
    12be:	05 06       	cpc	r0, r21
    12c0:	08 95       	ret

000012c2 <__fp_round>:
    12c2:	09 2e       	mov	r0, r25
    12c4:	03 94       	inc	r0
    12c6:	00 0c       	add	r0, r0
    12c8:	11 f4       	brne	.+4      	; 0x12ce <__fp_round+0xc>
    12ca:	88 23       	and	r24, r24
    12cc:	52 f0       	brmi	.+20     	; 0x12e2 <__fp_round+0x20>
    12ce:	bb 0f       	add	r27, r27
    12d0:	40 f4       	brcc	.+16     	; 0x12e2 <__fp_round+0x20>
    12d2:	bf 2b       	or	r27, r31
    12d4:	11 f4       	brne	.+4      	; 0x12da <__fp_round+0x18>
    12d6:	60 ff       	sbrs	r22, 0
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <__fp_round+0x20>
    12da:	6f 5f       	subi	r22, 0xFF	; 255
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	08 95       	ret

000012e4 <__fp_split3>:
    12e4:	57 fd       	sbrc	r21, 7
    12e6:	90 58       	subi	r25, 0x80	; 128
    12e8:	44 0f       	add	r20, r20
    12ea:	55 1f       	adc	r21, r21
    12ec:	59 f0       	breq	.+22     	; 0x1304 <__fp_splitA+0x10>
    12ee:	5f 3f       	cpi	r21, 0xFF	; 255
    12f0:	71 f0       	breq	.+28     	; 0x130e <__fp_splitA+0x1a>
    12f2:	47 95       	ror	r20

000012f4 <__fp_splitA>:
    12f4:	88 0f       	add	r24, r24
    12f6:	97 fb       	bst	r25, 7
    12f8:	99 1f       	adc	r25, r25
    12fa:	61 f0       	breq	.+24     	; 0x1314 <__fp_splitA+0x20>
    12fc:	9f 3f       	cpi	r25, 0xFF	; 255
    12fe:	79 f0       	breq	.+30     	; 0x131e <__fp_splitA+0x2a>
    1300:	87 95       	ror	r24
    1302:	08 95       	ret
    1304:	12 16       	cp	r1, r18
    1306:	13 06       	cpc	r1, r19
    1308:	14 06       	cpc	r1, r20
    130a:	55 1f       	adc	r21, r21
    130c:	f2 cf       	rjmp	.-28     	; 0x12f2 <__fp_split3+0xe>
    130e:	46 95       	lsr	r20
    1310:	f1 df       	rcall	.-30     	; 0x12f4 <__fp_splitA>
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <__fp_splitA+0x30>
    1314:	16 16       	cp	r1, r22
    1316:	17 06       	cpc	r1, r23
    1318:	18 06       	cpc	r1, r24
    131a:	99 1f       	adc	r25, r25
    131c:	f1 cf       	rjmp	.-30     	; 0x1300 <__fp_splitA+0xc>
    131e:	86 95       	lsr	r24
    1320:	71 05       	cpc	r23, r1
    1322:	61 05       	cpc	r22, r1
    1324:	08 94       	sec
    1326:	08 95       	ret

00001328 <__fp_zero>:
    1328:	e8 94       	clt

0000132a <__fp_szero>:
    132a:	bb 27       	eor	r27, r27
    132c:	66 27       	eor	r22, r22
    132e:	77 27       	eor	r23, r23
    1330:	cb 01       	movw	r24, r22
    1332:	97 f9       	bld	r25, 7
    1334:	08 95       	ret

00001336 <__mulsf3>:
    1336:	0e 94 ae 09 	call	0x135c	; 0x135c <__mulsf3x>
    133a:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__fp_round>
    133e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__fp_pscA>
    1342:	38 f0       	brcs	.+14     	; 0x1352 <__mulsf3+0x1c>
    1344:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__fp_pscB>
    1348:	20 f0       	brcs	.+8      	; 0x1352 <__mulsf3+0x1c>
    134a:	95 23       	and	r25, r21
    134c:	11 f0       	breq	.+4      	; 0x1352 <__mulsf3+0x1c>
    134e:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_inf>
    1352:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_nan>
    1356:	11 24       	eor	r1, r1
    1358:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_szero>

0000135c <__mulsf3x>:
    135c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__fp_split3>
    1360:	70 f3       	brcs	.-36     	; 0x133e <__mulsf3+0x8>

00001362 <__mulsf3_pse>:
    1362:	95 9f       	mul	r25, r21
    1364:	c1 f3       	breq	.-16     	; 0x1356 <__mulsf3+0x20>
    1366:	95 0f       	add	r25, r21
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	55 1f       	adc	r21, r21
    136c:	62 9f       	mul	r22, r18
    136e:	f0 01       	movw	r30, r0
    1370:	72 9f       	mul	r23, r18
    1372:	bb 27       	eor	r27, r27
    1374:	f0 0d       	add	r31, r0
    1376:	b1 1d       	adc	r27, r1
    1378:	63 9f       	mul	r22, r19
    137a:	aa 27       	eor	r26, r26
    137c:	f0 0d       	add	r31, r0
    137e:	b1 1d       	adc	r27, r1
    1380:	aa 1f       	adc	r26, r26
    1382:	64 9f       	mul	r22, r20
    1384:	66 27       	eor	r22, r22
    1386:	b0 0d       	add	r27, r0
    1388:	a1 1d       	adc	r26, r1
    138a:	66 1f       	adc	r22, r22
    138c:	82 9f       	mul	r24, r18
    138e:	22 27       	eor	r18, r18
    1390:	b0 0d       	add	r27, r0
    1392:	a1 1d       	adc	r26, r1
    1394:	62 1f       	adc	r22, r18
    1396:	73 9f       	mul	r23, r19
    1398:	b0 0d       	add	r27, r0
    139a:	a1 1d       	adc	r26, r1
    139c:	62 1f       	adc	r22, r18
    139e:	83 9f       	mul	r24, r19
    13a0:	a0 0d       	add	r26, r0
    13a2:	61 1d       	adc	r22, r1
    13a4:	22 1f       	adc	r18, r18
    13a6:	74 9f       	mul	r23, r20
    13a8:	33 27       	eor	r19, r19
    13aa:	a0 0d       	add	r26, r0
    13ac:	61 1d       	adc	r22, r1
    13ae:	23 1f       	adc	r18, r19
    13b0:	84 9f       	mul	r24, r20
    13b2:	60 0d       	add	r22, r0
    13b4:	21 1d       	adc	r18, r1
    13b6:	82 2f       	mov	r24, r18
    13b8:	76 2f       	mov	r23, r22
    13ba:	6a 2f       	mov	r22, r26
    13bc:	11 24       	eor	r1, r1
    13be:	9f 57       	subi	r25, 0x7F	; 127
    13c0:	50 40       	sbci	r21, 0x00	; 0
    13c2:	9a f0       	brmi	.+38     	; 0x13ea <__mulsf3_pse+0x88>
    13c4:	f1 f0       	breq	.+60     	; 0x1402 <__mulsf3_pse+0xa0>
    13c6:	88 23       	and	r24, r24
    13c8:	4a f0       	brmi	.+18     	; 0x13dc <__mulsf3_pse+0x7a>
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	bb 1f       	adc	r27, r27
    13d0:	66 1f       	adc	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	91 50       	subi	r25, 0x01	; 1
    13d8:	50 40       	sbci	r21, 0x00	; 0
    13da:	a9 f7       	brne	.-22     	; 0x13c6 <__mulsf3_pse+0x64>
    13dc:	9e 3f       	cpi	r25, 0xFE	; 254
    13de:	51 05       	cpc	r21, r1
    13e0:	80 f0       	brcs	.+32     	; 0x1402 <__mulsf3_pse+0xa0>
    13e2:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_inf>
    13e6:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_szero>
    13ea:	5f 3f       	cpi	r21, 0xFF	; 255
    13ec:	e4 f3       	brlt	.-8      	; 0x13e6 <__mulsf3_pse+0x84>
    13ee:	98 3e       	cpi	r25, 0xE8	; 232
    13f0:	d4 f3       	brlt	.-12     	; 0x13e6 <__mulsf3_pse+0x84>
    13f2:	86 95       	lsr	r24
    13f4:	77 95       	ror	r23
    13f6:	67 95       	ror	r22
    13f8:	b7 95       	ror	r27
    13fa:	f7 95       	ror	r31
    13fc:	e7 95       	ror	r30
    13fe:	9f 5f       	subi	r25, 0xFF	; 255
    1400:	c1 f7       	brne	.-16     	; 0x13f2 <__mulsf3_pse+0x90>
    1402:	fe 2b       	or	r31, r30
    1404:	88 0f       	add	r24, r24
    1406:	91 1d       	adc	r25, r1
    1408:	96 95       	lsr	r25
    140a:	87 95       	ror	r24
    140c:	97 f9       	bld	r25, 7
    140e:	08 95       	ret

00001410 <pow>:
    1410:	fa 01       	movw	r30, r20
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	30 96       	adiw	r30, 0x00	; 0
    1418:	21 05       	cpc	r18, r1
    141a:	31 05       	cpc	r19, r1
    141c:	a1 f1       	breq	.+104    	; 0x1486 <pow+0x76>
    141e:	61 15       	cp	r22, r1
    1420:	71 05       	cpc	r23, r1
    1422:	61 f4       	brne	.+24     	; 0x143c <pow+0x2c>
    1424:	80 38       	cpi	r24, 0x80	; 128
    1426:	bf e3       	ldi	r27, 0x3F	; 63
    1428:	9b 07       	cpc	r25, r27
    142a:	49 f1       	breq	.+82     	; 0x147e <pow+0x6e>
    142c:	68 94       	set
    142e:	90 38       	cpi	r25, 0x80	; 128
    1430:	81 05       	cpc	r24, r1
    1432:	61 f0       	breq	.+24     	; 0x144c <pow+0x3c>
    1434:	80 38       	cpi	r24, 0x80	; 128
    1436:	bf ef       	ldi	r27, 0xFF	; 255
    1438:	9b 07       	cpc	r25, r27
    143a:	41 f0       	breq	.+16     	; 0x144c <pow+0x3c>
    143c:	99 23       	and	r25, r25
    143e:	4a f5       	brpl	.+82     	; 0x1492 <pow+0x82>
    1440:	ff 3f       	cpi	r31, 0xFF	; 255
    1442:	e1 05       	cpc	r30, r1
    1444:	31 05       	cpc	r19, r1
    1446:	21 05       	cpc	r18, r1
    1448:	19 f1       	breq	.+70     	; 0x1490 <pow+0x80>
    144a:	e8 94       	clt
    144c:	08 94       	sec
    144e:	e7 95       	ror	r30
    1450:	d9 01       	movw	r26, r18
    1452:	aa 23       	and	r26, r26
    1454:	29 f4       	brne	.+10     	; 0x1460 <pow+0x50>
    1456:	ab 2f       	mov	r26, r27
    1458:	be 2f       	mov	r27, r30
    145a:	f8 5f       	subi	r31, 0xF8	; 248
    145c:	d0 f3       	brcs	.-12     	; 0x1452 <pow+0x42>
    145e:	10 c0       	rjmp	.+32     	; 0x1480 <pow+0x70>
    1460:	ff 5f       	subi	r31, 0xFF	; 255
    1462:	70 f4       	brcc	.+28     	; 0x1480 <pow+0x70>
    1464:	a6 95       	lsr	r26
    1466:	e0 f7       	brcc	.-8      	; 0x1460 <pow+0x50>
    1468:	f7 39       	cpi	r31, 0x97	; 151
    146a:	50 f0       	brcs	.+20     	; 0x1480 <pow+0x70>
    146c:	19 f0       	breq	.+6      	; 0x1474 <pow+0x64>
    146e:	ff 3a       	cpi	r31, 0xAF	; 175
    1470:	38 f4       	brcc	.+14     	; 0x1480 <pow+0x70>
    1472:	9f 77       	andi	r25, 0x7F	; 127
    1474:	9f 93       	push	r25
    1476:	0d d0       	rcall	.+26     	; 0x1492 <pow+0x82>
    1478:	0f 90       	pop	r0
    147a:	07 fc       	sbrc	r0, 7
    147c:	90 58       	subi	r25, 0x80	; 128
    147e:	08 95       	ret
    1480:	46 f0       	brts	.+16     	; 0x1492 <pow+0x82>
    1482:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_nan>
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	80 e8       	ldi	r24, 0x80	; 128
    148c:	9f e3       	ldi	r25, 0x3F	; 63
    148e:	08 95       	ret
    1490:	4f e7       	ldi	r20, 0x7F	; 127
    1492:	9f 77       	andi	r25, 0x7F	; 127
    1494:	5f 93       	push	r21
    1496:	4f 93       	push	r20
    1498:	3f 93       	push	r19
    149a:	2f 93       	push	r18
    149c:	0e 94 03 0b 	call	0x1606	; 0x1606 <log>
    14a0:	2f 91       	pop	r18
    14a2:	3f 91       	pop	r19
    14a4:	4f 91       	pop	r20
    14a6:	5f 91       	pop	r21
    14a8:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
    14ac:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <exp>
    14b0:	29 f4       	brne	.+10     	; 0x14bc <pow+0xac>
    14b2:	16 f0       	brts	.+4      	; 0x14b8 <pow+0xa8>
    14b4:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_inf>
    14b8:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_zero>
    14bc:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_nan>

000014c0 <exp>:
    14c0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__fp_splitA>
    14c4:	a8 f3       	brcs	.-22     	; 0x14b0 <pow+0xa0>
    14c6:	96 38       	cpi	r25, 0x86	; 134
    14c8:	a0 f7       	brcc	.-24     	; 0x14b2 <pow+0xa2>
    14ca:	07 f8       	bld	r0, 7
    14cc:	0f 92       	push	r0
    14ce:	e8 94       	clt
    14d0:	2b e3       	ldi	r18, 0x3B	; 59
    14d2:	3a ea       	ldi	r19, 0xAA	; 170
    14d4:	48 eb       	ldi	r20, 0xB8	; 184
    14d6:	5f e7       	ldi	r21, 0x7F	; 127
    14d8:	0e 94 b1 09 	call	0x1362	; 0x1362 <__mulsf3_pse>
    14dc:	0f 92       	push	r0
    14de:	0f 92       	push	r0
    14e0:	0f 92       	push	r0
    14e2:	4d b7       	in	r20, 0x3d	; 61
    14e4:	5e b7       	in	r21, 0x3e	; 62
    14e6:	0f 92       	push	r0
    14e8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <modf>
    14ec:	ee e0       	ldi	r30, 0x0E	; 14
    14ee:	f1 e0       	ldi	r31, 0x01	; 1
    14f0:	0e 94 92 0a 	call	0x1524	; 0x1524 <__fp_powser>
    14f4:	4f 91       	pop	r20
    14f6:	5f 91       	pop	r21
    14f8:	ef 91       	pop	r30
    14fa:	ff 91       	pop	r31
    14fc:	e5 95       	asr	r30
    14fe:	ee 1f       	adc	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	49 f0       	breq	.+18     	; 0x1516 <exp+0x56>
    1504:	fe 57       	subi	r31, 0x7E	; 126
    1506:	e0 68       	ori	r30, 0x80	; 128
    1508:	44 27       	eor	r20, r20
    150a:	ee 0f       	add	r30, r30
    150c:	44 1f       	adc	r20, r20
    150e:	fa 95       	dec	r31
    1510:	e1 f7       	brne	.-8      	; 0x150a <exp+0x4a>
    1512:	41 95       	neg	r20
    1514:	55 0b       	sbc	r21, r21
    1516:	0e 94 c5 0a 	call	0x158a	; 0x158a <ldexp>
    151a:	0f 90       	pop	r0
    151c:	07 fe       	sbrs	r0, 7
    151e:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <inverse>
    1522:	08 95       	ret

00001524 <__fp_powser>:
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	1f 93       	push	r17
    152a:	0f 93       	push	r16
    152c:	ff 92       	push	r15
    152e:	ef 92       	push	r14
    1530:	df 92       	push	r13
    1532:	7b 01       	movw	r14, r22
    1534:	8c 01       	movw	r16, r24
    1536:	68 94       	set
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <__fp_powser+0x22>
    153a:	da 2e       	mov	r13, r26
    153c:	ef 01       	movw	r28, r30
    153e:	0e 94 ae 09 	call	0x135c	; 0x135c <__mulsf3x>
    1542:	fe 01       	movw	r30, r28
    1544:	e8 94       	clt
    1546:	a5 91       	lpm	r26, Z+
    1548:	25 91       	lpm	r18, Z+
    154a:	35 91       	lpm	r19, Z+
    154c:	45 91       	lpm	r20, Z+
    154e:	55 91       	lpm	r21, Z+
    1550:	a6 f3       	brts	.-24     	; 0x153a <__fp_powser+0x16>
    1552:	ef 01       	movw	r28, r30
    1554:	0e 94 10 08 	call	0x1020	; 0x1020 <__addsf3x>
    1558:	fe 01       	movw	r30, r28
    155a:	97 01       	movw	r18, r14
    155c:	a8 01       	movw	r20, r16
    155e:	da 94       	dec	r13
    1560:	69 f7       	brne	.-38     	; 0x153c <__fp_powser+0x18>
    1562:	df 90       	pop	r13
    1564:	ef 90       	pop	r14
    1566:	ff 90       	pop	r15
    1568:	0f 91       	pop	r16
    156a:	1f 91       	pop	r17
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <inverse>:
    1572:	9b 01       	movw	r18, r22
    1574:	ac 01       	movw	r20, r24
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	80 e8       	ldi	r24, 0x80	; 128
    157c:	9f e3       	ldi	r25, 0x3F	; 63
    157e:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__divsf3>
    1582:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_inf>
    1586:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__fp_mpack>

0000158a <ldexp>:
    158a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__fp_splitA>
    158e:	d8 f3       	brcs	.-10     	; 0x1586 <inverse+0x14>
    1590:	99 23       	and	r25, r25
    1592:	c9 f3       	breq	.-14     	; 0x1586 <inverse+0x14>
    1594:	94 0f       	add	r25, r20
    1596:	51 1d       	adc	r21, r1
    1598:	a3 f3       	brvs	.-24     	; 0x1582 <inverse+0x10>
    159a:	91 50       	subi	r25, 0x01	; 1
    159c:	50 40       	sbci	r21, 0x00	; 0
    159e:	94 f0       	brlt	.+36     	; 0x15c4 <ldexp+0x3a>
    15a0:	59 f0       	breq	.+22     	; 0x15b8 <ldexp+0x2e>
    15a2:	88 23       	and	r24, r24
    15a4:	32 f0       	brmi	.+12     	; 0x15b2 <ldexp+0x28>
    15a6:	66 0f       	add	r22, r22
    15a8:	77 1f       	adc	r23, r23
    15aa:	88 1f       	adc	r24, r24
    15ac:	91 50       	subi	r25, 0x01	; 1
    15ae:	50 40       	sbci	r21, 0x00	; 0
    15b0:	c1 f7       	brne	.-16     	; 0x15a2 <ldexp+0x18>
    15b2:	9e 3f       	cpi	r25, 0xFE	; 254
    15b4:	51 05       	cpc	r21, r1
    15b6:	2c f7       	brge	.-54     	; 0x1582 <inverse+0x10>
    15b8:	88 0f       	add	r24, r24
    15ba:	91 1d       	adc	r25, r1
    15bc:	96 95       	lsr	r25
    15be:	87 95       	ror	r24
    15c0:	97 f9       	bld	r25, 7
    15c2:	08 95       	ret
    15c4:	5f 3f       	cpi	r21, 0xFF	; 255
    15c6:	ac f0       	brlt	.+42     	; 0x15f2 <ldexp+0x68>
    15c8:	98 3e       	cpi	r25, 0xE8	; 232
    15ca:	9c f0       	brlt	.+38     	; 0x15f2 <ldexp+0x68>
    15cc:	bb 27       	eor	r27, r27
    15ce:	86 95       	lsr	r24
    15d0:	77 95       	ror	r23
    15d2:	67 95       	ror	r22
    15d4:	b7 95       	ror	r27
    15d6:	08 f4       	brcc	.+2      	; 0x15da <ldexp+0x50>
    15d8:	b1 60       	ori	r27, 0x01	; 1
    15da:	93 95       	inc	r25
    15dc:	c1 f7       	brne	.-16     	; 0x15ce <ldexp+0x44>
    15de:	bb 0f       	add	r27, r27
    15e0:	58 f7       	brcc	.-42     	; 0x15b8 <ldexp+0x2e>
    15e2:	11 f4       	brne	.+4      	; 0x15e8 <ldexp+0x5e>
    15e4:	60 ff       	sbrs	r22, 0
    15e6:	e8 cf       	rjmp	.-48     	; 0x15b8 <ldexp+0x2e>
    15e8:	6f 5f       	subi	r22, 0xFF	; 255
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	8f 4f       	sbci	r24, 0xFF	; 255
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	e3 cf       	rjmp	.-58     	; 0x15b8 <ldexp+0x2e>
    15f2:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_szero>
    15f6:	16 f0       	brts	.+4      	; 0x15fc <ldexp+0x72>
    15f8:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__fp_mpack>
    15fc:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_nan>
    1600:	68 94       	set
    1602:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_inf>

00001606 <log>:
    1606:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__fp_splitA>
    160a:	a8 f3       	brcs	.-22     	; 0x15f6 <ldexp+0x6c>
    160c:	99 23       	and	r25, r25
    160e:	c1 f3       	breq	.-16     	; 0x1600 <ldexp+0x76>
    1610:	ae f3       	brts	.-22     	; 0x15fc <ldexp+0x72>
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	1f 93       	push	r17
    1618:	0f 93       	push	r16
    161a:	ff 92       	push	r15
    161c:	c9 2f       	mov	r28, r25
    161e:	dd 27       	eor	r29, r29
    1620:	88 23       	and	r24, r24
    1622:	2a f0       	brmi	.+10     	; 0x162e <log+0x28>
    1624:	21 97       	sbiw	r28, 0x01	; 1
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	88 1f       	adc	r24, r24
    162c:	da f7       	brpl	.-10     	; 0x1624 <log+0x1e>
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f eb       	ldi	r21, 0xBF	; 191
    1636:	9f e3       	ldi	r25, 0x3F	; 63
    1638:	88 39       	cpi	r24, 0x98	; 152
    163a:	20 f0       	brcs	.+8      	; 0x1644 <log+0x3e>
    163c:	80 3e       	cpi	r24, 0xE0	; 224
    163e:	38 f0       	brcs	.+14     	; 0x164e <log+0x48>
    1640:	21 96       	adiw	r28, 0x01	; 1
    1642:	8f 77       	andi	r24, 0x7F	; 127
    1644:	0e 94 f9 07 	call	0xff2	; 0xff2 <__addsf3>
    1648:	e6 e3       	ldi	r30, 0x36	; 54
    164a:	f1 e0       	ldi	r31, 0x01	; 1
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <log+0x50>
    164e:	0e 94 f9 07 	call	0xff2	; 0xff2 <__addsf3>
    1652:	e3 e6       	ldi	r30, 0x63	; 99
    1654:	f1 e0       	ldi	r31, 0x01	; 1
    1656:	0e 94 92 0a 	call	0x1524	; 0x1524 <__fp_powser>
    165a:	8b 01       	movw	r16, r22
    165c:	be 01       	movw	r22, r28
    165e:	ec 01       	movw	r28, r24
    1660:	fb 2e       	mov	r15, r27
    1662:	6f 57       	subi	r22, 0x7F	; 127
    1664:	71 09       	sbc	r23, r1
    1666:	75 95       	asr	r23
    1668:	77 1f       	adc	r23, r23
    166a:	88 0b       	sbc	r24, r24
    166c:	99 0b       	sbc	r25, r25
    166e:	0e 94 0f 09 	call	0x121e	; 0x121e <__floatsisf>
    1672:	28 e1       	ldi	r18, 0x18	; 24
    1674:	32 e7       	ldi	r19, 0x72	; 114
    1676:	41 e3       	ldi	r20, 0x31	; 49
    1678:	5f e3       	ldi	r21, 0x3F	; 63
    167a:	0e 94 ae 09 	call	0x135c	; 0x135c <__mulsf3x>
    167e:	af 2d       	mov	r26, r15
    1680:	98 01       	movw	r18, r16
    1682:	ae 01       	movw	r20, r28
    1684:	ff 90       	pop	r15
    1686:	0f 91       	pop	r16
    1688:	1f 91       	pop	r17
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	0e 94 10 08 	call	0x1020	; 0x1020 <__addsf3x>
    1692:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__fp_round>

00001696 <modf>:
    1696:	fa 01       	movw	r30, r20
    1698:	dc 01       	movw	r26, r24
    169a:	aa 0f       	add	r26, r26
    169c:	bb 1f       	adc	r27, r27
    169e:	9b 01       	movw	r18, r22
    16a0:	ac 01       	movw	r20, r24
    16a2:	bf 57       	subi	r27, 0x7F	; 127
    16a4:	28 f4       	brcc	.+10     	; 0x16b0 <modf+0x1a>
    16a6:	22 27       	eor	r18, r18
    16a8:	33 27       	eor	r19, r19
    16aa:	44 27       	eor	r20, r20
    16ac:	50 78       	andi	r21, 0x80	; 128
    16ae:	20 c0       	rjmp	.+64     	; 0x16f0 <modf+0x5a>
    16b0:	b7 51       	subi	r27, 0x17	; 23
    16b2:	90 f4       	brcc	.+36     	; 0x16d8 <modf+0x42>
    16b4:	ab 2f       	mov	r26, r27
    16b6:	00 24       	eor	r0, r0
    16b8:	46 95       	lsr	r20
    16ba:	37 95       	ror	r19
    16bc:	27 95       	ror	r18
    16be:	01 1c       	adc	r0, r1
    16c0:	a3 95       	inc	r26
    16c2:	d2 f3       	brmi	.-12     	; 0x16b8 <modf+0x22>
    16c4:	00 20       	and	r0, r0
    16c6:	71 f0       	breq	.+28     	; 0x16e4 <modf+0x4e>
    16c8:	22 0f       	add	r18, r18
    16ca:	33 1f       	adc	r19, r19
    16cc:	44 1f       	adc	r20, r20
    16ce:	b3 95       	inc	r27
    16d0:	da f3       	brmi	.-10     	; 0x16c8 <modf+0x32>
    16d2:	0e d0       	rcall	.+28     	; 0x16f0 <modf+0x5a>
    16d4:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__subsf3>
    16d8:	61 30       	cpi	r22, 0x01	; 1
    16da:	71 05       	cpc	r23, r1
    16dc:	a0 e8       	ldi	r26, 0x80	; 128
    16de:	8a 07       	cpc	r24, r26
    16e0:	b9 46       	sbci	r27, 0x69	; 105
    16e2:	30 f4       	brcc	.+12     	; 0x16f0 <modf+0x5a>
    16e4:	9b 01       	movw	r18, r22
    16e6:	ac 01       	movw	r20, r24
    16e8:	66 27       	eor	r22, r22
    16ea:	77 27       	eor	r23, r23
    16ec:	88 27       	eor	r24, r24
    16ee:	90 78       	andi	r25, 0x80	; 128
    16f0:	30 96       	adiw	r30, 0x00	; 0
    16f2:	21 f0       	breq	.+8      	; 0x16fc <modf+0x66>
    16f4:	20 83       	st	Z, r18
    16f6:	31 83       	std	Z+1, r19	; 0x01
    16f8:	42 83       	std	Z+2, r20	; 0x02
    16fa:	53 83       	std	Z+3, r21	; 0x03
    16fc:	08 95       	ret

000016fe <__fp_mpack>:
    16fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1700:	31 f0       	breq	.+12     	; 0x170e <__fp_mpack_finite+0xc>

00001702 <__fp_mpack_finite>:
    1702:	91 50       	subi	r25, 0x01	; 1
    1704:	20 f4       	brcc	.+8      	; 0x170e <__fp_mpack_finite+0xc>
    1706:	87 95       	ror	r24
    1708:	77 95       	ror	r23
    170a:	67 95       	ror	r22
    170c:	b7 95       	ror	r27
    170e:	88 0f       	add	r24, r24
    1710:	91 1d       	adc	r25, r1
    1712:	96 95       	lsr	r25
    1714:	87 95       	ror	r24
    1716:	97 f9       	bld	r25, 7
    1718:	08 95       	ret

0000171a <__divmodhi4>:
    171a:	97 fb       	bst	r25, 7
    171c:	07 2e       	mov	r0, r23
    171e:	16 f4       	brtc	.+4      	; 0x1724 <__divmodhi4+0xa>
    1720:	00 94       	com	r0
    1722:	07 d0       	rcall	.+14     	; 0x1732 <__divmodhi4_neg1>
    1724:	77 fd       	sbrc	r23, 7
    1726:	09 d0       	rcall	.+18     	; 0x173a <__divmodhi4_neg2>
    1728:	0e 94 af 0b 	call	0x175e	; 0x175e <__udivmodhi4>
    172c:	07 fc       	sbrc	r0, 7
    172e:	05 d0       	rcall	.+10     	; 0x173a <__divmodhi4_neg2>
    1730:	3e f4       	brtc	.+14     	; 0x1740 <__divmodhi4_exit>

00001732 <__divmodhi4_neg1>:
    1732:	90 95       	com	r25
    1734:	81 95       	neg	r24
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	08 95       	ret

0000173a <__divmodhi4_neg2>:
    173a:	70 95       	com	r23
    173c:	61 95       	neg	r22
    173e:	7f 4f       	sbci	r23, 0xFF	; 255

00001740 <__divmodhi4_exit>:
    1740:	08 95       	ret

00001742 <__tablejump2__>:
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	05 90       	lpm	r0, Z+
    1748:	f4 91       	lpm	r31, Z
    174a:	e0 2d       	mov	r30, r0
    174c:	09 94       	ijmp

0000174e <__mulshisi3>:
    174e:	b7 ff       	sbrs	r27, 7
    1750:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__muluhisi3>

00001754 <__mulohisi3>:
    1754:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__muluhisi3>
    1758:	82 1b       	sub	r24, r18
    175a:	93 0b       	sbc	r25, r19
    175c:	08 95       	ret

0000175e <__udivmodhi4>:
    175e:	aa 1b       	sub	r26, r26
    1760:	bb 1b       	sub	r27, r27
    1762:	51 e1       	ldi	r21, 0x11	; 17
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <__udivmodhi4_ep>

00001766 <__udivmodhi4_loop>:
    1766:	aa 1f       	adc	r26, r26
    1768:	bb 1f       	adc	r27, r27
    176a:	a6 17       	cp	r26, r22
    176c:	b7 07       	cpc	r27, r23
    176e:	10 f0       	brcs	.+4      	; 0x1774 <__udivmodhi4_ep>
    1770:	a6 1b       	sub	r26, r22
    1772:	b7 0b       	sbc	r27, r23

00001774 <__udivmodhi4_ep>:
    1774:	88 1f       	adc	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	5a 95       	dec	r21
    177a:	a9 f7       	brne	.-22     	; 0x1766 <__udivmodhi4_loop>
    177c:	80 95       	com	r24
    177e:	90 95       	com	r25
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	08 95       	ret

00001786 <__muluhisi3>:
    1786:	0e 94 ce 0b 	call	0x179c	; 0x179c <__umulhisi3>
    178a:	a5 9f       	mul	r26, r21
    178c:	90 0d       	add	r25, r0
    178e:	b4 9f       	mul	r27, r20
    1790:	90 0d       	add	r25, r0
    1792:	a4 9f       	mul	r26, r20
    1794:	80 0d       	add	r24, r0
    1796:	91 1d       	adc	r25, r1
    1798:	11 24       	eor	r1, r1
    179a:	08 95       	ret

0000179c <__umulhisi3>:
    179c:	a2 9f       	mul	r26, r18
    179e:	b0 01       	movw	r22, r0
    17a0:	b3 9f       	mul	r27, r19
    17a2:	c0 01       	movw	r24, r0
    17a4:	a3 9f       	mul	r26, r19
    17a6:	70 0d       	add	r23, r0
    17a8:	81 1d       	adc	r24, r1
    17aa:	11 24       	eor	r1, r1
    17ac:	91 1d       	adc	r25, r1
    17ae:	b2 9f       	mul	r27, r18
    17b0:	70 0d       	add	r23, r0
    17b2:	81 1d       	adc	r24, r1
    17b4:	11 24       	eor	r1, r1
    17b6:	91 1d       	adc	r25, r1
    17b8:	08 95       	ret

000017ba <__itoa_ncheck>:
    17ba:	bb 27       	eor	r27, r27
    17bc:	4a 30       	cpi	r20, 0x0A	; 10
    17be:	31 f4       	brne	.+12     	; 0x17cc <__itoa_ncheck+0x12>
    17c0:	99 23       	and	r25, r25
    17c2:	22 f4       	brpl	.+8      	; 0x17cc <__itoa_ncheck+0x12>
    17c4:	bd e2       	ldi	r27, 0x2D	; 45
    17c6:	90 95       	com	r25
    17c8:	81 95       	neg	r24
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__utoa_common>

000017d0 <__utoa_ncheck>:
    17d0:	bb 27       	eor	r27, r27

000017d2 <__utoa_common>:
    17d2:	fb 01       	movw	r30, r22
    17d4:	55 27       	eor	r21, r21
    17d6:	aa 27       	eor	r26, r26
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	aa 1f       	adc	r26, r26
    17de:	a4 17       	cp	r26, r20
    17e0:	10 f0       	brcs	.+4      	; 0x17e6 <__utoa_common+0x14>
    17e2:	a4 1b       	sub	r26, r20
    17e4:	83 95       	inc	r24
    17e6:	50 51       	subi	r21, 0x10	; 16
    17e8:	b9 f7       	brne	.-18     	; 0x17d8 <__utoa_common+0x6>
    17ea:	a0 5d       	subi	r26, 0xD0	; 208
    17ec:	aa 33       	cpi	r26, 0x3A	; 58
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <__utoa_common+0x20>
    17f0:	a9 5d       	subi	r26, 0xD9	; 217
    17f2:	a1 93       	st	Z+, r26
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	79 f7       	brne	.-34     	; 0x17d6 <__utoa_common+0x4>
    17f8:	b1 11       	cpse	r27, r1
    17fa:	b1 93       	st	Z+, r27
    17fc:	11 92       	st	Z+, r1
    17fe:	cb 01       	movw	r24, r22
    1800:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <strrev>

00001804 <strrev>:
    1804:	dc 01       	movw	r26, r24
    1806:	fc 01       	movw	r30, r24
    1808:	67 2f       	mov	r22, r23
    180a:	71 91       	ld	r23, Z+
    180c:	77 23       	and	r23, r23
    180e:	e1 f7       	brne	.-8      	; 0x1808 <strrev+0x4>
    1810:	32 97       	sbiw	r30, 0x02	; 2
    1812:	04 c0       	rjmp	.+8      	; 0x181c <strrev+0x18>
    1814:	7c 91       	ld	r23, X
    1816:	6d 93       	st	X+, r22
    1818:	70 83       	st	Z, r23
    181a:	62 91       	ld	r22, -Z
    181c:	ae 17       	cp	r26, r30
    181e:	bf 07       	cpc	r27, r31
    1820:	c8 f3       	brcs	.-14     	; 0x1814 <strrev+0x10>
    1822:	08 95       	ret

00001824 <_exit>:
    1824:	f8 94       	cli

00001826 <__stop_program>:
    1826:	ff cf       	rjmp	.-2      	; 0x1826 <__stop_program>
