
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c2  00800100  000016aa  0000173e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  008003c2  008003c2  00001a00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de1  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000325  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d4  00000000  00000000  00002bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00002ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002eb  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a80  00000000  00000000  000033bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003e3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_9>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      4c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_21>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      68:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      6c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      70:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      74:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      78:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      7c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      80:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      84:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      88:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      8c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      90:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      94:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      98:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      9c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      a0:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      a4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      a8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      ac:	51 04       	cpc	r5, r1
      ae:	32 05       	cpc	r19, r2
      b0:	32 05       	cpc	r19, r2
      b2:	32 05       	cpc	r19, r2
      b4:	32 05       	cpc	r19, r2
      b6:	32 05       	cpc	r19, r2
      b8:	32 05       	cpc	r19, r2
      ba:	32 05       	cpc	r19, r2
      bc:	32 05       	cpc	r19, r2
      be:	32 05       	cpc	r19, r2
      c0:	32 05       	cpc	r19, r2
      c2:	32 05       	cpc	r19, r2
      c4:	0b 04       	cpc	r0, r11
      c6:	32 05       	cpc	r19, r2
      c8:	ad 03       	fmulsu	r18, r21
      ca:	32 05       	cpc	r19, r2
      cc:	32 05       	cpc	r19, r2
      ce:	32 05       	cpc	r19, r2
      d0:	ad 04       	cpc	r10, r13
      d2:	32 05       	cpc	r19, r2
      d4:	32 05       	cpc	r19, r2
      d6:	32 05       	cpc	r19, r2
      d8:	32 05       	cpc	r19, r2
      da:	32 05       	cpc	r19, r2
      dc:	32 05       	cpc	r19, r2
      de:	32 05       	cpc	r19, r2
      e0:	32 05       	cpc	r19, r2
      e2:	32 05       	cpc	r19, r2
      e4:	32 05       	cpc	r19, r2
      e6:	32 05       	cpc	r19, r2
      e8:	32 05       	cpc	r19, r2
      ea:	32 05       	cpc	r19, r2
      ec:	7f 04       	cpc	r7, r15
      ee:	32 05       	cpc	r19, r2
      f0:	32 05       	cpc	r19, r2
      f2:	32 05       	cpc	r19, r2
      f4:	32 05       	cpc	r19, r2
      f6:	32 05       	cpc	r19, r2
      f8:	32 05       	cpc	r19, r2
      fa:	32 05       	cpc	r19, r2
      fc:	32 05       	cpc	r19, r2
      fe:	32 05       	cpc	r19, r2
     100:	32 05       	cpc	r19, r2
     102:	32 05       	cpc	r19, r2
     104:	2e 04       	cpc	r2, r14
     106:	32 05       	cpc	r19, r2
     108:	dc 03       	fmulsu	r21, r20
     10a:	32 05       	cpc	r19, r2
     10c:	25 05       	cpc	r18, r5
     10e:	07 63       	ori	r16, 0x37	; 55
     110:	42 36       	cpi	r20, 0x62	; 98
     112:	b7 9b       	sbis	0x16, 7	; 22
     114:	d8 a7       	std	Y+40, r29	; 0x28
     116:	1a 39       	cpi	r17, 0x9A	; 154
     118:	68 56       	subi	r22, 0x68	; 104
     11a:	18 ae       	std	Y+56, r1	; 0x38
     11c:	ba ab       	std	Y+50, r27	; 0x32
     11e:	55 8c       	ldd	r5, Z+29	; 0x1d
     120:	1d 3c       	cpi	r17, 0xCD	; 205
     122:	b7 cc       	rjmp	.-1682   	; 0xfffffa92 <__eeprom_end+0xff7efa92>
     124:	57 63       	ori	r21, 0x37	; 55
     126:	bd 6d       	ori	r27, 0xDD	; 221
     128:	ed fd       	.word	0xfded	; ????
     12a:	75 3e       	cpi	r23, 0xE5	; 229
     12c:	f6 17       	cp	r31, r22
     12e:	72 31       	cpi	r23, 0x12	; 18
     130:	bf 00       	.word	0x00bf	; ????
     132:	00 00       	nop
     134:	80 3f       	cpi	r24, 0xF0	; 240
     136:	08 00       	.word	0x0008	; ????
     138:	00 00       	nop
     13a:	be 92       	st	-X, r11
     13c:	24 49       	sbci	r18, 0x94	; 148
     13e:	12 3e       	cpi	r17, 0xE2	; 226
     140:	ab aa       	std	Y+51, r10	; 0x33
     142:	aa 2a       	or	r10, r26
     144:	be cd       	rjmp	.-1156   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     146:	cc cc       	rjmp	.-1640   	; 0xfffffae0 <__eeprom_end+0xff7efae0>
     148:	4c 3e       	cpi	r20, 0xEC	; 236
     14a:	00 00       	nop
     14c:	00 80       	ld	r0, Z
     14e:	be ab       	std	Y+54, r27	; 0x36
     150:	aa aa       	std	Y+50, r10	; 0x32
     152:	aa 3e       	cpi	r26, 0xEA	; 234
     154:	00 00       	nop
     156:	00 00       	nop
     158:	bf 00       	.word	0x00bf	; ????
     15a:	00 00       	nop
     15c:	80 3f       	cpi	r24, 0xF0	; 240
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	00 08       	sbc	r0, r0
     164:	41 78       	andi	r20, 0x81	; 129
     166:	d3 bb       	out	0x13, r29	; 19
     168:	43 87       	std	Z+11, r20	; 0x0b
     16a:	d1 13       	cpse	r29, r17
     16c:	3d 19       	sub	r19, r13
     16e:	0e 3c       	cpi	r16, 0xCE	; 206
     170:	c3 bd       	out	0x23, r28	; 35
     172:	42 82       	std	Z+2, r4	; 0x02
     174:	ad 2b       	or	r26, r29
     176:	3e 68       	ori	r19, 0x8E	; 142
     178:	ec 82       	std	Y+4, r14	; 0x04
     17a:	76 be       	out	0x36, r7	; 54
     17c:	d9 8f       	std	Y+25, r29	; 0x19
     17e:	e1 a9       	ldd	r30, Z+49	; 0x31
     180:	3e 4c       	sbci	r19, 0xCE	; 206
     182:	80 ef       	ldi	r24, 0xF0	; 240
     184:	ff be       	out	0x3f, r15	; 63
     186:	01 c4       	rjmp	.+2050   	; 0x98a <main+0x3bc>
     188:	ff 7f       	andi	r31, 0xFF	; 255
     18a:	3f 00       	.word	0x003f	; ????
     18c:	00 00       	nop
	...

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	da e0       	ldi	r29, 0x0A	; 10
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	13 e0       	ldi	r17, 0x03	; 3
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	ea ea       	ldi	r30, 0xAA	; 170
     1a4:	f6 e1       	ldi	r31, 0x16	; 22
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	a2 3c       	cpi	r26, 0xC2	; 194
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	23 e0       	ldi	r18, 0x03	; 3
     1b4:	a2 ec       	ldi	r26, 0xC2	; 194
     1b6:	b3 e0       	ldi	r27, 0x03	; 3
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	a3 3d       	cpi	r26, 0xD3	; 211
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <main>
     1c6:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <reverse>:
 */ 


void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
     1ce:	9b 01       	movw	r18, r22
     1d0:	21 50       	subi	r18, 0x01	; 1
     1d2:	31 09       	sbc	r19, r1
	while (i<j)
     1d4:	12 16       	cp	r1, r18
     1d6:	13 06       	cpc	r1, r19
     1d8:	84 f4       	brge	.+32     	; 0x1fa <reverse+0x2c>
     1da:	fc 01       	movw	r30, r24
     1dc:	e6 0f       	add	r30, r22
     1de:	f7 1f       	adc	r31, r23
     1e0:	dc 01       	movw	r26, r24
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp = str[i];
     1e6:	4c 91       	ld	r20, X
		str[i] = str[j];
     1e8:	52 91       	ld	r21, -Z
     1ea:	5d 93       	st	X+, r21
		str[j] = temp;
     1ec:	40 83       	st	Z, r20
		i++; j--;
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	21 50       	subi	r18, 0x01	; 1
     1f2:	31 09       	sbc	r19, r1


void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
	while (i<j)
     1f4:	82 17       	cp	r24, r18
     1f6:	93 07       	cpc	r25, r19
     1f8:	b4 f3       	brlt	.-20     	; 0x1e6 <reverse+0x18>
     1fa:	08 95       	ret

000001fc <intToStr>:
		i++; j--;
	}
}

int intToStr(int x, char str[], int d)
{
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	8b 01       	movw	r16, r22
     20a:	9a 01       	movw	r18, r20
	int i = 0;
	while (x)
     20c:	00 97       	sbiw	r24, 0x00	; 0
     20e:	99 f0       	breq	.+38     	; 0x236 <intToStr+0x3a>
     210:	fb 01       	movw	r30, r22
     212:	c0 e0       	ldi	r28, 0x00	; 0
     214:	d0 e0       	ldi	r29, 0x00	; 0
	{
		str[i++] = (x%10) + '0';
     216:	0f 2e       	mov	r0, r31
     218:	fa e0       	ldi	r31, 0x0A	; 10
     21a:	ef 2e       	mov	r14, r31
     21c:	f1 2c       	mov	r15, r1
     21e:	f0 2d       	mov	r31, r0
     220:	21 96       	adiw	r28, 0x01	; 1
     222:	b7 01       	movw	r22, r14
     224:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
     228:	80 5d       	subi	r24, 0xD0	; 208
     22a:	81 93       	st	Z+, r24
		x = x/10;
     22c:	86 2f       	mov	r24, r22
     22e:	97 2f       	mov	r25, r23
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
     230:	00 97       	sbiw	r24, 0x00	; 0
     232:	b1 f7       	brne	.-20     	; 0x220 <intToStr+0x24>
     234:	02 c0       	rjmp	.+4      	; 0x23a <intToStr+0x3e>
	}
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
     236:	c0 e0       	ldi	r28, 0x00	; 0
     238:	d0 e0       	ldi	r29, 0x00	; 0
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     23a:	c2 17       	cp	r28, r18
     23c:	d3 07       	cpc	r29, r19
     23e:	64 f4       	brge	.+24     	; 0x258 <intToStr+0x5c>
     240:	f8 01       	movw	r30, r16
     242:	ec 0f       	add	r30, r28
     244:	fd 1f       	adc	r31, r29
     246:	a8 01       	movw	r20, r16
     248:	42 0f       	add	r20, r18
     24a:	53 1f       	adc	r21, r19
	str[i++] = '0';
     24c:	80 e3       	ldi	r24, 0x30	; 48
     24e:	81 93       	st	Z+, r24
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     250:	e4 17       	cp	r30, r20
     252:	f5 07       	cpc	r31, r21
     254:	e1 f7       	brne	.-8      	; 0x24e <intToStr+0x52>
     256:	e9 01       	movw	r28, r18
	str[i++] = '0';
	
	reverse(str, i);
     258:	be 01       	movw	r22, r28
     25a:	c8 01       	movw	r24, r16
     25c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <reverse>
	str[i] = '\0';
     260:	f8 01       	movw	r30, r16
     262:	ec 0f       	add	r30, r28
     264:	fd 1f       	adc	r31, r29
     266:	10 82       	st	Z, r1
	return i;
}
     268:	ce 01       	movw	r24, r28
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	08 95       	ret

00000278 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
     278:	2f 92       	push	r2
     27a:	3f 92       	push	r3
     27c:	4f 92       	push	r4
     27e:	5f 92       	push	r5
     280:	6f 92       	push	r6
     282:	7f 92       	push	r7
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	4b 01       	movw	r8, r22
     29e:	5c 01       	movw	r10, r24
     2a0:	8a 01       	movw	r16, r20
     2a2:	e9 01       	movw	r28, r18
	// Extract integer part
	int ipart = (int)n;
     2a4:	0e 94 d7 07 	call	0xfae	; 0xfae <__fixsfsi>
     2a8:	6b 01       	movw	r12, r22
     2aa:	7c 01       	movw	r14, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	b8 01       	movw	r22, r16
     2b2:	c6 01       	movw	r24, r12
     2b4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <intToStr>
     2b8:	1c 01       	movw	r2, r24
	
	// check for display option after point
	if (afterpoint != 0)
     2ba:	20 97       	sbiw	r28, 0x00	; 0
     2bc:	a9 f1       	breq	.+106    	; 0x328 <ftoa+0xb0>
	{
		res[i] = '.';  // add dot
     2be:	f8 01       	movw	r30, r16
     2c0:	e8 0f       	add	r30, r24
     2c2:	f9 1f       	adc	r31, r25
     2c4:	8e e2       	ldi	r24, 0x2E	; 46
     2c6:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     2c8:	be 01       	movw	r22, r28
     2ca:	0d 2e       	mov	r0, r29
     2cc:	00 0c       	add	r0, r0
     2ce:	88 0b       	sbc	r24, r24
     2d0:	99 0b       	sbc	r25, r25
     2d2:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     2d6:	9b 01       	movw	r18, r22
     2d8:	ac 01       	movw	r20, r24
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	91 e4       	ldi	r25, 0x41	; 65
     2e2:	0e 94 08 09 	call	0x1210	; 0x1210 <pow>
     2e6:	2b 01       	movw	r4, r22
     2e8:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
     2ea:	b6 01       	movw	r22, r12
     2ec:	dd 0c       	add	r13, r13
     2ee:	88 0b       	sbc	r24, r24
     2f0:	99 0b       	sbc	r25, r25
     2f2:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     2f6:	9b 01       	movw	r18, r22
     2f8:	ac 01       	movw	r20, r24
     2fa:	c5 01       	movw	r24, r10
     2fc:	b4 01       	movw	r22, r8
     2fe:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__subsf3>
     302:	9b 01       	movw	r18, r22
     304:	ac 01       	movw	r20, r24
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	28 1a       	sub	r2, r24
     30a:	38 0a       	sbc	r3, r24
     30c:	02 0d       	add	r16, r2
     30e:	13 1d       	adc	r17, r3
		res[i] = '.';  // add dot
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     310:	c3 01       	movw	r24, r6
     312:	b2 01       	movw	r22, r4
     314:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     318:	0e 94 d7 07 	call	0xfae	; 0xfae <__fixsfsi>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	ae 01       	movw	r20, r28
     322:	b8 01       	movw	r22, r16
     324:	0e 94 fe 00 	call	0x1fc	; 0x1fc <intToStr>
	}
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	9f 90       	pop	r9
     33e:	8f 90       	pop	r8
     340:	7f 90       	pop	r7
     342:	6f 90       	pop	r6
     344:	5f 90       	pop	r5
     346:	4f 90       	pop	r4
     348:	3f 90       	pop	r3
     34a:	2f 90       	pop	r2
     34c:	08 95       	ret

0000034e <uart_init>:
// init uart
void uart_init(void)
{
	// set baud rate
	
	UBRR1 = ((F_CPU/(16*38400)) - 1);
     34e:	89 e1       	ldi	r24, 0x19	; 25
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 cd 00 	sts	0x00CD, r25
     356:	80 93 cc 00 	sts	0x00CC, r24
	
	// enable received and transmitter
	UCSR1B = ( 1 << RXEN1 ) | ( 1 << TXEN1 );
     35a:	88 e1       	ldi	r24, 0x18	; 24
     35c:	80 93 c9 00 	sts	0x00C9, r24
	
	// set frame format ( 8data, 2stop )
	UCSR1C = ( 1 << USBS1 ) | ( 3 << UCSZ10 );
     360:	8e e0       	ldi	r24, 0x0E	; 14
     362:	80 93 ca 00 	sts	0x00CA, r24
     366:	08 95       	ret

00000368 <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
     368:	e8 ec       	ldi	r30, 0xC8	; 200
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	90 81       	ld	r25, Z
     36e:	95 ff       	sbrs	r25, 5
     370:	fd cf       	rjmp	.-6      	; 0x36c <uart_transmit+0x4>
	;
	// put data into buffer, sends data
	UDR1 = data;
     372:	80 93 ce 00 	sts	0x00CE, r24
     376:	08 95       	ret

00000378 <uart_receive>:
}

// read a char from uart
unsigned char uart_receive(void)
{
	while (!( UCSR1A & ( 1 << RXC1) ))
     378:	e8 ec       	ldi	r30, 0xC8	; 200
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	88 23       	and	r24, r24
     380:	ec f7       	brge	.-6      	; 0x37c <uart_receive+0x4>
	;
	return UDR1;
     382:	80 91 ce 00 	lds	r24, 0x00CE
}
     386:	08 95       	ret

00000388 <uart_dataAvailable>:

// check if there are any chars to be read
int uart_dataAvailable(void)
{
	if ( UCSR1A & ( 1 << RXC1) )
     388:	80 91 c8 00 	lds	r24, 0x00C8
     38c:	08 2e       	mov	r0, r24
     38e:	00 0c       	add	r0, r0
     390:	99 0b       	sbc	r25, r25
	return 1;
	
	return 0;
}
     392:	89 2f       	mov	r24, r25
     394:	88 1f       	adc	r24, r24
     396:	88 27       	eor	r24, r24
     398:	88 1f       	adc	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	08 95       	ret

0000039e <uart_print>:

// write a string to the uart
void uart_print( char data[] )
{
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	8c 01       	movw	r16, r24
     3ac:	7c 01       	movw	r14, r24
	for (int c = 0; c < strlen(data); c++ )
     3ae:	c0 e0       	ldi	r28, 0x00	; 0
     3b0:	d0 e0       	ldi	r29, 0x00	; 0
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <uart_print+0x22>
	uart_transmit(data[c]);
     3b4:	f7 01       	movw	r30, r14
     3b6:	81 91       	ld	r24, Z+
     3b8:	7f 01       	movw	r14, r30
     3ba:	0e 94 b4 01 	call	0x368	; 0x368 <uart_transmit>
}

// write a string to the uart
void uart_print( char data[] )
{
	for (int c = 0; c < strlen(data); c++ )
     3be:	21 96       	adiw	r28, 0x01	; 1
     3c0:	f8 01       	movw	r30, r16
     3c2:	01 90       	ld	r0, Z+
     3c4:	00 20       	and	r0, r0
     3c6:	e9 f7       	brne	.-6      	; 0x3c2 <uart_print+0x24>
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	e0 1b       	sub	r30, r16
     3cc:	f1 0b       	sbc	r31, r17
     3ce:	ce 17       	cp	r28, r30
     3d0:	df 07       	cpc	r29, r31
     3d2:	80 f3       	brcs	.-32     	; 0x3b4 <uart_print+0x16>
	uart_transmit(data[c]);
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	08 95       	ret

000003e2 <timer0_init>:
volatile int32_t count_time2 = 0 ;

void timer0_init()
{
	//Timer 0 initialization
	TCNT0 = 0;						// initialize timer 0 counter
     3e2:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE0A);		// enable  interrupt
     3e4:	ee e6       	ldi	r30, 0x6E	; 110
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	82 60       	ori	r24, 0x02	; 2
     3ec:	80 83       	st	Z, r24
	TCCR0A |= (1 << WGM01);
     3ee:	84 b5       	in	r24, 0x24	; 36
     3f0:	82 60       	ori	r24, 0x02	; 2
     3f2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
     3f4:	85 b5       	in	r24, 0x25	; 37
     3f6:	82 60       	ori	r24, 0x02	; 2
     3f8:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << CS00);
     3fa:	85 b5       	in	r24, 0x25	; 37
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	85 bd       	out	0x25, r24	; 37
	OCR0A = 62;
     400:	8e e3       	ldi	r24, 0x3E	; 62
     402:	87 bd       	out	0x27, r24	; 39
     404:	08 95       	ret

00000406 <__vector_21>:
}
//Tracking time in ms increments
ISR(TIMER0_COMPA_vect)
{
     406:	1f 92       	push	r1
     408:	0f 92       	push	r0
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	0f 92       	push	r0
     40e:	11 24       	eor	r1, r1
     410:	2f 93       	push	r18
     412:	3f 93       	push	r19
     414:	4f 93       	push	r20
     416:	5f 93       	push	r21
     418:	6f 93       	push	r22
     41a:	7f 93       	push	r23
     41c:	8f 93       	push	r24
     41e:	9f 93       	push	r25
     420:	af 93       	push	r26
     422:	bf 93       	push	r27
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
	time_ms++;
     428:	80 91 cf 03 	lds	r24, 0x03CF
     42c:	90 91 d0 03 	lds	r25, 0x03D0
     430:	a0 91 d1 03 	lds	r26, 0x03D1
     434:	b0 91 d2 03 	lds	r27, 0x03D2
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	a1 1d       	adc	r26, r1
     43c:	b1 1d       	adc	r27, r1
     43e:	80 93 cf 03 	sts	0x03CF, r24
     442:	90 93 d0 03 	sts	0x03D0, r25
     446:	a0 93 d1 03 	sts	0x03D1, r26
     44a:	b0 93 d2 03 	sts	0x03D2, r27
	
	if((time_ms % 6)== 0)
     44e:	60 91 cf 03 	lds	r22, 0x03CF
     452:	70 91 d0 03 	lds	r23, 0x03D0
     456:	80 91 d1 03 	lds	r24, 0x03D1
     45a:	90 91 d2 03 	lds	r25, 0x03D2
     45e:	26 e0       	ldi	r18, 0x06	; 6
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__divmodsi4>
     46a:	67 2b       	or	r22, r23
     46c:	68 2b       	or	r22, r24
     46e:	69 2b       	or	r22, r25
     470:	89 f4       	brne	.+34     	; 0x494 <__vector_21+0x8e>
	{
		count_time1 = global_counts_m2;
     472:	80 91 cb 03 	lds	r24, 0x03CB
     476:	90 91 cc 03 	lds	r25, 0x03CC
     47a:	09 2e       	mov	r0, r25
     47c:	00 0c       	add	r0, r0
     47e:	aa 0b       	sbc	r26, r26
     480:	bb 0b       	sbc	r27, r27
     482:	80 93 c6 03 	sts	0x03C6, r24
     486:	90 93 c7 03 	sts	0x03C7, r25
     48a:	a0 93 c8 03 	sts	0x03C8, r26
     48e:	b0 93 c9 03 	sts	0x03C9, r27
     492:	23 c0       	rjmp	.+70     	; 0x4da <__vector_21+0xd4>
	}
	else if((time_ms % 6)== 3)
     494:	60 91 cf 03 	lds	r22, 0x03CF
     498:	70 91 d0 03 	lds	r23, 0x03D0
     49c:	80 91 d1 03 	lds	r24, 0x03D1
     4a0:	90 91 d2 03 	lds	r25, 0x03D2
     4a4:	26 e0       	ldi	r18, 0x06	; 6
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__divmodsi4>
     4b0:	63 30       	cpi	r22, 0x03	; 3
     4b2:	71 05       	cpc	r23, r1
     4b4:	81 05       	cpc	r24, r1
     4b6:	91 05       	cpc	r25, r1
     4b8:	81 f4       	brne	.+32     	; 0x4da <__vector_21+0xd4>
	{
		count_time2 = global_counts_m2;
     4ba:	80 91 cb 03 	lds	r24, 0x03CB
     4be:	90 91 cc 03 	lds	r25, 0x03CC
     4c2:	09 2e       	mov	r0, r25
     4c4:	00 0c       	add	r0, r0
     4c6:	aa 0b       	sbc	r26, r26
     4c8:	bb 0b       	sbc	r27, r27
     4ca:	80 93 c2 03 	sts	0x03C2, r24
     4ce:	90 93 c3 03 	sts	0x03C3, r25
     4d2:	a0 93 c4 03 	sts	0x03C4, r26
     4d6:	b0 93 c5 03 	sts	0x03C5, r27
	}
}
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <__vector_9>:
	return 0;
}

// Reading
ISR(PCINT0_vect)
{
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	2f 93       	push	r18
     508:	3f 93       	push	r19
     50a:	4f 93       	push	r20
     50c:	5f 93       	push	r21
     50e:	6f 93       	push	r22
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
	unsigned char m2b_val;
	char plus_m2;
	char minus_m2 ;
	
	// Determine the current value of all channels.
	m2a_val = ((PINB & (1<<PINB4))>>PINB4);
     514:	93 b1       	in	r25, 0x03	; 3
     516:	92 95       	swap	r25
     518:	91 70       	andi	r25, 0x01	; 1
     51a:	29 2f       	mov	r18, r25
	m2b_val = ((PINB & (1<<PINB5))>>PINB5);
     51c:	83 b1       	in	r24, 0x03	; 3
     51e:	85 fb       	bst	r24, 5
     520:	88 27       	eor	r24, r24
     522:	80 f9       	bld	r24, 0
     524:	38 2f       	mov	r19, r24
	
	// Determine if the last read of one channel is different from the current read of the other channel
	// which tells you whether you need to add or subtract from encoder count
	
	plus_m2 = m2a_val^last_m2b_val;
	minus_m2 = m2b_val^last_m2a_val;
     526:	60 91 ce 03 	lds	r22, 0x03CE
	
	// add and/or subtract as determined above
	if(plus_m2)
     52a:	40 91 cd 03 	lds	r20, 0x03CD
     52e:	94 17       	cp	r25, r20
     530:	51 f0       	breq	.+20     	; 0x546 <__vector_9+0x4a>
	{
		global_counts_m2++;
     532:	40 91 cb 03 	lds	r20, 0x03CB
     536:	50 91 cc 03 	lds	r21, 0x03CC
     53a:	4f 5f       	subi	r20, 0xFF	; 255
     53c:	5f 4f       	sbci	r21, 0xFF	; 255
     53e:	50 93 cc 03 	sts	0x03CC, r21
     542:	40 93 cb 03 	sts	0x03CB, r20
	}
	if(minus_m2)
     546:	36 17       	cp	r19, r22
     548:	51 f0       	breq	.+20     	; 0x55e <__vector_9+0x62>
	{
		global_counts_m2--;
     54a:	40 91 cb 03 	lds	r20, 0x03CB
     54e:	50 91 cc 03 	lds	r21, 0x03CC
     552:	41 50       	subi	r20, 0x01	; 1
     554:	51 09       	sbc	r21, r1
     556:	50 93 cc 03 	sts	0x03CC, r21
     55a:	40 93 cb 03 	sts	0x03CB, r20
	}
	// do some error checking to see if you missed an interrupt or something is wrong
	if(m2a_val != global_last_m2a_val && m2b_val != global_last_m2b_val)
     55e:	22 23       	and	r18, r18
     560:	29 f0       	breq	.+10     	; 0x56c <__vector_9+0x70>
     562:	33 23       	and	r19, r19
     564:	19 f0       	breq	.+6      	; 0x56c <__vector_9+0x70>
	{
		global_error_m2 = 1;
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	20 93 ca 03 	sts	0x03CA, r18
	}
	// save state for next interrupt
	last_m2a_val = m2a_val;
     56c:	90 93 ce 03 	sts	0x03CE, r25
	last_m2b_val = m2b_val;
     570:	80 93 cd 03 	sts	0x03CD, r24
}
     574:	9f 91       	pop	r25
     576:	8f 91       	pop	r24
     578:	6f 91       	pop	r22
     57a:	5f 91       	pop	r21
     57c:	4f 91       	pop	r20
     57e:	3f 91       	pop	r19
     580:	2f 91       	pop	r18
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <pwm_init>:

//Initialize PWM
void pwm_init()
{
	TCNT1 = 0;						//Timer 1 initialization
     58c:	10 92 85 00 	sts	0x0085, r1
     590:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << WGM10) ;		//Fast PWM mode - Mode 15
     594:	e0 e8       	ldi	r30, 0x80	; 128
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	81 60       	ori	r24, 0x01	; 1
     59c:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11) ;
     59e:	80 81       	ld	r24, Z
     5a0:	82 60       	ori	r24, 0x02	; 2
     5a2:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) ;
     5a4:	a1 e8       	ldi	r26, 0x81	; 129
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	8c 91       	ld	r24, X
     5aa:	88 60       	ori	r24, 0x08	; 8
     5ac:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13) ;
     5ae:	8c 91       	ld	r24, X
     5b0:	80 61       	ori	r24, 0x10	; 16
     5b2:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS10) ;			// set up timer with pre-scaler = 64
     5b4:	8c 91       	ld	r24, X
     5b6:	81 60       	ori	r24, 0x01	; 1
     5b8:	8c 93       	st	X, r24
	TCCR1A |= (1 << COM1B1) ;
     5ba:	80 81       	ld	r24, Z
     5bc:	80 62       	ori	r24, 0x20	; 32
     5be:	80 83       	st	Z, r24
	OCR1A = 10000;
     5c0:	80 e1       	ldi	r24, 0x10	; 16
     5c2:	97 e2       	ldi	r25, 0x27	; 39
     5c4:	90 93 89 00 	sts	0x0089, r25
     5c8:	80 93 88 00 	sts	0x0088, r24
     5cc:	08 95       	ret

000005ce <main>:
}

void pwm_init(void);

int main()
{
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	66 97       	sbiw	r28, 0x16	; 22
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
	// Initialize serial communication
	uart_init();
     5e2:	0e 94 a7 01 	call	0x34e	; 0x34e <uart_init>
	pwm_init();
     5e6:	0e 94 c6 02 	call	0x58c	; 0x58c <pwm_init>
	timer0_init();
     5ea:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <timer0_init>
	// Setting motor 2 PMW as output
	DDRB |= (1<<PORTB6) ;
     5ee:	26 9a       	sbi	0x04, 6	; 4
	
	// Enabling interrupt at PB4 and PB5
	PCMSK0 |= (1<<PCINT4) ;
     5f0:	eb e6       	ldi	r30, 0x6B	; 107
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 81       	ld	r24, Z
     5f6:	80 61       	ori	r24, 0x10	; 16
     5f8:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5) ;
     5fa:	80 81       	ld	r24, Z
     5fc:	80 62       	ori	r24, 0x20	; 32
     5fe:	80 83       	st	Z, r24
	
	// Enabling external interrupt
	PCICR |= (1<<PCIE0);
     600:	e8 e6       	ldi	r30, 0x68	; 104
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	81 60       	ori	r24, 0x01	; 1
     608:	80 83       	st	Z, r24
	sei();
     60a:	78 94       	sei
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
	int32_t error = 2 ;
	int print_menu = 0 ;
	int32_t target_count = target_degree*7;
     60c:	80 91 06 01 	lds	r24, 0x0106
     610:	90 91 07 01 	lds	r25, 0x0107
     614:	a0 91 08 01 	lds	r26, 0x0108
     618:	b0 91 09 01 	lds	r27, 0x0109
     61c:	6c 01       	movw	r12, r24
     61e:	7d 01       	movw	r14, r26
     620:	cc 0c       	add	r12, r12
     622:	dd 1c       	adc	r13, r13
     624:	ee 1c       	adc	r14, r14
     626:	ff 1c       	adc	r15, r15
     628:	cc 0c       	add	r12, r12
     62a:	dd 1c       	adc	r13, r13
     62c:	ee 1c       	adc	r14, r14
     62e:	ff 1c       	adc	r15, r15
     630:	cc 0c       	add	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	ee 1c       	adc	r14, r14
     636:	ff 1c       	adc	r15, r15
     638:	c8 1a       	sub	r12, r24
     63a:	d9 0a       	sbc	r13, r25
     63c:	ea 0a       	sbc	r14, r26
     63e:	fb 0a       	sbc	r15, r27
     640:	46 01       	movw	r8, r12
     642:	57 01       	movw	r10, r14
	int32_t T; 
	
	uart_print( "Welcome\n" );
     644:	8a e0       	ldi	r24, 0x0A	; 10
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print("Target position in degree : ");
     64c:	83 e1       	ldi	r24, 0x13	; 19
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	itoa(target_degree,str,10);
     654:	80 91 06 01 	lds	r24, 0x0106
     658:	90 91 07 01 	lds	r25, 0x0107
     65c:	a0 91 08 01 	lds	r26, 0x0108
     660:	b0 91 09 01 	lds	r27, 0x0109
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     664:	4a e0       	ldi	r20, 0x0A	; 10
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	0e 94 1e 0b 	call	0x163c	; 0x163c <__itoa_ncheck>
	uart_print(str);
     670:	ce 01       	movw	r24, r28
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print( "\n" );
     678:	8c e0       	ldi	r24, 0x0C	; 12
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print("Target position in counts : ");
     680:	80 e3       	ldi	r24, 0x30	; 48
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     688:	4a e0       	ldi	r20, 0x0A	; 10
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	c6 01       	movw	r24, r12
     692:	0e 94 1e 0b 	call	0x163c	; 0x163c <__itoa_ncheck>
	itoa(target_count,str,10);
	uart_print(str);
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print( "\n" );
     69e:	8c e0       	ldi	r24, 0x0C	; 12
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print("Current position in count : ");
     6a6:	8d e4       	ldi	r24, 0x4D	; 77
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     6ae:	4a e0       	ldi	r20, 0x0A	; 10
     6b0:	be 01       	movw	r22, r28
     6b2:	6f 5f       	subi	r22, 0xFF	; 255
     6b4:	7f 4f       	sbci	r23, 0xFF	; 255
     6b6:	80 91 cb 03 	lds	r24, 0x03CB
     6ba:	90 91 cc 03 	lds	r25, 0x03CC
     6be:	0e 94 1e 0b 	call	0x163c	; 0x163c <__itoa_ncheck>
	itoa(global_counts_m2,str,10);
	uart_print(str);
     6c2:	ce 01       	movw	r24, r28
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	uart_print( "\n" );
     6ca:	8c e0       	ldi	r24, 0x0C	; 12
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
	
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
	int32_t error = 2 ;
	int print_menu = 0 ;
     6d2:	00 e0       	ldi	r16, 0x00	; 0
     6d4:	10 e0       	ldi	r17, 0x00	; 0
	char str[10];
	int printed = 0;
	
	// Buffer for keeping count when motor started
	unsigned char receivedChar = '0';
	int run_motor = 2;
     6d6:	68 94       	set
     6d8:	ee 24       	eor	r14, r14
     6da:	e1 f8       	bld	r14, 1
     6dc:	f1 2c       	mov	r15, r1
			uart_print( "Enter 'p' to decrease Kp by 1 \n" );
			uart_print( "Enter 'D' to increase Kd by 0.5\n" );
			uart_print( "Enter 'd' to decrease Kd by 0.5\n" );
			uart_print( "Enter 'V' to view current values of Kd, Kp, Pr, Pm \n" );
			uart_print( "Enter 't' to Start the trajectory" );
			print_menu = 1;
     6de:	33 24       	eor	r3, r3
     6e0:	33 94       	inc	r3
     6e2:	21 2c       	mov	r2, r1
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <main+0x11c>
     6e6:	e3 2c       	mov	r14, r3
     6e8:	f2 2c       	mov	r15, r2
	uart_print( "\n" );
	
	while(1)
	{
		error = target_count - global_counts_m2;
		if(print_menu == 0)
     6ea:	01 15       	cp	r16, r1
     6ec:	11 05       	cpc	r17, r1
     6ee:	11 f5       	brne	.+68     	; 0x734 <main+0x166>
		{
			uart_print( "Enter 'R' to increase the reference by 10 degree\n" );
     6f0:	8a e6       	ldi	r24, 0x6A	; 106
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'r' to increase the reference by 10 degree\n" );
     6f8:	8c e9       	ldi	r24, 0x9C	; 156
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'P' to increase Kp by 1 \n" );
     700:	8e ec       	ldi	r24, 0xCE	; 206
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'p' to decrease Kp by 1 \n" );
     708:	8e ee       	ldi	r24, 0xEE	; 238
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'D' to increase Kd by 0.5\n" );
     710:	8e e0       	ldi	r24, 0x0E	; 14
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'd' to decrease Kd by 0.5\n" );
     718:	8f e2       	ldi	r24, 0x2F	; 47
     71a:	92 e0       	ldi	r25, 0x02	; 2
     71c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 'V' to view current values of Kd, Kp, Pr, Pm \n" );
     720:	80 e5       	ldi	r24, 0x50	; 80
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			uart_print( "Enter 't' to Start the trajectory" );
     728:	85 e8       	ldi	r24, 0x85	; 133
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
			print_menu = 1;
     730:	03 2d       	mov	r16, r3
     732:	12 2d       	mov	r17, r2
		}
		
		if(uart_dataAvailable())
     734:	0e 94 c4 01 	call	0x388	; 0x388 <uart_dataAvailable>
     738:	89 2b       	or	r24, r25
     73a:	09 f4       	brne	.+2      	; 0x73e <main+0x170>
     73c:	93 c1       	rjmp	.+806    	; 0xa64 <main+0x496>
		{
			receivedChar = uart_receive();
     73e:	0e 94 bc 01 	call	0x378	; 0x378 <uart_receive>
			switch(receivedChar)
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	fc 01       	movw	r30, r24
     746:	e4 54       	subi	r30, 0x44	; 68
     748:	f1 09       	sbc	r31, r1
     74a:	e1 33       	cpi	r30, 0x31	; 49
     74c:	f1 05       	cpc	r31, r1
     74e:	08 f0       	brcs	.+2      	; 0x752 <main+0x184>
     750:	89 c1       	rjmp	.+786    	; 0xa64 <main+0x496>
     752:	ea 5a       	subi	r30, 0xAA	; 170
     754:	ff 4f       	sbci	r31, 0xFF	; 255
     756:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__tablejump2__>
			{
				case 'R':
				if(printed == 0)
				{
					target_count = target_count + 70 ;
     75a:	26 e4       	ldi	r18, 0x46	; 70
     75c:	82 0e       	add	r8, r18
     75e:	91 1c       	adc	r9, r1
     760:	a1 1c       	adc	r10, r1
     762:	b1 1c       	adc	r11, r1
					target_degree = target_degree + 10;
     764:	80 91 06 01 	lds	r24, 0x0106
     768:	90 91 07 01 	lds	r25, 0x0107
     76c:	a0 91 08 01 	lds	r26, 0x0108
     770:	b0 91 09 01 	lds	r27, 0x0109
     774:	0a 96       	adiw	r24, 0x0a	; 10
     776:	a1 1d       	adc	r26, r1
     778:	b1 1d       	adc	r27, r1
     77a:	80 93 06 01 	sts	0x0106, r24
     77e:	90 93 07 01 	sts	0x0107, r25
     782:	a0 93 08 01 	sts	0x0108, r26
     786:	b0 93 09 01 	sts	0x0109, r27
					uart_print( "New reference position set to(in degrees) : \n" );
     78a:	87 ea       	ldi	r24, 0xA7	; 167
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					itoa(target_degree, str, 10);
     792:	80 91 06 01 	lds	r24, 0x0106
     796:	90 91 07 01 	lds	r25, 0x0107
     79a:	a0 91 08 01 	lds	r26, 0x0108
     79e:	b0 91 09 01 	lds	r27, 0x0109
     7a2:	4a e0       	ldi	r20, 0x0A	; 10
     7a4:	be 01       	movw	r22, r28
     7a6:	6f 5f       	subi	r22, 0xFF	; 255
     7a8:	7f 4f       	sbci	r23, 0xFF	; 255
     7aa:	0e 94 1e 0b 	call	0x163c	; 0x163c <__itoa_ncheck>
					uart_print(str);
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     7b6:	56 c1       	rjmp	.+684    	; 0xa64 <main+0x496>
				}
				break;
				case 'r':
				if(printed == 0)
				{
					target_count = target_count - 70;
     7b8:	36 e4       	ldi	r19, 0x46	; 70
     7ba:	83 1a       	sub	r8, r19
     7bc:	91 08       	sbc	r9, r1
     7be:	a1 08       	sbc	r10, r1
     7c0:	b1 08       	sbc	r11, r1
					target_degree = target_degree - 10;
     7c2:	80 91 06 01 	lds	r24, 0x0106
     7c6:	90 91 07 01 	lds	r25, 0x0107
     7ca:	a0 91 08 01 	lds	r26, 0x0108
     7ce:	b0 91 09 01 	lds	r27, 0x0109
     7d2:	0a 97       	sbiw	r24, 0x0a	; 10
     7d4:	a1 09       	sbc	r26, r1
     7d6:	b1 09       	sbc	r27, r1
     7d8:	80 93 06 01 	sts	0x0106, r24
     7dc:	90 93 07 01 	sts	0x0107, r25
     7e0:	a0 93 08 01 	sts	0x0108, r26
     7e4:	b0 93 09 01 	sts	0x0109, r27
					uart_print( "New reference position set to : \n" );
     7e8:	85 ed       	ldi	r24, 0xD5	; 213
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					itoa(target_degree, str, 10);
     7f0:	80 91 06 01 	lds	r24, 0x0106
     7f4:	90 91 07 01 	lds	r25, 0x0107
     7f8:	a0 91 08 01 	lds	r26, 0x0108
     7fc:	b0 91 09 01 	lds	r27, 0x0109
     800:	4a e0       	ldi	r20, 0x0A	; 10
     802:	be 01       	movw	r22, r28
     804:	6f 5f       	subi	r22, 0xFF	; 255
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 1e 0b 	call	0x163c	; 0x163c <__itoa_ncheck>
					uart_print(str);
     80c:	ce 01       	movw	r24, r28
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     814:	27 c1       	rjmp	.+590    	; 0xa64 <main+0x496>
				}
				break;
				case 'P':
				if(printed == 0)
				{
					Kp = Kp + 1;
     816:	80 91 04 01 	lds	r24, 0x0104
     81a:	90 91 05 01 	lds	r25, 0x0105
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	90 93 05 01 	sts	0x0105, r25
     824:	80 93 04 01 	sts	0x0104, r24
					uart_print( "New value of kp : \n" );
     828:	87 ef       	ldi	r24, 0xF7	; 247
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kp, str, 1);
     830:	60 91 04 01 	lds	r22, 0x0104
     834:	70 91 05 01 	lds	r23, 0x0105
     838:	07 2e       	mov	r0, r23
     83a:	00 0c       	add	r0, r0
     83c:	88 0b       	sbc	r24, r24
     83e:	99 0b       	sbc	r25, r25
     840:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     844:	23 2d       	mov	r18, r3
     846:	32 2d       	mov	r19, r2
     848:	ae 01       	movw	r20, r28
     84a:	4f 5f       	subi	r20, 0xFF	; 255
     84c:	5f 4f       	sbci	r21, 0xFF	; 255
     84e:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     852:	ce 01       	movw	r24, r28
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     85a:	04 c1       	rjmp	.+520    	; 0xa64 <main+0x496>
				}
				break;
				case 'p':
				if(printed == 0)
				{
					Kp = Kp -1 ;
     85c:	80 91 04 01 	lds	r24, 0x0104
     860:	90 91 05 01 	lds	r25, 0x0105
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	90 93 05 01 	sts	0x0105, r25
     86a:	80 93 04 01 	sts	0x0104, r24
					uart_print( "New value of kp : \n" );
     86e:	87 ef       	ldi	r24, 0xF7	; 247
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kp, str, 1);
     876:	60 91 04 01 	lds	r22, 0x0104
     87a:	70 91 05 01 	lds	r23, 0x0105
     87e:	07 2e       	mov	r0, r23
     880:	00 0c       	add	r0, r0
     882:	88 0b       	sbc	r24, r24
     884:	99 0b       	sbc	r25, r25
     886:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     88a:	23 2d       	mov	r18, r3
     88c:	32 2d       	mov	r19, r2
     88e:	ae 01       	movw	r20, r28
     890:	4f 5f       	subi	r20, 0xFF	; 255
     892:	5f 4f       	sbci	r21, 0xFF	; 255
     894:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     8a0:	e1 c0       	rjmp	.+450    	; 0xa64 <main+0x496>
				}
				break;
				case 'D':
				if(printed == 0)
				{
					Kd = Kd + 0.5;
     8a2:	60 91 00 01 	lds	r22, 0x0100
     8a6:	70 91 01 01 	lds	r23, 0x0101
     8aa:	80 91 02 01 	lds	r24, 0x0102
     8ae:	90 91 03 01 	lds	r25, 0x0103
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	5f e3       	ldi	r21, 0x3F	; 63
     8ba:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__addsf3>
     8be:	60 93 00 01 	sts	0x0100, r22
     8c2:	70 93 01 01 	sts	0x0101, r23
     8c6:	80 93 02 01 	sts	0x0102, r24
     8ca:	90 93 03 01 	sts	0x0103, r25
					uart_print( "New value of kd : " );
     8ce:	8b e0       	ldi	r24, 0x0B	; 11
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kd, str, 1);
     8d6:	60 91 00 01 	lds	r22, 0x0100
     8da:	70 91 01 01 	lds	r23, 0x0101
     8de:	80 91 02 01 	lds	r24, 0x0102
     8e2:	90 91 03 01 	lds	r25, 0x0103
     8e6:	23 2d       	mov	r18, r3
     8e8:	32 2d       	mov	r19, r2
     8ea:	ae 01       	movw	r20, r28
     8ec:	4f 5f       	subi	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     8fc:	b3 c0       	rjmp	.+358    	; 0xa64 <main+0x496>
				}
				break;
				case 'd':
				if(printed == 0)
				{
					Kd = Kd - 0.5;
     8fe:	60 91 00 01 	lds	r22, 0x0100
     902:	70 91 01 01 	lds	r23, 0x0101
     906:	80 91 02 01 	lds	r24, 0x0102
     90a:	90 91 03 01 	lds	r25, 0x0103
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	5f e3       	ldi	r21, 0x3F	; 63
     916:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__subsf3>
     91a:	60 93 00 01 	sts	0x0100, r22
     91e:	70 93 01 01 	sts	0x0101, r23
     922:	80 93 02 01 	sts	0x0102, r24
     926:	90 93 03 01 	sts	0x0103, r25
					uart_print( "New value of kd : \n" );
     92a:	8e e1       	ldi	r24, 0x1E	; 30
     92c:	93 e0       	ldi	r25, 0x03	; 3
     92e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kd, str, 1);
     932:	60 91 00 01 	lds	r22, 0x0100
     936:	70 91 01 01 	lds	r23, 0x0101
     93a:	80 91 02 01 	lds	r24, 0x0102
     93e:	90 91 03 01 	lds	r25, 0x0103
     942:	23 2d       	mov	r18, r3
     944:	32 2d       	mov	r19, r2
     946:	ae 01       	movw	r20, r28
     948:	4f 5f       	subi	r20, 0xFF	; 255
     94a:	5f 4f       	sbci	r21, 0xFF	; 255
     94c:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     958:	85 c0       	rjmp	.+266    	; 0xa64 <main+0x496>
				}
				break;
				case 'V':
				if(printed == 0)
				{
					uart_print( "Current value of kp : " );
     95a:	82 e3       	ldi	r24, 0x32	; 50
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kp, str, 1);
     962:	60 91 04 01 	lds	r22, 0x0104
     966:	70 91 05 01 	lds	r23, 0x0105
     96a:	07 2e       	mov	r0, r23
     96c:	00 0c       	add	r0, r0
     96e:	88 0b       	sbc	r24, r24
     970:	99 0b       	sbc	r25, r25
     972:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     976:	23 2d       	mov	r18, r3
     978:	32 2d       	mov	r19, r2
     97a:	ae 01       	movw	r20, r28
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "\n" );
     98c:	8c e0       	ldi	r24, 0x0C	; 12
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Current value of kd : " );
     994:	89 e4       	ldi	r24, 0x49	; 73
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					ftoa(Kd, str, 1);
     99c:	60 91 00 01 	lds	r22, 0x0100
     9a0:	70 91 01 01 	lds	r23, 0x0101
     9a4:	80 91 02 01 	lds	r24, 0x0102
     9a8:	90 91 03 01 	lds	r25, 0x0103
     9ac:	23 2d       	mov	r18, r3
     9ae:	32 2d       	mov	r19, r2
     9b0:	ae 01       	movw	r20, r28
     9b2:	4f 5f       	subi	r20, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	0e 94 3c 01 	call	0x278	; 0x278 <ftoa>
					uart_print(str);
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print("\n");
     9c2:	8c e0       	ldi	r24, 0x0C	; 12
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Measured position 'Pm' in count : " );
     9ca:	80 e6       	ldi	r24, 0x60	; 96
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     9d2:	4a e0       	ldi	r20, 0x0A	; 10
     9d4:	be 01       	movw	r22, r28
     9d6:	6f 5f       	subi	r22, 0xFF	; 255
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	80 91 cb 03 	lds	r24, 0x03CB
     9de:	90 91 cc 03 	lds	r25, 0x03CC
     9e2:	0e 94 1e 0b 	call	0x163c	; 0x163c <__itoa_ncheck>
					itoa(global_counts_m2,str,10);
					uart_print(str);
     9e6:	ce 01       	movw	r24, r28
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "\n" );
     9ee:	8c e0       	ldi	r24, 0x0C	; 12
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Reference position in count : " );
     9f6:	83 e8       	ldi	r24, 0x83	; 131
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     9fe:	4a e0       	ldi	r20, 0x0A	; 10
     a00:	be 01       	movw	r22, r28
     a02:	6f 5f       	subi	r22, 0xFF	; 255
     a04:	7f 4f       	sbci	r23, 0xFF	; 255
     a06:	c4 01       	movw	r24, r8
     a08:	0e 94 1e 0b 	call	0x163c	; 0x163c <__itoa_ncheck>
					itoa(target_count,str,10);
					uart_print(str);
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "\n" );
     a14:	8c e0       	ldi	r24, 0x0C	; 12
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					uart_print( "Reference position in degree : " );
     a1c:	82 ea       	ldi	r24, 0xA2	; 162
     a1e:	93 e0       	ldi	r25, 0x03	; 3
     a20:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
					itoa(target_degree,str,10);
     a24:	80 91 06 01 	lds	r24, 0x0106
     a28:	90 91 07 01 	lds	r25, 0x0107
     a2c:	a0 91 08 01 	lds	r26, 0x0108
     a30:	b0 91 09 01 	lds	r27, 0x0109
     a34:	4a e0       	ldi	r20, 0x0A	; 10
     a36:	be 01       	movw	r22, r28
     a38:	6f 5f       	subi	r22, 0xFF	; 255
     a3a:	7f 4f       	sbci	r23, 0xFF	; 255
     a3c:	0e 94 1e 0b 	call	0x163c	; 0x163c <__itoa_ncheck>
					uart_print(str);
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	0e 94 cf 01 	call	0x39e	; 0x39e <uart_print>
     a48:	0d c0       	rjmp	.+26     	; 0xa64 <main+0x496>
				}
				break;
				case 't':
				if(printed == 0)
				{
					if(target_count != global_counts_m2)
     a4a:	80 91 cb 03 	lds	r24, 0x03CB
     a4e:	90 91 cc 03 	lds	r25, 0x03CC
     a52:	09 2e       	mov	r0, r25
     a54:	00 0c       	add	r0, r0
     a56:	aa 0b       	sbc	r26, r26
     a58:	bb 0b       	sbc	r27, r27
     a5a:	88 15       	cp	r24, r8
     a5c:	99 05       	cpc	r25, r9
     a5e:	aa 05       	cpc	r26, r10
     a60:	bb 05       	cpc	r27, r11
     a62:	29 f4       	brne	.+10     	; 0xa6e <main+0x4a0>
				}
				break;
			}
		}
		
		if(run_motor == 1)
     a64:	41 e0       	ldi	r20, 0x01	; 1
     a66:	e4 16       	cp	r14, r20
     a68:	f1 04       	cpc	r15, r1
     a6a:	09 f0       	breq	.+2      	; 0xa6e <main+0x4a0>
     a6c:	3e ce       	rjmp	.-900    	; 0x6ea <main+0x11c>
		{
			error = abs(global_counts_m2 - (target_count)) ;
     a6e:	80 91 cb 03 	lds	r24, 0x03CB
     a72:	90 91 cc 03 	lds	r25, 0x03CC
     a76:	ac 01       	movw	r20, r24
     a78:	48 19       	sub	r20, r8
     a7a:	59 09       	sbc	r21, r9
     a7c:	9a 01       	movw	r18, r20
     a7e:	22 f4       	brpl	.+8      	; 0xa88 <main+0x4ba>
     a80:	22 27       	eor	r18, r18
     a82:	33 27       	eor	r19, r19
     a84:	24 1b       	sub	r18, r20
     a86:	35 0b       	sbc	r19, r21
     a88:	69 01       	movw	r12, r18
     a8a:	33 0f       	add	r19, r19
     a8c:	ee 08       	sbc	r14, r14
     a8e:	ff 08       	sbc	r15, r15
			if(global_counts_m2 > target_count)
     a90:	09 2e       	mov	r0, r25
     a92:	00 0c       	add	r0, r0
     a94:	aa 0b       	sbc	r26, r26
     a96:	bb 0b       	sbc	r27, r27
     a98:	88 16       	cp	r8, r24
     a9a:	99 06       	cpc	r9, r25
     a9c:	aa 06       	cpc	r10, r26
     a9e:	bb 06       	cpc	r11, r27
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <main+0x4d6>
     aa2:	d0 c0       	rjmp	.+416    	; 0xc44 <__stack+0x145>
			{
				T = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
     aa4:	a0 91 04 01 	lds	r26, 0x0104
     aa8:	b0 91 05 01 	lds	r27, 0x0105
     aac:	40 90 c2 03 	lds	r4, 0x03C2
     ab0:	50 90 c3 03 	lds	r5, 0x03C3
     ab4:	60 90 c4 03 	lds	r6, 0x03C4
     ab8:	70 90 c5 03 	lds	r7, 0x03C5
     abc:	20 91 c6 03 	lds	r18, 0x03C6
     ac0:	30 91 c7 03 	lds	r19, 0x03C7
     ac4:	40 91 c8 03 	lds	r20, 0x03C8
     ac8:	50 91 c9 03 	lds	r21, 0x03C9
     acc:	2b 87       	std	Y+11, r18	; 0x0b
     ace:	3c 87       	std	Y+12, r19	; 0x0c
     ad0:	4d 87       	std	Y+13, r20	; 0x0d
     ad2:	5e 87       	std	Y+14, r21	; 0x0e
     ad4:	20 91 00 01 	lds	r18, 0x0100
     ad8:	30 91 01 01 	lds	r19, 0x0101
     adc:	40 91 02 01 	lds	r20, 0x0102
     ae0:	50 91 03 01 	lds	r21, 0x0103
     ae4:	2f 87       	std	Y+15, r18	; 0x0f
     ae6:	38 8b       	std	Y+16, r19	; 0x10
     ae8:	49 8b       	std	Y+17, r20	; 0x11
     aea:	5a 8b       	std	Y+18, r21	; 0x12
     aec:	a7 01       	movw	r20, r14
     aee:	96 01       	movw	r18, r12
     af0:	0e 94 c6 0a 	call	0x158c	; 0x158c <__mulshisi3>
     af4:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     af8:	6b 8b       	std	Y+19, r22	; 0x13
     afa:	7c 8b       	std	Y+20, r23	; 0x14
     afc:	8d 8b       	std	Y+21, r24	; 0x15
     afe:	9e 8b       	std	Y+22, r25	; 0x16
     b00:	c3 01       	movw	r24, r6
     b02:	b2 01       	movw	r22, r4
     b04:	2b 85       	ldd	r18, Y+11	; 0x0b
     b06:	3c 85       	ldd	r19, Y+12	; 0x0c
     b08:	4d 85       	ldd	r20, Y+13	; 0x0d
     b0a:	5e 85       	ldd	r21, Y+14	; 0x0e
     b0c:	62 1b       	sub	r22, r18
     b0e:	73 0b       	sbc	r23, r19
     b10:	84 0b       	sbc	r24, r20
     b12:	95 0b       	sbc	r25, r21
     b14:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     b18:	2f e6       	ldi	r18, 0x6F	; 111
     b1a:	32 e1       	ldi	r19, 0x12	; 18
     b1c:	43 e8       	ldi	r20, 0x83	; 131
     b1e:	5b e3       	ldi	r21, 0x3B	; 59
     b20:	0e 94 65 07 	call	0xeca	; 0xeca <__divsf3>
     b24:	0e 94 d7 07 	call	0xfae	; 0xfae <__fixsfsi>
     b28:	9b 01       	movw	r18, r22
     b2a:	77 23       	and	r23, r23
     b2c:	24 f4       	brge	.+8      	; 0xb36 <__stack+0x37>
     b2e:	22 27       	eor	r18, r18
     b30:	33 27       	eor	r19, r19
     b32:	26 1b       	sub	r18, r22
     b34:	37 0b       	sbc	r19, r23
     b36:	b9 01       	movw	r22, r18
     b38:	33 0f       	add	r19, r19
     b3a:	88 0b       	sbc	r24, r24
     b3c:	99 0b       	sbc	r25, r25
     b3e:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     b42:	2f 85       	ldd	r18, Y+15	; 0x0f
     b44:	38 89       	ldd	r19, Y+16	; 0x10
     b46:	49 89       	ldd	r20, Y+17	; 0x11
     b48:	5a 89       	ldd	r21, Y+18	; 0x12
     b4a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     b4e:	9b 01       	movw	r18, r22
     b50:	ac 01       	movw	r20, r24
     b52:	6b 89       	ldd	r22, Y+19	; 0x13
     b54:	7c 89       	ldd	r23, Y+20	; 0x14
     b56:	8d 89       	ldd	r24, Y+21	; 0x15
     b58:	9e 89       	ldd	r25, Y+22	; 0x16
     b5a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__addsf3>
     b5e:	0e 94 d7 07 	call	0xfae	; 0xfae <__fixsfsi>
				if(T < 10000)
     b62:	60 31       	cpi	r22, 0x10	; 16
     b64:	77 42       	sbci	r23, 0x27	; 39
     b66:	81 05       	cpc	r24, r1
     b68:	91 05       	cpc	r25, r1
     b6a:	0c f0       	brlt	.+2      	; 0xb6e <__stack+0x6f>
     b6c:	61 c0       	rjmp	.+194    	; 0xc30 <__stack+0x131>
				{
					OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
     b6e:	a0 91 04 01 	lds	r26, 0x0104
     b72:	b0 91 05 01 	lds	r27, 0x0105
     b76:	20 91 c2 03 	lds	r18, 0x03C2
     b7a:	30 91 c3 03 	lds	r19, 0x03C3
     b7e:	40 91 c4 03 	lds	r20, 0x03C4
     b82:	50 91 c5 03 	lds	r21, 0x03C5
     b86:	2b 87       	std	Y+11, r18	; 0x0b
     b88:	3c 87       	std	Y+12, r19	; 0x0c
     b8a:	4d 87       	std	Y+13, r20	; 0x0d
     b8c:	5e 87       	std	Y+14, r21	; 0x0e
     b8e:	40 90 c6 03 	lds	r4, 0x03C6
     b92:	50 90 c7 03 	lds	r5, 0x03C7
     b96:	60 90 c8 03 	lds	r6, 0x03C8
     b9a:	70 90 c9 03 	lds	r7, 0x03C9
     b9e:	20 91 00 01 	lds	r18, 0x0100
     ba2:	30 91 01 01 	lds	r19, 0x0101
     ba6:	40 91 02 01 	lds	r20, 0x0102
     baa:	50 91 03 01 	lds	r21, 0x0103
     bae:	2f 87       	std	Y+15, r18	; 0x0f
     bb0:	38 8b       	std	Y+16, r19	; 0x10
     bb2:	49 8b       	std	Y+17, r20	; 0x11
     bb4:	5a 8b       	std	Y+18, r21	; 0x12
     bb6:	a7 01       	movw	r20, r14
     bb8:	96 01       	movw	r18, r12
     bba:	0e 94 c6 0a 	call	0x158c	; 0x158c <__mulshisi3>
     bbe:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     bc2:	6b 01       	movw	r12, r22
     bc4:	7c 01       	movw	r14, r24
     bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bca:	8d 85       	ldd	r24, Y+13	; 0x0d
     bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     bce:	64 19       	sub	r22, r4
     bd0:	75 09       	sbc	r23, r5
     bd2:	86 09       	sbc	r24, r6
     bd4:	97 09       	sbc	r25, r7
     bd6:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     bda:	2f e6       	ldi	r18, 0x6F	; 111
     bdc:	32 e1       	ldi	r19, 0x12	; 18
     bde:	43 e8       	ldi	r20, 0x83	; 131
     be0:	5b e3       	ldi	r21, 0x3B	; 59
     be2:	0e 94 65 07 	call	0xeca	; 0xeca <__divsf3>
     be6:	0e 94 d7 07 	call	0xfae	; 0xfae <__fixsfsi>
     bea:	9b 01       	movw	r18, r22
     bec:	77 23       	and	r23, r23
     bee:	24 f4       	brge	.+8      	; 0xbf8 <__stack+0xf9>
     bf0:	22 27       	eor	r18, r18
     bf2:	33 27       	eor	r19, r19
     bf4:	26 1b       	sub	r18, r22
     bf6:	37 0b       	sbc	r19, r23
     bf8:	b9 01       	movw	r22, r18
     bfa:	33 0f       	add	r19, r19
     bfc:	88 0b       	sbc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     c04:	2f 85       	ldd	r18, Y+15	; 0x0f
     c06:	38 89       	ldd	r19, Y+16	; 0x10
     c08:	49 89       	ldd	r20, Y+17	; 0x11
     c0a:	5a 89       	ldd	r21, Y+18	; 0x12
     c0c:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	c7 01       	movw	r24, r14
     c16:	b6 01       	movw	r22, r12
     c18:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__addsf3>
     c1c:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fixunssfsi>
     c20:	ea e8       	ldi	r30, 0x8A	; 138
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	71 83       	std	Z+1, r23	; 0x01
     c26:	60 83       	st	Z, r22
					PORTE |= (1<<PORTE2);
     c28:	72 9a       	sbi	0x0e, 2	; 14
     c2a:	e3 2c       	mov	r14, r3
     c2c:	f2 2c       	mov	r15, r2
     c2e:	5d cd       	rjmp	.-1350   	; 0x6ea <main+0x11c>
				}
				else
				{
					OCR1B = 10000;
     c30:	20 e1       	ldi	r18, 0x10	; 16
     c32:	37 e2       	ldi	r19, 0x27	; 39
     c34:	ea e8       	ldi	r30, 0x8A	; 138
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	31 83       	std	Z+1, r19	; 0x01
     c3a:	20 83       	st	Z, r18
					PORTE |= (1<<PORTE2);
     c3c:	72 9a       	sbi	0x0e, 2	; 14
     c3e:	e3 2c       	mov	r14, r3
     c40:	f2 2c       	mov	r15, r2
     c42:	53 cd       	rjmp	.-1370   	; 0x6ea <main+0x11c>
				}

			}
			else if(global_counts_m2 < target_count)
     c44:	88 15       	cp	r24, r8
     c46:	99 05       	cpc	r25, r9
     c48:	aa 05       	cpc	r26, r10
     c4a:	bb 05       	cpc	r27, r11
     c4c:	0c f0       	brlt	.+2      	; 0xc50 <__stack+0x151>
     c4e:	4b cd       	rjmp	.-1386   	; 0x6e6 <main+0x118>
			{
				T = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
     c50:	a0 91 04 01 	lds	r26, 0x0104
     c54:	b0 91 05 01 	lds	r27, 0x0105
     c58:	40 90 c2 03 	lds	r4, 0x03C2
     c5c:	50 90 c3 03 	lds	r5, 0x03C3
     c60:	60 90 c4 03 	lds	r6, 0x03C4
     c64:	70 90 c5 03 	lds	r7, 0x03C5
     c68:	20 91 c6 03 	lds	r18, 0x03C6
     c6c:	30 91 c7 03 	lds	r19, 0x03C7
     c70:	40 91 c8 03 	lds	r20, 0x03C8
     c74:	50 91 c9 03 	lds	r21, 0x03C9
     c78:	2b 87       	std	Y+11, r18	; 0x0b
     c7a:	3c 87       	std	Y+12, r19	; 0x0c
     c7c:	4d 87       	std	Y+13, r20	; 0x0d
     c7e:	5e 87       	std	Y+14, r21	; 0x0e
     c80:	20 91 00 01 	lds	r18, 0x0100
     c84:	30 91 01 01 	lds	r19, 0x0101
     c88:	40 91 02 01 	lds	r20, 0x0102
     c8c:	50 91 03 01 	lds	r21, 0x0103
     c90:	2f 87       	std	Y+15, r18	; 0x0f
     c92:	38 8b       	std	Y+16, r19	; 0x10
     c94:	49 8b       	std	Y+17, r20	; 0x11
     c96:	5a 8b       	std	Y+18, r21	; 0x12
     c98:	a7 01       	movw	r20, r14
     c9a:	96 01       	movw	r18, r12
     c9c:	0e 94 c6 0a 	call	0x158c	; 0x158c <__mulshisi3>
     ca0:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     ca4:	6b 8b       	std	Y+19, r22	; 0x13
     ca6:	7c 8b       	std	Y+20, r23	; 0x14
     ca8:	8d 8b       	std	Y+21, r24	; 0x15
     caa:	9e 8b       	std	Y+22, r25	; 0x16
     cac:	c3 01       	movw	r24, r6
     cae:	b2 01       	movw	r22, r4
     cb0:	2b 85       	ldd	r18, Y+11	; 0x0b
     cb2:	3c 85       	ldd	r19, Y+12	; 0x0c
     cb4:	4d 85       	ldd	r20, Y+13	; 0x0d
     cb6:	5e 85       	ldd	r21, Y+14	; 0x0e
     cb8:	62 1b       	sub	r22, r18
     cba:	73 0b       	sbc	r23, r19
     cbc:	84 0b       	sbc	r24, r20
     cbe:	95 0b       	sbc	r25, r21
     cc0:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     cc4:	2f e6       	ldi	r18, 0x6F	; 111
     cc6:	32 e1       	ldi	r19, 0x12	; 18
     cc8:	43 e8       	ldi	r20, 0x83	; 131
     cca:	5b e3       	ldi	r21, 0x3B	; 59
     ccc:	0e 94 65 07 	call	0xeca	; 0xeca <__divsf3>
     cd0:	0e 94 d7 07 	call	0xfae	; 0xfae <__fixsfsi>
     cd4:	9b 01       	movw	r18, r22
     cd6:	77 23       	and	r23, r23
     cd8:	24 f4       	brge	.+8      	; 0xce2 <__stack+0x1e3>
     cda:	22 27       	eor	r18, r18
     cdc:	33 27       	eor	r19, r19
     cde:	26 1b       	sub	r18, r22
     ce0:	37 0b       	sbc	r19, r23
     ce2:	b9 01       	movw	r22, r18
     ce4:	33 0f       	add	r19, r19
     ce6:	88 0b       	sbc	r24, r24
     ce8:	99 0b       	sbc	r25, r25
     cea:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     cee:	2f 85       	ldd	r18, Y+15	; 0x0f
     cf0:	38 89       	ldd	r19, Y+16	; 0x10
     cf2:	49 89       	ldd	r20, Y+17	; 0x11
     cf4:	5a 89       	ldd	r21, Y+18	; 0x12
     cf6:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     cfa:	9b 01       	movw	r18, r22
     cfc:	ac 01       	movw	r20, r24
     cfe:	6b 89       	ldd	r22, Y+19	; 0x13
     d00:	7c 89       	ldd	r23, Y+20	; 0x14
     d02:	8d 89       	ldd	r24, Y+21	; 0x15
     d04:	9e 89       	ldd	r25, Y+22	; 0x16
     d06:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__addsf3>
     d0a:	0e 94 d7 07 	call	0xfae	; 0xfae <__fixsfsi>
				if(T < 10000)
     d0e:	60 31       	cpi	r22, 0x10	; 16
     d10:	77 42       	sbci	r23, 0x27	; 39
     d12:	81 05       	cpc	r24, r1
     d14:	91 05       	cpc	r25, r1
     d16:	0c f0       	brlt	.+2      	; 0xd1a <__stack+0x21b>
     d18:	61 c0       	rjmp	.+194    	; 0xddc <__stack+0x2dd>
				{
					OCR1B = error*Kp + Kd*abs((count_time2 - count_time1)/(0.004));
     d1a:	a0 91 04 01 	lds	r26, 0x0104
     d1e:	b0 91 05 01 	lds	r27, 0x0105
     d22:	20 91 c2 03 	lds	r18, 0x03C2
     d26:	30 91 c3 03 	lds	r19, 0x03C3
     d2a:	40 91 c4 03 	lds	r20, 0x03C4
     d2e:	50 91 c5 03 	lds	r21, 0x03C5
     d32:	2b 87       	std	Y+11, r18	; 0x0b
     d34:	3c 87       	std	Y+12, r19	; 0x0c
     d36:	4d 87       	std	Y+13, r20	; 0x0d
     d38:	5e 87       	std	Y+14, r21	; 0x0e
     d3a:	40 90 c6 03 	lds	r4, 0x03C6
     d3e:	50 90 c7 03 	lds	r5, 0x03C7
     d42:	60 90 c8 03 	lds	r6, 0x03C8
     d46:	70 90 c9 03 	lds	r7, 0x03C9
     d4a:	20 91 00 01 	lds	r18, 0x0100
     d4e:	30 91 01 01 	lds	r19, 0x0101
     d52:	40 91 02 01 	lds	r20, 0x0102
     d56:	50 91 03 01 	lds	r21, 0x0103
     d5a:	2f 87       	std	Y+15, r18	; 0x0f
     d5c:	38 8b       	std	Y+16, r19	; 0x10
     d5e:	49 8b       	std	Y+17, r20	; 0x11
     d60:	5a 8b       	std	Y+18, r21	; 0x12
     d62:	a7 01       	movw	r20, r14
     d64:	96 01       	movw	r18, r12
     d66:	0e 94 c6 0a 	call	0x158c	; 0x158c <__mulshisi3>
     d6a:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     d6e:	6b 01       	movw	r12, r22
     d70:	7c 01       	movw	r14, r24
     d72:	6b 85       	ldd	r22, Y+11	; 0x0b
     d74:	7c 85       	ldd	r23, Y+12	; 0x0c
     d76:	8d 85       	ldd	r24, Y+13	; 0x0d
     d78:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7a:	64 19       	sub	r22, r4
     d7c:	75 09       	sbc	r23, r5
     d7e:	86 09       	sbc	r24, r6
     d80:	97 09       	sbc	r25, r7
     d82:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     d86:	2f e6       	ldi	r18, 0x6F	; 111
     d88:	32 e1       	ldi	r19, 0x12	; 18
     d8a:	43 e8       	ldi	r20, 0x83	; 131
     d8c:	5b e3       	ldi	r21, 0x3B	; 59
     d8e:	0e 94 65 07 	call	0xeca	; 0xeca <__divsf3>
     d92:	0e 94 d7 07 	call	0xfae	; 0xfae <__fixsfsi>
     d96:	9b 01       	movw	r18, r22
     d98:	77 23       	and	r23, r23
     d9a:	24 f4       	brge	.+8      	; 0xda4 <__stack+0x2a5>
     d9c:	22 27       	eor	r18, r18
     d9e:	33 27       	eor	r19, r19
     da0:	26 1b       	sub	r18, r22
     da2:	37 0b       	sbc	r19, r23
     da4:	b9 01       	movw	r22, r18
     da6:	33 0f       	add	r19, r19
     da8:	88 0b       	sbc	r24, r24
     daa:	99 0b       	sbc	r25, r25
     dac:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
     db0:	2f 85       	ldd	r18, Y+15	; 0x0f
     db2:	38 89       	ldd	r19, Y+16	; 0x10
     db4:	49 89       	ldd	r20, Y+17	; 0x11
     db6:	5a 89       	ldd	r21, Y+18	; 0x12
     db8:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     dbc:	9b 01       	movw	r18, r22
     dbe:	ac 01       	movw	r20, r24
     dc0:	c7 01       	movw	r24, r14
     dc2:	b6 01       	movw	r22, r12
     dc4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__addsf3>
     dc8:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fixunssfsi>
     dcc:	ea e8       	ldi	r30, 0x8A	; 138
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	71 83       	std	Z+1, r23	; 0x01
     dd2:	60 83       	st	Z, r22
					PORTE &= ~(1<<PORTE2);					
     dd4:	72 98       	cbi	0x0e, 2	; 14
     dd6:	e3 2c       	mov	r14, r3
     dd8:	f2 2c       	mov	r15, r2
     dda:	87 cc       	rjmp	.-1778   	; 0x6ea <main+0x11c>
				}
				else
				{
					OCR1B = 10000;
     ddc:	20 e1       	ldi	r18, 0x10	; 16
     dde:	37 e2       	ldi	r19, 0x27	; 39
     de0:	ea e8       	ldi	r30, 0x8A	; 138
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	31 83       	std	Z+1, r19	; 0x01
     de6:	20 83       	st	Z, r18
					PORTE &= ~(1<<PORTE2);					
     de8:	72 98       	cbi	0x0e, 2	; 14
     dea:	e3 2c       	mov	r14, r3
     dec:	f2 2c       	mov	r15, r2
     dee:	7d cc       	rjmp	.-1798   	; 0x6ea <main+0x11c>

00000df0 <__subsf3>:
     df0:	50 58       	subi	r21, 0x80	; 128

00000df2 <__addsf3>:
     df2:	bb 27       	eor	r27, r27
     df4:	aa 27       	eor	r26, r26
     df6:	0e 94 10 07 	call	0xe20	; 0xe20 <__addsf3x>
     dfa:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_round>
     dfe:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_pscA>
     e02:	38 f0       	brcs	.+14     	; 0xe12 <__addsf3+0x20>
     e04:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fp_pscB>
     e08:	20 f0       	brcs	.+8      	; 0xe12 <__addsf3+0x20>
     e0a:	39 f4       	brne	.+14     	; 0xe1a <__addsf3+0x28>
     e0c:	9f 3f       	cpi	r25, 0xFF	; 255
     e0e:	19 f4       	brne	.+6      	; 0xe16 <__addsf3+0x24>
     e10:	26 f4       	brtc	.+8      	; 0xe1a <__addsf3+0x28>
     e12:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__fp_nan>
     e16:	0e f4       	brtc	.+2      	; 0xe1a <__addsf3+0x28>
     e18:	e0 95       	com	r30
     e1a:	e7 fb       	bst	r30, 7
     e1c:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>

00000e20 <__addsf3x>:
     e20:	e9 2f       	mov	r30, r25
     e22:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_split3>
     e26:	58 f3       	brcs	.-42     	; 0xdfe <__addsf3+0xc>
     e28:	ba 17       	cp	r27, r26
     e2a:	62 07       	cpc	r22, r18
     e2c:	73 07       	cpc	r23, r19
     e2e:	84 07       	cpc	r24, r20
     e30:	95 07       	cpc	r25, r21
     e32:	20 f0       	brcs	.+8      	; 0xe3c <__addsf3x+0x1c>
     e34:	79 f4       	brne	.+30     	; 0xe54 <__addsf3x+0x34>
     e36:	a6 f5       	brtc	.+104    	; 0xea0 <__addsf3x+0x80>
     e38:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_zero>
     e3c:	0e f4       	brtc	.+2      	; 0xe40 <__addsf3x+0x20>
     e3e:	e0 95       	com	r30
     e40:	0b 2e       	mov	r0, r27
     e42:	ba 2f       	mov	r27, r26
     e44:	a0 2d       	mov	r26, r0
     e46:	0b 01       	movw	r0, r22
     e48:	b9 01       	movw	r22, r18
     e4a:	90 01       	movw	r18, r0
     e4c:	0c 01       	movw	r0, r24
     e4e:	ca 01       	movw	r24, r20
     e50:	a0 01       	movw	r20, r0
     e52:	11 24       	eor	r1, r1
     e54:	ff 27       	eor	r31, r31
     e56:	59 1b       	sub	r21, r25
     e58:	99 f0       	breq	.+38     	; 0xe80 <__addsf3x+0x60>
     e5a:	59 3f       	cpi	r21, 0xF9	; 249
     e5c:	50 f4       	brcc	.+20     	; 0xe72 <__addsf3x+0x52>
     e5e:	50 3e       	cpi	r21, 0xE0	; 224
     e60:	68 f1       	brcs	.+90     	; 0xebc <__addsf3x+0x9c>
     e62:	1a 16       	cp	r1, r26
     e64:	f0 40       	sbci	r31, 0x00	; 0
     e66:	a2 2f       	mov	r26, r18
     e68:	23 2f       	mov	r18, r19
     e6a:	34 2f       	mov	r19, r20
     e6c:	44 27       	eor	r20, r20
     e6e:	58 5f       	subi	r21, 0xF8	; 248
     e70:	f3 cf       	rjmp	.-26     	; 0xe58 <__addsf3x+0x38>
     e72:	46 95       	lsr	r20
     e74:	37 95       	ror	r19
     e76:	27 95       	ror	r18
     e78:	a7 95       	ror	r26
     e7a:	f0 40       	sbci	r31, 0x00	; 0
     e7c:	53 95       	inc	r21
     e7e:	c9 f7       	brne	.-14     	; 0xe72 <__addsf3x+0x52>
     e80:	7e f4       	brtc	.+30     	; 0xea0 <__addsf3x+0x80>
     e82:	1f 16       	cp	r1, r31
     e84:	ba 0b       	sbc	r27, r26
     e86:	62 0b       	sbc	r22, r18
     e88:	73 0b       	sbc	r23, r19
     e8a:	84 0b       	sbc	r24, r20
     e8c:	ba f0       	brmi	.+46     	; 0xebc <__addsf3x+0x9c>
     e8e:	91 50       	subi	r25, 0x01	; 1
     e90:	a1 f0       	breq	.+40     	; 0xeba <__addsf3x+0x9a>
     e92:	ff 0f       	add	r31, r31
     e94:	bb 1f       	adc	r27, r27
     e96:	66 1f       	adc	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	c2 f7       	brpl	.-16     	; 0xe8e <__addsf3x+0x6e>
     e9e:	0e c0       	rjmp	.+28     	; 0xebc <__addsf3x+0x9c>
     ea0:	ba 0f       	add	r27, r26
     ea2:	62 1f       	adc	r22, r18
     ea4:	73 1f       	adc	r23, r19
     ea6:	84 1f       	adc	r24, r20
     ea8:	48 f4       	brcc	.+18     	; 0xebc <__addsf3x+0x9c>
     eaa:	87 95       	ror	r24
     eac:	77 95       	ror	r23
     eae:	67 95       	ror	r22
     eb0:	b7 95       	ror	r27
     eb2:	f7 95       	ror	r31
     eb4:	9e 3f       	cpi	r25, 0xFE	; 254
     eb6:	08 f0       	brcs	.+2      	; 0xeba <__addsf3x+0x9a>
     eb8:	b0 cf       	rjmp	.-160    	; 0xe1a <__addsf3+0x28>
     eba:	93 95       	inc	r25
     ebc:	88 0f       	add	r24, r24
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <__addsf3x+0xa2>
     ec0:	99 27       	eor	r25, r25
     ec2:	ee 0f       	add	r30, r30
     ec4:	97 95       	ror	r25
     ec6:	87 95       	ror	r24
     ec8:	08 95       	ret

00000eca <__divsf3>:
     eca:	0e 94 79 07 	call	0xef2	; 0xef2 <__divsf3x>
     ece:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_round>
     ed2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fp_pscB>
     ed6:	58 f0       	brcs	.+22     	; 0xeee <__divsf3+0x24>
     ed8:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_pscA>
     edc:	40 f0       	brcs	.+16     	; 0xeee <__divsf3+0x24>
     ede:	29 f4       	brne	.+10     	; 0xeea <__divsf3+0x20>
     ee0:	5f 3f       	cpi	r21, 0xFF	; 255
     ee2:	29 f0       	breq	.+10     	; 0xeee <__divsf3+0x24>
     ee4:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>
     ee8:	51 11       	cpse	r21, r1
     eea:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_szero>
     eee:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__fp_nan>

00000ef2 <__divsf3x>:
     ef2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_split3>
     ef6:	68 f3       	brcs	.-38     	; 0xed2 <__divsf3+0x8>

00000ef8 <__divsf3_pse>:
     ef8:	99 23       	and	r25, r25
     efa:	b1 f3       	breq	.-20     	; 0xee8 <__divsf3+0x1e>
     efc:	55 23       	and	r21, r21
     efe:	91 f3       	breq	.-28     	; 0xee4 <__divsf3+0x1a>
     f00:	95 1b       	sub	r25, r21
     f02:	55 0b       	sbc	r21, r21
     f04:	bb 27       	eor	r27, r27
     f06:	aa 27       	eor	r26, r26
     f08:	62 17       	cp	r22, r18
     f0a:	73 07       	cpc	r23, r19
     f0c:	84 07       	cpc	r24, r20
     f0e:	38 f0       	brcs	.+14     	; 0xf1e <__divsf3_pse+0x26>
     f10:	9f 5f       	subi	r25, 0xFF	; 255
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	22 0f       	add	r18, r18
     f16:	33 1f       	adc	r19, r19
     f18:	44 1f       	adc	r20, r20
     f1a:	aa 1f       	adc	r26, r26
     f1c:	a9 f3       	breq	.-22     	; 0xf08 <__divsf3_pse+0x10>
     f1e:	35 d0       	rcall	.+106    	; 0xf8a <__divsf3_pse+0x92>
     f20:	0e 2e       	mov	r0, r30
     f22:	3a f0       	brmi	.+14     	; 0xf32 <__divsf3_pse+0x3a>
     f24:	e0 e8       	ldi	r30, 0x80	; 128
     f26:	32 d0       	rcall	.+100    	; 0xf8c <__divsf3_pse+0x94>
     f28:	91 50       	subi	r25, 0x01	; 1
     f2a:	50 40       	sbci	r21, 0x00	; 0
     f2c:	e6 95       	lsr	r30
     f2e:	00 1c       	adc	r0, r0
     f30:	ca f7       	brpl	.-14     	; 0xf24 <__divsf3_pse+0x2c>
     f32:	2b d0       	rcall	.+86     	; 0xf8a <__divsf3_pse+0x92>
     f34:	fe 2f       	mov	r31, r30
     f36:	29 d0       	rcall	.+82     	; 0xf8a <__divsf3_pse+0x92>
     f38:	66 0f       	add	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	88 1f       	adc	r24, r24
     f3e:	bb 1f       	adc	r27, r27
     f40:	26 17       	cp	r18, r22
     f42:	37 07       	cpc	r19, r23
     f44:	48 07       	cpc	r20, r24
     f46:	ab 07       	cpc	r26, r27
     f48:	b0 e8       	ldi	r27, 0x80	; 128
     f4a:	09 f0       	breq	.+2      	; 0xf4e <__divsf3_pse+0x56>
     f4c:	bb 0b       	sbc	r27, r27
     f4e:	80 2d       	mov	r24, r0
     f50:	bf 01       	movw	r22, r30
     f52:	ff 27       	eor	r31, r31
     f54:	93 58       	subi	r25, 0x83	; 131
     f56:	5f 4f       	sbci	r21, 0xFF	; 255
     f58:	3a f0       	brmi	.+14     	; 0xf68 <__divsf3_pse+0x70>
     f5a:	9e 3f       	cpi	r25, 0xFE	; 254
     f5c:	51 05       	cpc	r21, r1
     f5e:	78 f0       	brcs	.+30     	; 0xf7e <__divsf3_pse+0x86>
     f60:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>
     f64:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_szero>
     f68:	5f 3f       	cpi	r21, 0xFF	; 255
     f6a:	e4 f3       	brlt	.-8      	; 0xf64 <__divsf3_pse+0x6c>
     f6c:	98 3e       	cpi	r25, 0xE8	; 232
     f6e:	d4 f3       	brlt	.-12     	; 0xf64 <__divsf3_pse+0x6c>
     f70:	86 95       	lsr	r24
     f72:	77 95       	ror	r23
     f74:	67 95       	ror	r22
     f76:	b7 95       	ror	r27
     f78:	f7 95       	ror	r31
     f7a:	9f 5f       	subi	r25, 0xFF	; 255
     f7c:	c9 f7       	brne	.-14     	; 0xf70 <__divsf3_pse+0x78>
     f7e:	88 0f       	add	r24, r24
     f80:	91 1d       	adc	r25, r1
     f82:	96 95       	lsr	r25
     f84:	87 95       	ror	r24
     f86:	97 f9       	bld	r25, 7
     f88:	08 95       	ret
     f8a:	e1 e0       	ldi	r30, 0x01	; 1
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	bb 1f       	adc	r27, r27
     f94:	62 17       	cp	r22, r18
     f96:	73 07       	cpc	r23, r19
     f98:	84 07       	cpc	r24, r20
     f9a:	ba 07       	cpc	r27, r26
     f9c:	20 f0       	brcs	.+8      	; 0xfa6 <__divsf3_pse+0xae>
     f9e:	62 1b       	sub	r22, r18
     fa0:	73 0b       	sbc	r23, r19
     fa2:	84 0b       	sbc	r24, r20
     fa4:	ba 0b       	sbc	r27, r26
     fa6:	ee 1f       	adc	r30, r30
     fa8:	88 f7       	brcc	.-30     	; 0xf8c <__divsf3_pse+0x94>
     faa:	e0 95       	com	r30
     fac:	08 95       	ret

00000fae <__fixsfsi>:
     fae:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fixunssfsi>
     fb2:	68 94       	set
     fb4:	b1 11       	cpse	r27, r1
     fb6:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_szero>
     fba:	08 95       	ret

00000fbc <__fixunssfsi>:
     fbc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_splitA>
     fc0:	88 f0       	brcs	.+34     	; 0xfe4 <__fixunssfsi+0x28>
     fc2:	9f 57       	subi	r25, 0x7F	; 127
     fc4:	98 f0       	brcs	.+38     	; 0xfec <__fixunssfsi+0x30>
     fc6:	b9 2f       	mov	r27, r25
     fc8:	99 27       	eor	r25, r25
     fca:	b7 51       	subi	r27, 0x17	; 23
     fcc:	b0 f0       	brcs	.+44     	; 0xffa <__fixunssfsi+0x3e>
     fce:	e1 f0       	breq	.+56     	; 0x1008 <__fixunssfsi+0x4c>
     fd0:	66 0f       	add	r22, r22
     fd2:	77 1f       	adc	r23, r23
     fd4:	88 1f       	adc	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	1a f0       	brmi	.+6      	; 0xfe0 <__fixunssfsi+0x24>
     fda:	ba 95       	dec	r27
     fdc:	c9 f7       	brne	.-14     	; 0xfd0 <__fixunssfsi+0x14>
     fde:	14 c0       	rjmp	.+40     	; 0x1008 <__fixunssfsi+0x4c>
     fe0:	b1 30       	cpi	r27, 0x01	; 1
     fe2:	91 f0       	breq	.+36     	; 0x1008 <__fixunssfsi+0x4c>
     fe4:	0e 94 94 08 	call	0x1128	; 0x1128 <__fp_zero>
     fe8:	b1 e0       	ldi	r27, 0x01	; 1
     fea:	08 95       	ret
     fec:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_zero>
     ff0:	67 2f       	mov	r22, r23
     ff2:	78 2f       	mov	r23, r24
     ff4:	88 27       	eor	r24, r24
     ff6:	b8 5f       	subi	r27, 0xF8	; 248
     ff8:	39 f0       	breq	.+14     	; 0x1008 <__fixunssfsi+0x4c>
     ffa:	b9 3f       	cpi	r27, 0xF9	; 249
     ffc:	cc f3       	brlt	.-14     	; 0xff0 <__fixunssfsi+0x34>
     ffe:	86 95       	lsr	r24
    1000:	77 95       	ror	r23
    1002:	67 95       	ror	r22
    1004:	b3 95       	inc	r27
    1006:	d9 f7       	brne	.-10     	; 0xffe <__fixunssfsi+0x42>
    1008:	3e f4       	brtc	.+14     	; 0x1018 <__fixunssfsi+0x5c>
    100a:	90 95       	com	r25
    100c:	80 95       	com	r24
    100e:	70 95       	com	r23
    1010:	61 95       	neg	r22
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	08 95       	ret

0000101a <__floatunsisf>:
    101a:	e8 94       	clt
    101c:	09 c0       	rjmp	.+18     	; 0x1030 <__floatsisf+0x12>

0000101e <__floatsisf>:
    101e:	97 fb       	bst	r25, 7
    1020:	3e f4       	brtc	.+14     	; 0x1030 <__floatsisf+0x12>
    1022:	90 95       	com	r25
    1024:	80 95       	com	r24
    1026:	70 95       	com	r23
    1028:	61 95       	neg	r22
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8f 4f       	sbci	r24, 0xFF	; 255
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	99 23       	and	r25, r25
    1032:	a9 f0       	breq	.+42     	; 0x105e <__floatsisf+0x40>
    1034:	f9 2f       	mov	r31, r25
    1036:	96 e9       	ldi	r25, 0x96	; 150
    1038:	bb 27       	eor	r27, r27
    103a:	93 95       	inc	r25
    103c:	f6 95       	lsr	r31
    103e:	87 95       	ror	r24
    1040:	77 95       	ror	r23
    1042:	67 95       	ror	r22
    1044:	b7 95       	ror	r27
    1046:	f1 11       	cpse	r31, r1
    1048:	f8 cf       	rjmp	.-16     	; 0x103a <__floatsisf+0x1c>
    104a:	fa f4       	brpl	.+62     	; 0x108a <__floatsisf+0x6c>
    104c:	bb 0f       	add	r27, r27
    104e:	11 f4       	brne	.+4      	; 0x1054 <__floatsisf+0x36>
    1050:	60 ff       	sbrs	r22, 0
    1052:	1b c0       	rjmp	.+54     	; 0x108a <__floatsisf+0x6c>
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	8f 4f       	sbci	r24, 0xFF	; 255
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	16 c0       	rjmp	.+44     	; 0x108a <__floatsisf+0x6c>
    105e:	88 23       	and	r24, r24
    1060:	11 f0       	breq	.+4      	; 0x1066 <__floatsisf+0x48>
    1062:	96 e9       	ldi	r25, 0x96	; 150
    1064:	11 c0       	rjmp	.+34     	; 0x1088 <__floatsisf+0x6a>
    1066:	77 23       	and	r23, r23
    1068:	21 f0       	breq	.+8      	; 0x1072 <__floatsisf+0x54>
    106a:	9e e8       	ldi	r25, 0x8E	; 142
    106c:	87 2f       	mov	r24, r23
    106e:	76 2f       	mov	r23, r22
    1070:	05 c0       	rjmp	.+10     	; 0x107c <__floatsisf+0x5e>
    1072:	66 23       	and	r22, r22
    1074:	71 f0       	breq	.+28     	; 0x1092 <__floatsisf+0x74>
    1076:	96 e8       	ldi	r25, 0x86	; 134
    1078:	86 2f       	mov	r24, r22
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	2a f0       	brmi	.+10     	; 0x108a <__floatsisf+0x6c>
    1080:	9a 95       	dec	r25
    1082:	66 0f       	add	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	88 1f       	adc	r24, r24
    1088:	da f7       	brpl	.-10     	; 0x1080 <__floatsisf+0x62>
    108a:	88 0f       	add	r24, r24
    108c:	96 95       	lsr	r25
    108e:	87 95       	ror	r24
    1090:	97 f9       	bld	r25, 7
    1092:	08 95       	ret

00001094 <__fp_inf>:
    1094:	97 f9       	bld	r25, 7
    1096:	9f 67       	ori	r25, 0x7F	; 127
    1098:	80 e8       	ldi	r24, 0x80	; 128
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	08 95       	ret

000010a0 <__fp_nan>:
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	80 ec       	ldi	r24, 0xC0	; 192
    10a4:	08 95       	ret

000010a6 <__fp_pscA>:
    10a6:	00 24       	eor	r0, r0
    10a8:	0a 94       	dec	r0
    10aa:	16 16       	cp	r1, r22
    10ac:	17 06       	cpc	r1, r23
    10ae:	18 06       	cpc	r1, r24
    10b0:	09 06       	cpc	r0, r25
    10b2:	08 95       	ret

000010b4 <__fp_pscB>:
    10b4:	00 24       	eor	r0, r0
    10b6:	0a 94       	dec	r0
    10b8:	12 16       	cp	r1, r18
    10ba:	13 06       	cpc	r1, r19
    10bc:	14 06       	cpc	r1, r20
    10be:	05 06       	cpc	r0, r21
    10c0:	08 95       	ret

000010c2 <__fp_round>:
    10c2:	09 2e       	mov	r0, r25
    10c4:	03 94       	inc	r0
    10c6:	00 0c       	add	r0, r0
    10c8:	11 f4       	brne	.+4      	; 0x10ce <__fp_round+0xc>
    10ca:	88 23       	and	r24, r24
    10cc:	52 f0       	brmi	.+20     	; 0x10e2 <__fp_round+0x20>
    10ce:	bb 0f       	add	r27, r27
    10d0:	40 f4       	brcc	.+16     	; 0x10e2 <__fp_round+0x20>
    10d2:	bf 2b       	or	r27, r31
    10d4:	11 f4       	brne	.+4      	; 0x10da <__fp_round+0x18>
    10d6:	60 ff       	sbrs	r22, 0
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <__fp_round+0x20>
    10da:	6f 5f       	subi	r22, 0xFF	; 255
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	08 95       	ret

000010e4 <__fp_split3>:
    10e4:	57 fd       	sbrc	r21, 7
    10e6:	90 58       	subi	r25, 0x80	; 128
    10e8:	44 0f       	add	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	59 f0       	breq	.+22     	; 0x1104 <__fp_splitA+0x10>
    10ee:	5f 3f       	cpi	r21, 0xFF	; 255
    10f0:	71 f0       	breq	.+28     	; 0x110e <__fp_splitA+0x1a>
    10f2:	47 95       	ror	r20

000010f4 <__fp_splitA>:
    10f4:	88 0f       	add	r24, r24
    10f6:	97 fb       	bst	r25, 7
    10f8:	99 1f       	adc	r25, r25
    10fa:	61 f0       	breq	.+24     	; 0x1114 <__fp_splitA+0x20>
    10fc:	9f 3f       	cpi	r25, 0xFF	; 255
    10fe:	79 f0       	breq	.+30     	; 0x111e <__fp_splitA+0x2a>
    1100:	87 95       	ror	r24
    1102:	08 95       	ret
    1104:	12 16       	cp	r1, r18
    1106:	13 06       	cpc	r1, r19
    1108:	14 06       	cpc	r1, r20
    110a:	55 1f       	adc	r21, r21
    110c:	f2 cf       	rjmp	.-28     	; 0x10f2 <__fp_split3+0xe>
    110e:	46 95       	lsr	r20
    1110:	f1 df       	rcall	.-30     	; 0x10f4 <__fp_splitA>
    1112:	08 c0       	rjmp	.+16     	; 0x1124 <__fp_splitA+0x30>
    1114:	16 16       	cp	r1, r22
    1116:	17 06       	cpc	r1, r23
    1118:	18 06       	cpc	r1, r24
    111a:	99 1f       	adc	r25, r25
    111c:	f1 cf       	rjmp	.-30     	; 0x1100 <__fp_splitA+0xc>
    111e:	86 95       	lsr	r24
    1120:	71 05       	cpc	r23, r1
    1122:	61 05       	cpc	r22, r1
    1124:	08 94       	sec
    1126:	08 95       	ret

00001128 <__fp_zero>:
    1128:	e8 94       	clt

0000112a <__fp_szero>:
    112a:	bb 27       	eor	r27, r27
    112c:	66 27       	eor	r22, r22
    112e:	77 27       	eor	r23, r23
    1130:	cb 01       	movw	r24, r22
    1132:	97 f9       	bld	r25, 7
    1134:	08 95       	ret

00001136 <__mulsf3>:
    1136:	0e 94 ae 08 	call	0x115c	; 0x115c <__mulsf3x>
    113a:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_round>
    113e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_pscA>
    1142:	38 f0       	brcs	.+14     	; 0x1152 <__mulsf3+0x1c>
    1144:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fp_pscB>
    1148:	20 f0       	brcs	.+8      	; 0x1152 <__mulsf3+0x1c>
    114a:	95 23       	and	r25, r21
    114c:	11 f0       	breq	.+4      	; 0x1152 <__mulsf3+0x1c>
    114e:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>
    1152:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__fp_nan>
    1156:	11 24       	eor	r1, r1
    1158:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_szero>

0000115c <__mulsf3x>:
    115c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_split3>
    1160:	70 f3       	brcs	.-36     	; 0x113e <__mulsf3+0x8>

00001162 <__mulsf3_pse>:
    1162:	95 9f       	mul	r25, r21
    1164:	c1 f3       	breq	.-16     	; 0x1156 <__mulsf3+0x20>
    1166:	95 0f       	add	r25, r21
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	55 1f       	adc	r21, r21
    116c:	62 9f       	mul	r22, r18
    116e:	f0 01       	movw	r30, r0
    1170:	72 9f       	mul	r23, r18
    1172:	bb 27       	eor	r27, r27
    1174:	f0 0d       	add	r31, r0
    1176:	b1 1d       	adc	r27, r1
    1178:	63 9f       	mul	r22, r19
    117a:	aa 27       	eor	r26, r26
    117c:	f0 0d       	add	r31, r0
    117e:	b1 1d       	adc	r27, r1
    1180:	aa 1f       	adc	r26, r26
    1182:	64 9f       	mul	r22, r20
    1184:	66 27       	eor	r22, r22
    1186:	b0 0d       	add	r27, r0
    1188:	a1 1d       	adc	r26, r1
    118a:	66 1f       	adc	r22, r22
    118c:	82 9f       	mul	r24, r18
    118e:	22 27       	eor	r18, r18
    1190:	b0 0d       	add	r27, r0
    1192:	a1 1d       	adc	r26, r1
    1194:	62 1f       	adc	r22, r18
    1196:	73 9f       	mul	r23, r19
    1198:	b0 0d       	add	r27, r0
    119a:	a1 1d       	adc	r26, r1
    119c:	62 1f       	adc	r22, r18
    119e:	83 9f       	mul	r24, r19
    11a0:	a0 0d       	add	r26, r0
    11a2:	61 1d       	adc	r22, r1
    11a4:	22 1f       	adc	r18, r18
    11a6:	74 9f       	mul	r23, r20
    11a8:	33 27       	eor	r19, r19
    11aa:	a0 0d       	add	r26, r0
    11ac:	61 1d       	adc	r22, r1
    11ae:	23 1f       	adc	r18, r19
    11b0:	84 9f       	mul	r24, r20
    11b2:	60 0d       	add	r22, r0
    11b4:	21 1d       	adc	r18, r1
    11b6:	82 2f       	mov	r24, r18
    11b8:	76 2f       	mov	r23, r22
    11ba:	6a 2f       	mov	r22, r26
    11bc:	11 24       	eor	r1, r1
    11be:	9f 57       	subi	r25, 0x7F	; 127
    11c0:	50 40       	sbci	r21, 0x00	; 0
    11c2:	9a f0       	brmi	.+38     	; 0x11ea <__mulsf3_pse+0x88>
    11c4:	f1 f0       	breq	.+60     	; 0x1202 <__mulsf3_pse+0xa0>
    11c6:	88 23       	and	r24, r24
    11c8:	4a f0       	brmi	.+18     	; 0x11dc <__mulsf3_pse+0x7a>
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	bb 1f       	adc	r27, r27
    11d0:	66 1f       	adc	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	88 1f       	adc	r24, r24
    11d6:	91 50       	subi	r25, 0x01	; 1
    11d8:	50 40       	sbci	r21, 0x00	; 0
    11da:	a9 f7       	brne	.-22     	; 0x11c6 <__mulsf3_pse+0x64>
    11dc:	9e 3f       	cpi	r25, 0xFE	; 254
    11de:	51 05       	cpc	r21, r1
    11e0:	80 f0       	brcs	.+32     	; 0x1202 <__mulsf3_pse+0xa0>
    11e2:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>
    11e6:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_szero>
    11ea:	5f 3f       	cpi	r21, 0xFF	; 255
    11ec:	e4 f3       	brlt	.-8      	; 0x11e6 <__mulsf3_pse+0x84>
    11ee:	98 3e       	cpi	r25, 0xE8	; 232
    11f0:	d4 f3       	brlt	.-12     	; 0x11e6 <__mulsf3_pse+0x84>
    11f2:	86 95       	lsr	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	b7 95       	ror	r27
    11fa:	f7 95       	ror	r31
    11fc:	e7 95       	ror	r30
    11fe:	9f 5f       	subi	r25, 0xFF	; 255
    1200:	c1 f7       	brne	.-16     	; 0x11f2 <__mulsf3_pse+0x90>
    1202:	fe 2b       	or	r31, r30
    1204:	88 0f       	add	r24, r24
    1206:	91 1d       	adc	r25, r1
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	97 f9       	bld	r25, 7
    120e:	08 95       	ret

00001210 <pow>:
    1210:	fa 01       	movw	r30, r20
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	30 96       	adiw	r30, 0x00	; 0
    1218:	21 05       	cpc	r18, r1
    121a:	31 05       	cpc	r19, r1
    121c:	a1 f1       	breq	.+104    	; 0x1286 <pow+0x76>
    121e:	61 15       	cp	r22, r1
    1220:	71 05       	cpc	r23, r1
    1222:	61 f4       	brne	.+24     	; 0x123c <pow+0x2c>
    1224:	80 38       	cpi	r24, 0x80	; 128
    1226:	bf e3       	ldi	r27, 0x3F	; 63
    1228:	9b 07       	cpc	r25, r27
    122a:	49 f1       	breq	.+82     	; 0x127e <pow+0x6e>
    122c:	68 94       	set
    122e:	90 38       	cpi	r25, 0x80	; 128
    1230:	81 05       	cpc	r24, r1
    1232:	61 f0       	breq	.+24     	; 0x124c <pow+0x3c>
    1234:	80 38       	cpi	r24, 0x80	; 128
    1236:	bf ef       	ldi	r27, 0xFF	; 255
    1238:	9b 07       	cpc	r25, r27
    123a:	41 f0       	breq	.+16     	; 0x124c <pow+0x3c>
    123c:	99 23       	and	r25, r25
    123e:	4a f5       	brpl	.+82     	; 0x1292 <pow+0x82>
    1240:	ff 3f       	cpi	r31, 0xFF	; 255
    1242:	e1 05       	cpc	r30, r1
    1244:	31 05       	cpc	r19, r1
    1246:	21 05       	cpc	r18, r1
    1248:	19 f1       	breq	.+70     	; 0x1290 <pow+0x80>
    124a:	e8 94       	clt
    124c:	08 94       	sec
    124e:	e7 95       	ror	r30
    1250:	d9 01       	movw	r26, r18
    1252:	aa 23       	and	r26, r26
    1254:	29 f4       	brne	.+10     	; 0x1260 <pow+0x50>
    1256:	ab 2f       	mov	r26, r27
    1258:	be 2f       	mov	r27, r30
    125a:	f8 5f       	subi	r31, 0xF8	; 248
    125c:	d0 f3       	brcs	.-12     	; 0x1252 <pow+0x42>
    125e:	10 c0       	rjmp	.+32     	; 0x1280 <pow+0x70>
    1260:	ff 5f       	subi	r31, 0xFF	; 255
    1262:	70 f4       	brcc	.+28     	; 0x1280 <pow+0x70>
    1264:	a6 95       	lsr	r26
    1266:	e0 f7       	brcc	.-8      	; 0x1260 <pow+0x50>
    1268:	f7 39       	cpi	r31, 0x97	; 151
    126a:	50 f0       	brcs	.+20     	; 0x1280 <pow+0x70>
    126c:	19 f0       	breq	.+6      	; 0x1274 <pow+0x64>
    126e:	ff 3a       	cpi	r31, 0xAF	; 175
    1270:	38 f4       	brcc	.+14     	; 0x1280 <pow+0x70>
    1272:	9f 77       	andi	r25, 0x7F	; 127
    1274:	9f 93       	push	r25
    1276:	0d d0       	rcall	.+26     	; 0x1292 <pow+0x82>
    1278:	0f 90       	pop	r0
    127a:	07 fc       	sbrc	r0, 7
    127c:	90 58       	subi	r25, 0x80	; 128
    127e:	08 95       	ret
    1280:	46 f0       	brts	.+16     	; 0x1292 <pow+0x82>
    1282:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__fp_nan>
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	80 e8       	ldi	r24, 0x80	; 128
    128c:	9f e3       	ldi	r25, 0x3F	; 63
    128e:	08 95       	ret
    1290:	4f e7       	ldi	r20, 0x7F	; 127
    1292:	9f 77       	andi	r25, 0x7F	; 127
    1294:	5f 93       	push	r21
    1296:	4f 93       	push	r20
    1298:	3f 93       	push	r19
    129a:	2f 93       	push	r18
    129c:	0e 94 03 0a 	call	0x1406	; 0x1406 <log>
    12a0:	2f 91       	pop	r18
    12a2:	3f 91       	pop	r19
    12a4:	4f 91       	pop	r20
    12a6:	5f 91       	pop	r21
    12a8:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
    12ac:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <exp>
    12b0:	29 f4       	brne	.+10     	; 0x12bc <pow+0xac>
    12b2:	16 f0       	brts	.+4      	; 0x12b8 <pow+0xa8>
    12b4:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>
    12b8:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_zero>
    12bc:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__fp_nan>

000012c0 <exp>:
    12c0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_splitA>
    12c4:	a8 f3       	brcs	.-22     	; 0x12b0 <pow+0xa0>
    12c6:	96 38       	cpi	r25, 0x86	; 134
    12c8:	a0 f7       	brcc	.-24     	; 0x12b2 <pow+0xa2>
    12ca:	07 f8       	bld	r0, 7
    12cc:	0f 92       	push	r0
    12ce:	e8 94       	clt
    12d0:	2b e3       	ldi	r18, 0x3B	; 59
    12d2:	3a ea       	ldi	r19, 0xAA	; 170
    12d4:	48 eb       	ldi	r20, 0xB8	; 184
    12d6:	5f e7       	ldi	r21, 0x7F	; 127
    12d8:	0e 94 b1 08 	call	0x1162	; 0x1162 <__mulsf3_pse>
    12dc:	0f 92       	push	r0
    12de:	0f 92       	push	r0
    12e0:	0f 92       	push	r0
    12e2:	4d b7       	in	r20, 0x3d	; 61
    12e4:	5e b7       	in	r21, 0x3e	; 62
    12e6:	0f 92       	push	r0
    12e8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <modf>
    12ec:	ee e0       	ldi	r30, 0x0E	; 14
    12ee:	f1 e0       	ldi	r31, 0x01	; 1
    12f0:	0e 94 92 09 	call	0x1324	; 0x1324 <__fp_powser>
    12f4:	4f 91       	pop	r20
    12f6:	5f 91       	pop	r21
    12f8:	ef 91       	pop	r30
    12fa:	ff 91       	pop	r31
    12fc:	e5 95       	asr	r30
    12fe:	ee 1f       	adc	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	49 f0       	breq	.+18     	; 0x1316 <exp+0x56>
    1304:	fe 57       	subi	r31, 0x7E	; 126
    1306:	e0 68       	ori	r30, 0x80	; 128
    1308:	44 27       	eor	r20, r20
    130a:	ee 0f       	add	r30, r30
    130c:	44 1f       	adc	r20, r20
    130e:	fa 95       	dec	r31
    1310:	e1 f7       	brne	.-8      	; 0x130a <exp+0x4a>
    1312:	41 95       	neg	r20
    1314:	55 0b       	sbc	r21, r21
    1316:	0e 94 c5 09 	call	0x138a	; 0x138a <ldexp>
    131a:	0f 90       	pop	r0
    131c:	07 fe       	sbrs	r0, 7
    131e:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <inverse>
    1322:	08 95       	ret

00001324 <__fp_powser>:
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	1f 93       	push	r17
    132a:	0f 93       	push	r16
    132c:	ff 92       	push	r15
    132e:	ef 92       	push	r14
    1330:	df 92       	push	r13
    1332:	7b 01       	movw	r14, r22
    1334:	8c 01       	movw	r16, r24
    1336:	68 94       	set
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <__fp_powser+0x22>
    133a:	da 2e       	mov	r13, r26
    133c:	ef 01       	movw	r28, r30
    133e:	0e 94 ae 08 	call	0x115c	; 0x115c <__mulsf3x>
    1342:	fe 01       	movw	r30, r28
    1344:	e8 94       	clt
    1346:	a5 91       	lpm	r26, Z+
    1348:	25 91       	lpm	r18, Z+
    134a:	35 91       	lpm	r19, Z+
    134c:	45 91       	lpm	r20, Z+
    134e:	55 91       	lpm	r21, Z+
    1350:	a6 f3       	brts	.-24     	; 0x133a <__fp_powser+0x16>
    1352:	ef 01       	movw	r28, r30
    1354:	0e 94 10 07 	call	0xe20	; 0xe20 <__addsf3x>
    1358:	fe 01       	movw	r30, r28
    135a:	97 01       	movw	r18, r14
    135c:	a8 01       	movw	r20, r16
    135e:	da 94       	dec	r13
    1360:	69 f7       	brne	.-38     	; 0x133c <__fp_powser+0x18>
    1362:	df 90       	pop	r13
    1364:	ef 90       	pop	r14
    1366:	ff 90       	pop	r15
    1368:	0f 91       	pop	r16
    136a:	1f 91       	pop	r17
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <inverse>:
    1372:	9b 01       	movw	r18, r22
    1374:	ac 01       	movw	r20, r24
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	80 e8       	ldi	r24, 0x80	; 128
    137c:	9f e3       	ldi	r25, 0x3F	; 63
    137e:	0c 94 65 07 	jmp	0xeca	; 0xeca <__divsf3>
    1382:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>
    1386:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__fp_mpack>

0000138a <ldexp>:
    138a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_splitA>
    138e:	d8 f3       	brcs	.-10     	; 0x1386 <inverse+0x14>
    1390:	99 23       	and	r25, r25
    1392:	c9 f3       	breq	.-14     	; 0x1386 <inverse+0x14>
    1394:	94 0f       	add	r25, r20
    1396:	51 1d       	adc	r21, r1
    1398:	a3 f3       	brvs	.-24     	; 0x1382 <inverse+0x10>
    139a:	91 50       	subi	r25, 0x01	; 1
    139c:	50 40       	sbci	r21, 0x00	; 0
    139e:	94 f0       	brlt	.+36     	; 0x13c4 <ldexp+0x3a>
    13a0:	59 f0       	breq	.+22     	; 0x13b8 <ldexp+0x2e>
    13a2:	88 23       	and	r24, r24
    13a4:	32 f0       	brmi	.+12     	; 0x13b2 <ldexp+0x28>
    13a6:	66 0f       	add	r22, r22
    13a8:	77 1f       	adc	r23, r23
    13aa:	88 1f       	adc	r24, r24
    13ac:	91 50       	subi	r25, 0x01	; 1
    13ae:	50 40       	sbci	r21, 0x00	; 0
    13b0:	c1 f7       	brne	.-16     	; 0x13a2 <ldexp+0x18>
    13b2:	9e 3f       	cpi	r25, 0xFE	; 254
    13b4:	51 05       	cpc	r21, r1
    13b6:	2c f7       	brge	.-54     	; 0x1382 <inverse+0x10>
    13b8:	88 0f       	add	r24, r24
    13ba:	91 1d       	adc	r25, r1
    13bc:	96 95       	lsr	r25
    13be:	87 95       	ror	r24
    13c0:	97 f9       	bld	r25, 7
    13c2:	08 95       	ret
    13c4:	5f 3f       	cpi	r21, 0xFF	; 255
    13c6:	ac f0       	brlt	.+42     	; 0x13f2 <ldexp+0x68>
    13c8:	98 3e       	cpi	r25, 0xE8	; 232
    13ca:	9c f0       	brlt	.+38     	; 0x13f2 <ldexp+0x68>
    13cc:	bb 27       	eor	r27, r27
    13ce:	86 95       	lsr	r24
    13d0:	77 95       	ror	r23
    13d2:	67 95       	ror	r22
    13d4:	b7 95       	ror	r27
    13d6:	08 f4       	brcc	.+2      	; 0x13da <ldexp+0x50>
    13d8:	b1 60       	ori	r27, 0x01	; 1
    13da:	93 95       	inc	r25
    13dc:	c1 f7       	brne	.-16     	; 0x13ce <ldexp+0x44>
    13de:	bb 0f       	add	r27, r27
    13e0:	58 f7       	brcc	.-42     	; 0x13b8 <ldexp+0x2e>
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <ldexp+0x5e>
    13e4:	60 ff       	sbrs	r22, 0
    13e6:	e8 cf       	rjmp	.-48     	; 0x13b8 <ldexp+0x2e>
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	8f 4f       	sbci	r24, 0xFF	; 255
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	e3 cf       	rjmp	.-58     	; 0x13b8 <ldexp+0x2e>
    13f2:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_szero>
    13f6:	16 f0       	brts	.+4      	; 0x13fc <ldexp+0x72>
    13f8:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__fp_mpack>
    13fc:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__fp_nan>
    1400:	68 94       	set
    1402:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>

00001406 <log>:
    1406:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_splitA>
    140a:	a8 f3       	brcs	.-22     	; 0x13f6 <ldexp+0x6c>
    140c:	99 23       	and	r25, r25
    140e:	c1 f3       	breq	.-16     	; 0x1400 <ldexp+0x76>
    1410:	ae f3       	brts	.-22     	; 0x13fc <ldexp+0x72>
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	1f 93       	push	r17
    1418:	0f 93       	push	r16
    141a:	ff 92       	push	r15
    141c:	c9 2f       	mov	r28, r25
    141e:	dd 27       	eor	r29, r29
    1420:	88 23       	and	r24, r24
    1422:	2a f0       	brmi	.+10     	; 0x142e <log+0x28>
    1424:	21 97       	sbiw	r28, 0x01	; 1
    1426:	66 0f       	add	r22, r22
    1428:	77 1f       	adc	r23, r23
    142a:	88 1f       	adc	r24, r24
    142c:	da f7       	brpl	.-10     	; 0x1424 <log+0x1e>
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e8       	ldi	r20, 0x80	; 128
    1434:	5f eb       	ldi	r21, 0xBF	; 191
    1436:	9f e3       	ldi	r25, 0x3F	; 63
    1438:	88 39       	cpi	r24, 0x98	; 152
    143a:	20 f0       	brcs	.+8      	; 0x1444 <log+0x3e>
    143c:	80 3e       	cpi	r24, 0xE0	; 224
    143e:	38 f0       	brcs	.+14     	; 0x144e <log+0x48>
    1440:	21 96       	adiw	r28, 0x01	; 1
    1442:	8f 77       	andi	r24, 0x7F	; 127
    1444:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__addsf3>
    1448:	e6 e3       	ldi	r30, 0x36	; 54
    144a:	f1 e0       	ldi	r31, 0x01	; 1
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <log+0x50>
    144e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__addsf3>
    1452:	e3 e6       	ldi	r30, 0x63	; 99
    1454:	f1 e0       	ldi	r31, 0x01	; 1
    1456:	0e 94 92 09 	call	0x1324	; 0x1324 <__fp_powser>
    145a:	8b 01       	movw	r16, r22
    145c:	be 01       	movw	r22, r28
    145e:	ec 01       	movw	r28, r24
    1460:	fb 2e       	mov	r15, r27
    1462:	6f 57       	subi	r22, 0x7F	; 127
    1464:	71 09       	sbc	r23, r1
    1466:	75 95       	asr	r23
    1468:	77 1f       	adc	r23, r23
    146a:	88 0b       	sbc	r24, r24
    146c:	99 0b       	sbc	r25, r25
    146e:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatsisf>
    1472:	28 e1       	ldi	r18, 0x18	; 24
    1474:	32 e7       	ldi	r19, 0x72	; 114
    1476:	41 e3       	ldi	r20, 0x31	; 49
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 ae 08 	call	0x115c	; 0x115c <__mulsf3x>
    147e:	af 2d       	mov	r26, r15
    1480:	98 01       	movw	r18, r16
    1482:	ae 01       	movw	r20, r28
    1484:	ff 90       	pop	r15
    1486:	0f 91       	pop	r16
    1488:	1f 91       	pop	r17
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	0e 94 10 07 	call	0xe20	; 0xe20 <__addsf3x>
    1492:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_round>

00001496 <modf>:
    1496:	fa 01       	movw	r30, r20
    1498:	dc 01       	movw	r26, r24
    149a:	aa 0f       	add	r26, r26
    149c:	bb 1f       	adc	r27, r27
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	bf 57       	subi	r27, 0x7F	; 127
    14a4:	28 f4       	brcc	.+10     	; 0x14b0 <modf+0x1a>
    14a6:	22 27       	eor	r18, r18
    14a8:	33 27       	eor	r19, r19
    14aa:	44 27       	eor	r20, r20
    14ac:	50 78       	andi	r21, 0x80	; 128
    14ae:	20 c0       	rjmp	.+64     	; 0x14f0 <modf+0x5a>
    14b0:	b7 51       	subi	r27, 0x17	; 23
    14b2:	90 f4       	brcc	.+36     	; 0x14d8 <modf+0x42>
    14b4:	ab 2f       	mov	r26, r27
    14b6:	00 24       	eor	r0, r0
    14b8:	46 95       	lsr	r20
    14ba:	37 95       	ror	r19
    14bc:	27 95       	ror	r18
    14be:	01 1c       	adc	r0, r1
    14c0:	a3 95       	inc	r26
    14c2:	d2 f3       	brmi	.-12     	; 0x14b8 <modf+0x22>
    14c4:	00 20       	and	r0, r0
    14c6:	71 f0       	breq	.+28     	; 0x14e4 <modf+0x4e>
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	44 1f       	adc	r20, r20
    14ce:	b3 95       	inc	r27
    14d0:	da f3       	brmi	.-10     	; 0x14c8 <modf+0x32>
    14d2:	0e d0       	rcall	.+28     	; 0x14f0 <modf+0x5a>
    14d4:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__subsf3>
    14d8:	61 30       	cpi	r22, 0x01	; 1
    14da:	71 05       	cpc	r23, r1
    14dc:	a0 e8       	ldi	r26, 0x80	; 128
    14de:	8a 07       	cpc	r24, r26
    14e0:	b9 46       	sbci	r27, 0x69	; 105
    14e2:	30 f4       	brcc	.+12     	; 0x14f0 <modf+0x5a>
    14e4:	9b 01       	movw	r18, r22
    14e6:	ac 01       	movw	r20, r24
    14e8:	66 27       	eor	r22, r22
    14ea:	77 27       	eor	r23, r23
    14ec:	88 27       	eor	r24, r24
    14ee:	90 78       	andi	r25, 0x80	; 128
    14f0:	30 96       	adiw	r30, 0x00	; 0
    14f2:	21 f0       	breq	.+8      	; 0x14fc <modf+0x66>
    14f4:	20 83       	st	Z, r18
    14f6:	31 83       	std	Z+1, r19	; 0x01
    14f8:	42 83       	std	Z+2, r20	; 0x02
    14fa:	53 83       	std	Z+3, r21	; 0x03
    14fc:	08 95       	ret

000014fe <__fp_mpack>:
    14fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1500:	31 f0       	breq	.+12     	; 0x150e <__fp_mpack_finite+0xc>

00001502 <__fp_mpack_finite>:
    1502:	91 50       	subi	r25, 0x01	; 1
    1504:	20 f4       	brcc	.+8      	; 0x150e <__fp_mpack_finite+0xc>
    1506:	87 95       	ror	r24
    1508:	77 95       	ror	r23
    150a:	67 95       	ror	r22
    150c:	b7 95       	ror	r27
    150e:	88 0f       	add	r24, r24
    1510:	91 1d       	adc	r25, r1
    1512:	96 95       	lsr	r25
    1514:	87 95       	ror	r24
    1516:	97 f9       	bld	r25, 7
    1518:	08 95       	ret

0000151a <__divmodhi4>:
    151a:	97 fb       	bst	r25, 7
    151c:	07 2e       	mov	r0, r23
    151e:	16 f4       	brtc	.+4      	; 0x1524 <__divmodhi4+0xa>
    1520:	00 94       	com	r0
    1522:	07 d0       	rcall	.+14     	; 0x1532 <__divmodhi4_neg1>
    1524:	77 fd       	sbrc	r23, 7
    1526:	09 d0       	rcall	.+18     	; 0x153a <__divmodhi4_neg2>
    1528:	0e 94 ce 0a 	call	0x159c	; 0x159c <__udivmodhi4>
    152c:	07 fc       	sbrc	r0, 7
    152e:	05 d0       	rcall	.+10     	; 0x153a <__divmodhi4_neg2>
    1530:	3e f4       	brtc	.+14     	; 0x1540 <__divmodhi4_exit>

00001532 <__divmodhi4_neg1>:
    1532:	90 95       	com	r25
    1534:	81 95       	neg	r24
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	08 95       	ret

0000153a <__divmodhi4_neg2>:
    153a:	70 95       	com	r23
    153c:	61 95       	neg	r22
    153e:	7f 4f       	sbci	r23, 0xFF	; 255

00001540 <__divmodhi4_exit>:
    1540:	08 95       	ret

00001542 <__divmodsi4>:
    1542:	05 2e       	mov	r0, r21
    1544:	97 fb       	bst	r25, 7
    1546:	1e f4       	brtc	.+6      	; 0x154e <__divmodsi4+0xc>
    1548:	00 94       	com	r0
    154a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__negsi2>
    154e:	57 fd       	sbrc	r21, 7
    1550:	07 d0       	rcall	.+14     	; 0x1560 <__divmodsi4_neg2>
    1552:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__udivmodsi4>
    1556:	07 fc       	sbrc	r0, 7
    1558:	03 d0       	rcall	.+6      	; 0x1560 <__divmodsi4_neg2>
    155a:	4e f4       	brtc	.+18     	; 0x156e <__divmodsi4_exit>
    155c:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__negsi2>

00001560 <__divmodsi4_neg2>:
    1560:	50 95       	com	r21
    1562:	40 95       	com	r20
    1564:	30 95       	com	r19
    1566:	21 95       	neg	r18
    1568:	3f 4f       	sbci	r19, 0xFF	; 255
    156a:	4f 4f       	sbci	r20, 0xFF	; 255
    156c:	5f 4f       	sbci	r21, 0xFF	; 255

0000156e <__divmodsi4_exit>:
    156e:	08 95       	ret

00001570 <__negsi2>:
    1570:	90 95       	com	r25
    1572:	80 95       	com	r24
    1574:	70 95       	com	r23
    1576:	61 95       	neg	r22
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	8f 4f       	sbci	r24, 0xFF	; 255
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	08 95       	ret

00001580 <__tablejump2__>:
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	05 90       	lpm	r0, Z+
    1586:	f4 91       	lpm	r31, Z
    1588:	e0 2d       	mov	r30, r0
    158a:	09 94       	ijmp

0000158c <__mulshisi3>:
    158c:	b7 ff       	sbrs	r27, 7
    158e:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__muluhisi3>

00001592 <__mulohisi3>:
    1592:	0e 94 04 0b 	call	0x1608	; 0x1608 <__muluhisi3>
    1596:	82 1b       	sub	r24, r18
    1598:	93 0b       	sbc	r25, r19
    159a:	08 95       	ret

0000159c <__udivmodhi4>:
    159c:	aa 1b       	sub	r26, r26
    159e:	bb 1b       	sub	r27, r27
    15a0:	51 e1       	ldi	r21, 0x11	; 17
    15a2:	07 c0       	rjmp	.+14     	; 0x15b2 <__udivmodhi4_ep>

000015a4 <__udivmodhi4_loop>:
    15a4:	aa 1f       	adc	r26, r26
    15a6:	bb 1f       	adc	r27, r27
    15a8:	a6 17       	cp	r26, r22
    15aa:	b7 07       	cpc	r27, r23
    15ac:	10 f0       	brcs	.+4      	; 0x15b2 <__udivmodhi4_ep>
    15ae:	a6 1b       	sub	r26, r22
    15b0:	b7 0b       	sbc	r27, r23

000015b2 <__udivmodhi4_ep>:
    15b2:	88 1f       	adc	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	5a 95       	dec	r21
    15b8:	a9 f7       	brne	.-22     	; 0x15a4 <__udivmodhi4_loop>
    15ba:	80 95       	com	r24
    15bc:	90 95       	com	r25
    15be:	bc 01       	movw	r22, r24
    15c0:	cd 01       	movw	r24, r26
    15c2:	08 95       	ret

000015c4 <__udivmodsi4>:
    15c4:	a1 e2       	ldi	r26, 0x21	; 33
    15c6:	1a 2e       	mov	r1, r26
    15c8:	aa 1b       	sub	r26, r26
    15ca:	bb 1b       	sub	r27, r27
    15cc:	fd 01       	movw	r30, r26
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <__udivmodsi4_ep>

000015d0 <__udivmodsi4_loop>:
    15d0:	aa 1f       	adc	r26, r26
    15d2:	bb 1f       	adc	r27, r27
    15d4:	ee 1f       	adc	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	a2 17       	cp	r26, r18
    15da:	b3 07       	cpc	r27, r19
    15dc:	e4 07       	cpc	r30, r20
    15de:	f5 07       	cpc	r31, r21
    15e0:	20 f0       	brcs	.+8      	; 0x15ea <__udivmodsi4_ep>
    15e2:	a2 1b       	sub	r26, r18
    15e4:	b3 0b       	sbc	r27, r19
    15e6:	e4 0b       	sbc	r30, r20
    15e8:	f5 0b       	sbc	r31, r21

000015ea <__udivmodsi4_ep>:
    15ea:	66 1f       	adc	r22, r22
    15ec:	77 1f       	adc	r23, r23
    15ee:	88 1f       	adc	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	1a 94       	dec	r1
    15f4:	69 f7       	brne	.-38     	; 0x15d0 <__udivmodsi4_loop>
    15f6:	60 95       	com	r22
    15f8:	70 95       	com	r23
    15fa:	80 95       	com	r24
    15fc:	90 95       	com	r25
    15fe:	9b 01       	movw	r18, r22
    1600:	ac 01       	movw	r20, r24
    1602:	bd 01       	movw	r22, r26
    1604:	cf 01       	movw	r24, r30
    1606:	08 95       	ret

00001608 <__muluhisi3>:
    1608:	0e 94 0f 0b 	call	0x161e	; 0x161e <__umulhisi3>
    160c:	a5 9f       	mul	r26, r21
    160e:	90 0d       	add	r25, r0
    1610:	b4 9f       	mul	r27, r20
    1612:	90 0d       	add	r25, r0
    1614:	a4 9f       	mul	r26, r20
    1616:	80 0d       	add	r24, r0
    1618:	91 1d       	adc	r25, r1
    161a:	11 24       	eor	r1, r1
    161c:	08 95       	ret

0000161e <__umulhisi3>:
    161e:	a2 9f       	mul	r26, r18
    1620:	b0 01       	movw	r22, r0
    1622:	b3 9f       	mul	r27, r19
    1624:	c0 01       	movw	r24, r0
    1626:	a3 9f       	mul	r26, r19
    1628:	70 0d       	add	r23, r0
    162a:	81 1d       	adc	r24, r1
    162c:	11 24       	eor	r1, r1
    162e:	91 1d       	adc	r25, r1
    1630:	b2 9f       	mul	r27, r18
    1632:	70 0d       	add	r23, r0
    1634:	81 1d       	adc	r24, r1
    1636:	11 24       	eor	r1, r1
    1638:	91 1d       	adc	r25, r1
    163a:	08 95       	ret

0000163c <__itoa_ncheck>:
    163c:	bb 27       	eor	r27, r27
    163e:	4a 30       	cpi	r20, 0x0A	; 10
    1640:	31 f4       	brne	.+12     	; 0x164e <__itoa_ncheck+0x12>
    1642:	99 23       	and	r25, r25
    1644:	22 f4       	brpl	.+8      	; 0x164e <__itoa_ncheck+0x12>
    1646:	bd e2       	ldi	r27, 0x2D	; 45
    1648:	90 95       	com	r25
    164a:	81 95       	neg	r24
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__utoa_common>

00001652 <__utoa_ncheck>:
    1652:	bb 27       	eor	r27, r27

00001654 <__utoa_common>:
    1654:	fb 01       	movw	r30, r22
    1656:	55 27       	eor	r21, r21
    1658:	aa 27       	eor	r26, r26
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	aa 1f       	adc	r26, r26
    1660:	a4 17       	cp	r26, r20
    1662:	10 f0       	brcs	.+4      	; 0x1668 <__utoa_common+0x14>
    1664:	a4 1b       	sub	r26, r20
    1666:	83 95       	inc	r24
    1668:	50 51       	subi	r21, 0x10	; 16
    166a:	b9 f7       	brne	.-18     	; 0x165a <__utoa_common+0x6>
    166c:	a0 5d       	subi	r26, 0xD0	; 208
    166e:	aa 33       	cpi	r26, 0x3A	; 58
    1670:	08 f0       	brcs	.+2      	; 0x1674 <__utoa_common+0x20>
    1672:	a9 5d       	subi	r26, 0xD9	; 217
    1674:	a1 93       	st	Z+, r26
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	79 f7       	brne	.-34     	; 0x1658 <__utoa_common+0x4>
    167a:	b1 11       	cpse	r27, r1
    167c:	b1 93       	st	Z+, r27
    167e:	11 92       	st	Z+, r1
    1680:	cb 01       	movw	r24, r22
    1682:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <strrev>

00001686 <strrev>:
    1686:	dc 01       	movw	r26, r24
    1688:	fc 01       	movw	r30, r24
    168a:	67 2f       	mov	r22, r23
    168c:	71 91       	ld	r23, Z+
    168e:	77 23       	and	r23, r23
    1690:	e1 f7       	brne	.-8      	; 0x168a <strrev+0x4>
    1692:	32 97       	sbiw	r30, 0x02	; 2
    1694:	04 c0       	rjmp	.+8      	; 0x169e <strrev+0x18>
    1696:	7c 91       	ld	r23, X
    1698:	6d 93       	st	X+, r22
    169a:	70 83       	st	Z, r23
    169c:	62 91       	ld	r22, -Z
    169e:	ae 17       	cp	r26, r30
    16a0:	bf 07       	cpc	r27, r31
    16a2:	c8 f3       	brcs	.-14     	; 0x1696 <strrev+0x10>
    16a4:	08 95       	ret

000016a6 <_exit>:
    16a6:	f8 94       	cli

000016a8 <__stop_program>:
    16a8:	ff cf       	rjmp	.-2      	; 0x16a8 <__stop_program>
