
Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  000004cc  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080015e  0080015e  000005be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005f0  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000266  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024a  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d4  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004db  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000019e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_9>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec ec       	ldi	r30, 0xCC	; 204
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ae 35       	cpi	r26, 0x5E	; 94
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	ae e5       	ldi	r26, 0x5E	; 94
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a3 36       	cpi	r26, 0x63	; 99
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 41 01 	call	0x282	; 0x282 <main>
  e2:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <pwm_init>:
static char global_error_m2;

//Initialize PWM
void pwm_init()
{
	TCNT1 = 0;						//Timer 1 initialization
  ea:	10 92 85 00 	sts	0x0085, r1
  ee:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << WGM10) ;		//Fast PWM mode - Mode 15
  f2:	e0 e8       	ldi	r30, 0x80	; 128
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11) ;
  fc:	80 81       	ld	r24, Z
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) ;
 102:	a1 e8       	ldi	r26, 0x81	; 129
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	8c 91       	ld	r24, X
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13) ;
 10c:	8c 91       	ld	r24, X
 10e:	80 61       	ori	r24, 0x10	; 16
 110:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS10) ;			// set up timer with pre-scaler = 64
 112:	8c 91       	ld	r24, X
 114:	81 60       	ori	r24, 0x01	; 1
 116:	8c 93       	st	X, r24
	TCCR1A |= (1 << COM1B1) ;
 118:	80 81       	ld	r24, Z
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	80 83       	st	Z, r24
	OCR1A = 10000;
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	97 e2       	ldi	r25, 0x27	; 39
 122:	90 93 89 00 	sts	0x0089, r25
 126:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 1000;
 12a:	88 ee       	ldi	r24, 0xE8	; 232
 12c:	93 e0       	ldi	r25, 0x03	; 3
 12e:	90 93 8b 00 	sts	0x008B, r25
 132:	80 93 8a 00 	sts	0x008A, r24
 136:	08 95       	ret

00000138 <stop_pwm>:
}

void stop_pwm()
{
	TCCR1B &= ~(1 << CS10);
 138:	e1 e8       	ldi	r30, 0x81	; 129
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	80 83       	st	Z, r24
	TCCR1B &= ~(1 << CS11);
 142:	80 81       	ld	r24, Z
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	80 83       	st	Z, r24
	TCCR1B &= ~(1 << CS12);
 148:	80 81       	ld	r24, Z
 14a:	8b 7f       	andi	r24, 0xFB	; 251
 14c:	80 83       	st	Z, r24
	OCR1A = 0;
 14e:	10 92 89 00 	sts	0x0089, r1
 152:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 156:	10 92 8b 00 	sts	0x008B, r1
 15a:	10 92 8a 00 	sts	0x008A, r1
	TCNT1 = 0;						
 15e:	10 92 85 00 	sts	0x0085, r1
 162:	10 92 84 00 	sts	0x0084, r1
	TCCR1A &= ~(1 << WGM10) ;		
 166:	a0 e8       	ldi	r26, 0x80	; 128
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	8c 91       	ld	r24, X
 16c:	8e 7f       	andi	r24, 0xFE	; 254
 16e:	8c 93       	st	X, r24
	TCCR1A &= ~(1 << WGM11) ;
 170:	8c 91       	ld	r24, X
 172:	8d 7f       	andi	r24, 0xFD	; 253
 174:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << WGM12) ;
 176:	80 81       	ld	r24, Z
 178:	87 7f       	andi	r24, 0xF7	; 247
 17a:	80 83       	st	Z, r24
	TCCR1B &= ~(1 << WGM13) ;
 17c:	80 81       	ld	r24, Z
 17e:	8f 7e       	andi	r24, 0xEF	; 239
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <uart_init>:
// init uart
void uart_init(void)
{
	// set baud rate
	
	UBRR1 = ((F_CPU/(16*38400)) - 1);
 184:	89 e1       	ldi	r24, 0x19	; 25
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 cd 00 	sts	0x00CD, r25
 18c:	80 93 cc 00 	sts	0x00CC, r24
	
	// enable received and transmitter
	UCSR1B = ( 1 << RXEN1 ) | ( 1 << TXEN1 );
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	80 93 c9 00 	sts	0x00C9, r24
	
	// set frame format ( 8data, 2stop )
	UCSR1C = ( 1 << USBS1 ) | ( 3 << UCSZ10 );
 196:	8e e0       	ldi	r24, 0x0E	; 14
 198:	80 93 ca 00 	sts	0x00CA, r24
 19c:	08 95       	ret

0000019e <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
 19e:	e8 ec       	ldi	r30, 0xC8	; 200
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	90 81       	ld	r25, Z
 1a4:	95 ff       	sbrs	r25, 5
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <uart_transmit+0x4>
	;
	// put data into buffer, sends data
	UDR1 = data;
 1a8:	80 93 ce 00 	sts	0x00CE, r24
 1ac:	08 95       	ret

000001ae <uart_print>:
	return 0;
}

// write a string to the uart
void uart_print( char data[] )
{
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	8c 01       	movw	r16, r24
 1bc:	7c 01       	movw	r14, r24
	int c = 0;
	
	for ( c = 0; c < strlen(data); c++ )
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <uart_print+0x22>
	uart_transmit(data[c]);
 1c4:	f7 01       	movw	r30, r14
 1c6:	81 91       	ld	r24, Z+
 1c8:	7f 01       	movw	r14, r30
 1ca:	0e 94 cf 00 	call	0x19e	; 0x19e <uart_transmit>
// write a string to the uart
void uart_print( char data[] )
{
	int c = 0;
	
	for ( c = 0; c < strlen(data); c++ )
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	f8 01       	movw	r30, r16
 1d2:	01 90       	ld	r0, Z+
 1d4:	00 20       	and	r0, r0
 1d6:	e9 f7       	brne	.-6      	; 0x1d2 <uart_print+0x24>
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	e0 1b       	sub	r30, r16
 1dc:	f1 0b       	sbc	r31, r17
 1de:	ce 17       	cp	r28, r30
 1e0:	df 07       	cpc	r29, r31
 1e2:	80 f3       	brcs	.-32     	; 0x1c4 <uart_print+0x16>
	uart_transmit(data[c]);
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	08 95       	ret

000001f2 <__vector_9>:

// Reading
ISR(PCINT0_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
	unsigned char m2b_val;
	char plus_m2;
	char minus_m2 ;
	
	// Determine the current value of all channels.
	m2a_val = ((PINB & (1<<PINB4))>>PINB4);
 20a:	93 b1       	in	r25, 0x03	; 3
 20c:	92 95       	swap	r25
 20e:	91 70       	andi	r25, 0x01	; 1
 210:	29 2f       	mov	r18, r25
	m2b_val = ((PINB & (1<<PINB5))>>PINB5);
 212:	83 b1       	in	r24, 0x03	; 3
 214:	85 fb       	bst	r24, 5
 216:	88 27       	eor	r24, r24
 218:	80 f9       	bld	r24, 0
 21a:	38 2f       	mov	r19, r24
	
	// Determine if the last read of one channel is different from the current read of the other channel
	// which tells you whether you need to add or subtract from encoder count
	plus_m2 = m2a_val^last_m2b_val;
	minus_m2 = m2b_val^last_m2a_val;
 21c:	60 91 62 01 	lds	r22, 0x0162
	
	// add and/or subtract as determined above
	if(plus_m2)
 220:	40 91 61 01 	lds	r20, 0x0161
 224:	94 17       	cp	r25, r20
 226:	51 f0       	breq	.+20     	; 0x23c <__vector_9+0x4a>
	{
		global_counts_m2++;
 228:	40 91 5f 01 	lds	r20, 0x015F
 22c:	50 91 60 01 	lds	r21, 0x0160
 230:	4f 5f       	subi	r20, 0xFF	; 255
 232:	5f 4f       	sbci	r21, 0xFF	; 255
 234:	50 93 60 01 	sts	0x0160, r21
 238:	40 93 5f 01 	sts	0x015F, r20
	}
	if(minus_m2)
 23c:	36 17       	cp	r19, r22
 23e:	51 f0       	breq	.+20     	; 0x254 <__vector_9+0x62>
	{
		global_counts_m2--;
 240:	40 91 5f 01 	lds	r20, 0x015F
 244:	50 91 60 01 	lds	r21, 0x0160
 248:	41 50       	subi	r20, 0x01	; 1
 24a:	51 09       	sbc	r21, r1
 24c:	50 93 60 01 	sts	0x0160, r21
 250:	40 93 5f 01 	sts	0x015F, r20
	}
	
	// do some error checking to see if you missed an interrupt or something is wrong
	if(m2a_val != global_last_m2a_val && m2b_val != global_last_m2b_val)
 254:	22 23       	and	r18, r18
 256:	29 f0       	breq	.+10     	; 0x262 <__vector_9+0x70>
 258:	33 23       	and	r19, r19
 25a:	19 f0       	breq	.+6      	; 0x262 <__vector_9+0x70>
	{
		global_error_m2 = 1;
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	20 93 5e 01 	sts	0x015E, r18
	}
	
	// save state for next interrupt
	last_m2a_val = m2a_val;
 262:	90 93 62 01 	sts	0x0162, r25
	last_m2b_val = m2b_val;
 266:	80 93 61 01 	sts	0x0161, r24
}
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <main>:

int main()
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	64 97       	sbiw	r28, 0x14	; 20
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
	// Initialize serial communication
	uart_init();
 296:	0e 94 c2 00 	call	0x184	; 0x184 <uart_init>
	
	// Setting motor 2 PMW as output
	DDRB |= (1<<PORTB6) ;
 29a:	26 9a       	sbi	0x04, 6	; 4
	
	// Setting PORTB3 as input - Clockwise Rotation - Button A and Pull up register
	DDRB &= ~(1<< PORTB3) ;
 29c:	23 98       	cbi	0x04, 3	; 4
	PORTB |= (1<<PORTB3) ;
 29e:	2b 9a       	sbi	0x05, 3	; 5
	
	// Setting PORTB0 as input - Anticlockwise Rotation - Button C and Pull up register
	DDRB &= ~(1<< PORTB0) ;
 2a0:	20 98       	cbi	0x04, 0	; 4
	PORTB |= (1<<PORTB0) ;
 2a2:	28 9a       	sbi	0x05, 0	; 5
	
	// Enabling interrupt at PB4 and PB5
	PCMSK0 |= (1<<PCINT4) ;
 2a4:	eb e6       	ldi	r30, 0x6B	; 107
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 61       	ori	r24, 0x10	; 16
 2ac:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5) ;
 2ae:	80 81       	ld	r24, Z
 2b0:	80 62       	ori	r24, 0x20	; 32
 2b2:	80 83       	st	Z, r24
	
	// Enabling external interrupt
	PCICR |= (1<<PCIE0);
 2b4:	e8 e6       	ldi	r30, 0x68	; 104
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24
	sei();
 2be:	78 94       	sei
	int32_t reverse_count = 0;
	int32_t target_count  = 0;
	int motor_running_forward = 0;
	int motor_running_backward = 0;
	
	uart_print( "Welcome\n" );
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uart_print>
	uart_print( "Press Button A to move motor BACKWARD\n" );
 2c8:	89 e0       	ldi	r24, 0x09	; 9
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uart_print>
	uart_print( "Press Button C to move motor FORWARD\n" );
 2d0:	80 e3       	ldi	r24, 0x30	; 48
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uart_print>
	// Buffer for keeping count when motor started
	int32_t forward_count = 0;
	int32_t reverse_count = 0;
	int32_t target_count  = 0;
	int motor_running_forward = 0;
	int motor_running_backward = 0;
 2d8:	a1 2c       	mov	r10, r1
 2da:	b1 2c       	mov	r11, r1
	
	// Buffer for keeping count when motor started
	int32_t forward_count = 0;
	int32_t reverse_count = 0;
	int32_t target_count  = 0;
	int motor_running_forward = 0;
 2dc:	81 2c       	mov	r8, r1
 2de:	91 2c       	mov	r9, r1
	char buffer[20];
	
	// Buffer for keeping count when motor started
	int32_t forward_count = 0;
	int32_t reverse_count = 0;
	int32_t target_count  = 0;
 2e0:	c1 2c       	mov	r12, r1
 2e2:	d1 2c       	mov	r13, r1
 2e4:	76 01       	movw	r14, r12
				_delay_ms(100);
				reverse_count = global_counts_m2;
				target_count = reverse_count - 2150 ;
				pwm_init();
				PORTE |= (1<<PORTE2);
				motor_running_backward = 1;
 2e6:	44 24       	eor	r4, r4
 2e8:	43 94       	inc	r4
 2ea:	51 2c       	mov	r5, r1
				motor_running_forward = 1;
			}
		}
		
		//Keeping track of current rotation and stop when target is reached while running forward
		if((motor_running_forward == 1) & (target_count == global_counts_m2))
 2ec:	11 e0       	ldi	r17, 0x01	; 1
 2ee:	00 e0       	ldi	r16, 0x00	; 0
			_delay_ms(100);
			stop_pwm();
			uart_print( "Count :" );
			itoa(global_counts_m2,buffer,10);
			uart_print(buffer);
			motor_running_forward = 0;
 2f0:	61 2c       	mov	r6, r1
 2f2:	71 2c       	mov	r7, r1
	uart_print( "Press Button A to move motor BACKWARD\n" );
	uart_print( "Press Button C to move motor FORWARD\n" );
	
	while(1)
	{
		if(PINB & (1<<PINB3))			//Button A for reverse rotation
 2f4:	1b 99       	sbic	0x03, 3	; 3
 2f6:	1f c0       	rjmp	.+62     	; 0x336 <main+0xb4>
		{
		}
		else
		{
			if(motor_running_backward == 0)
 2f8:	a1 14       	cp	r10, r1
 2fa:	b1 04       	cpc	r11, r1
 2fc:	e1 f4       	brne	.+56     	; 0x336 <main+0xb4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	81 ee       	ldi	r24, 0xE1	; 225
 302:	94 e0       	ldi	r25, 0x04	; 4
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x82>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x8c>
 30e:	00 00       	nop
			{
				_delay_ms(100);
				reverse_count = global_counts_m2;
 310:	c0 90 5f 01 	lds	r12, 0x015F
 314:	d0 90 60 01 	lds	r13, 0x0160
 318:	0d 2c       	mov	r0, r13
 31a:	00 0c       	add	r0, r0
 31c:	ee 08       	sbc	r14, r14
 31e:	ff 08       	sbc	r15, r15
				target_count = reverse_count - 2150 ;
 320:	26 e6       	ldi	r18, 0x66	; 102
 322:	c2 1a       	sub	r12, r18
 324:	28 e0       	ldi	r18, 0x08	; 8
 326:	d2 0a       	sbc	r13, r18
 328:	e1 08       	sbc	r14, r1
 32a:	f1 08       	sbc	r15, r1
				pwm_init();
 32c:	0e 94 75 00 	call	0xea	; 0xea <pwm_init>
				PORTE |= (1<<PORTE2);
 330:	72 9a       	sbi	0x0e, 2	; 14
				motor_running_backward = 1;
 332:	a4 2c       	mov	r10, r4
 334:	b5 2c       	mov	r11, r5
			}
		}
		
		if(PINB & (1<<PINB0))				//Button C for forward rotation
 336:	18 99       	sbic	0x03, 0	; 3
 338:	1f c0       	rjmp	.+62     	; 0x378 <main+0xf6>
		{
		}
		else
		{
			if(motor_running_forward == 0)
 33a:	81 14       	cp	r8, r1
 33c:	91 04       	cpc	r9, r1
 33e:	e1 f4       	brne	.+56     	; 0x378 <main+0xf6>
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	91 ee       	ldi	r25, 0xE1	; 225
 344:	24 e0       	ldi	r18, 0x04	; 4
 346:	81 50       	subi	r24, 0x01	; 1
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	20 40       	sbci	r18, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0xc4>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0xce>
 350:	00 00       	nop
			{
				_delay_ms(100);
				forward_count = global_counts_m2;
 352:	c0 90 5f 01 	lds	r12, 0x015F
 356:	d0 90 60 01 	lds	r13, 0x0160
 35a:	0d 2c       	mov	r0, r13
 35c:	00 0c       	add	r0, r0
 35e:	ee 08       	sbc	r14, r14
 360:	ff 08       	sbc	r15, r15
				target_count = forward_count + 2150;
 362:	86 e6       	ldi	r24, 0x66	; 102
 364:	c8 0e       	add	r12, r24
 366:	88 e0       	ldi	r24, 0x08	; 8
 368:	d8 1e       	adc	r13, r24
 36a:	e1 1c       	adc	r14, r1
 36c:	f1 1c       	adc	r15, r1
				pwm_init();
 36e:	0e 94 75 00 	call	0xea	; 0xea <pwm_init>
				PORTE &= ~(1<<PORTE2);
 372:	72 98       	cbi	0x0e, 2	; 14
				motor_running_forward = 1;
 374:	84 2c       	mov	r8, r4
 376:	95 2c       	mov	r9, r5
			}
		}
		
		//Keeping track of current rotation and stop when target is reached while running forward
		if((motor_running_forward == 1) & (target_count == global_counts_m2))
 378:	80 91 5f 01 	lds	r24, 0x015F
 37c:	90 91 60 01 	lds	r25, 0x0160
 380:	09 2e       	mov	r0, r25
 382:	00 0c       	add	r0, r0
 384:	aa 0b       	sbc	r26, r26
 386:	bb 0b       	sbc	r27, r27
 388:	21 2f       	mov	r18, r17
 38a:	8c 15       	cp	r24, r12
 38c:	9d 05       	cpc	r25, r13
 38e:	ae 05       	cpc	r26, r14
 390:	bf 05       	cpc	r27, r15
 392:	09 f0       	breq	.+2      	; 0x396 <main+0x114>
 394:	20 2f       	mov	r18, r16
 396:	22 23       	and	r18, r18
 398:	39 f1       	breq	.+78     	; 0x3e8 <main+0x166>
 39a:	81 2f       	mov	r24, r17
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	89 16       	cp	r8, r25
 3a0:	91 04       	cpc	r9, r1
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <main+0x124>
 3a4:	80 2f       	mov	r24, r16
 3a6:	88 23       	and	r24, r24
 3a8:	f9 f0       	breq	.+62     	; 0x3e8 <main+0x166>
 3aa:	2f ef       	ldi	r18, 0xFF	; 255
 3ac:	81 ee       	ldi	r24, 0xE1	; 225
 3ae:	94 e0       	ldi	r25, 0x04	; 4
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <main+0x12e>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x138>
 3ba:	00 00       	nop
		{
			_delay_ms(100);
			stop_pwm();
 3bc:	0e 94 9c 00 	call	0x138	; 0x138 <stop_pwm>
			uart_print( "Count :" );
 3c0:	86 e5       	ldi	r24, 0x56	; 86
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uart_print>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3c8:	4a e0       	ldi	r20, 0x0A	; 10
 3ca:	be 01       	movw	r22, r28
 3cc:	6f 5f       	subi	r22, 0xFF	; 255
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	80 91 5f 01 	lds	r24, 0x015F
 3d4:	90 91 60 01 	lds	r25, 0x0160
 3d8:	0e 94 2f 02 	call	0x45e	; 0x45e <__itoa_ncheck>
			itoa(global_counts_m2,buffer,10);
			uart_print(buffer);
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uart_print>
			motor_running_forward = 0;
 3e4:	86 2c       	mov	r8, r6
 3e6:	97 2c       	mov	r9, r7
		}
		
		//Keeping track of current rotation and stop when target is reached while running backward
		if((motor_running_backward == 1) & (target_count == global_counts_m2))
 3e8:	80 91 5f 01 	lds	r24, 0x015F
 3ec:	90 91 60 01 	lds	r25, 0x0160
 3f0:	09 2e       	mov	r0, r25
 3f2:	00 0c       	add	r0, r0
 3f4:	aa 0b       	sbc	r26, r26
 3f6:	bb 0b       	sbc	r27, r27
 3f8:	21 2f       	mov	r18, r17
 3fa:	8c 15       	cp	r24, r12
 3fc:	9d 05       	cpc	r25, r13
 3fe:	ae 05       	cpc	r26, r14
 400:	bf 05       	cpc	r27, r15
 402:	09 f0       	breq	.+2      	; 0x406 <main+0x184>
 404:	20 2f       	mov	r18, r16
 406:	22 23       	and	r18, r18
 408:	09 f4       	brne	.+2      	; 0x40c <main+0x18a>
 40a:	74 cf       	rjmp	.-280    	; 0x2f4 <main+0x72>
 40c:	81 2f       	mov	r24, r17
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	a2 16       	cp	r10, r18
 412:	b1 04       	cpc	r11, r1
 414:	09 f0       	breq	.+2      	; 0x418 <main+0x196>
 416:	80 2f       	mov	r24, r16
 418:	88 23       	and	r24, r24
 41a:	09 f4       	brne	.+2      	; 0x41e <main+0x19c>
 41c:	6b cf       	rjmp	.-298    	; 0x2f4 <main+0x72>
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	91 ee       	ldi	r25, 0xE1	; 225
 422:	24 e0       	ldi	r18, 0x04	; 4
 424:	81 50       	subi	r24, 0x01	; 1
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	20 40       	sbci	r18, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <main+0x1a2>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <main+0x1ac>
 42e:	00 00       	nop
		{
			_delay_ms(100);
			stop_pwm();
 430:	0e 94 9c 00 	call	0x138	; 0x138 <stop_pwm>
			uart_print( "Count :" );
 434:	86 e5       	ldi	r24, 0x56	; 86
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uart_print>
 43c:	4a e0       	ldi	r20, 0x0A	; 10
 43e:	be 01       	movw	r22, r28
 440:	6f 5f       	subi	r22, 0xFF	; 255
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	80 91 5f 01 	lds	r24, 0x015F
 448:	90 91 60 01 	lds	r25, 0x0160
 44c:	0e 94 2f 02 	call	0x45e	; 0x45e <__itoa_ncheck>
			itoa(global_counts_m2,buffer,10);
			uart_print(buffer);
 450:	ce 01       	movw	r24, r28
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uart_print>
			motor_running_backward = 0;
 458:	a6 2c       	mov	r10, r6
 45a:	b7 2c       	mov	r11, r7
 45c:	4b cf       	rjmp	.-362    	; 0x2f4 <main+0x72>

0000045e <__itoa_ncheck>:
 45e:	bb 27       	eor	r27, r27
 460:	4a 30       	cpi	r20, 0x0A	; 10
 462:	31 f4       	brne	.+12     	; 0x470 <__itoa_ncheck+0x12>
 464:	99 23       	and	r25, r25
 466:	22 f4       	brpl	.+8      	; 0x470 <__itoa_ncheck+0x12>
 468:	bd e2       	ldi	r27, 0x2D	; 45
 46a:	90 95       	com	r25
 46c:	81 95       	neg	r24
 46e:	9f 4f       	sbci	r25, 0xFF	; 255
 470:	0c 94 3b 02 	jmp	0x476	; 0x476 <__utoa_common>

00000474 <__utoa_ncheck>:
 474:	bb 27       	eor	r27, r27

00000476 <__utoa_common>:
 476:	fb 01       	movw	r30, r22
 478:	55 27       	eor	r21, r21
 47a:	aa 27       	eor	r26, r26
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	aa 1f       	adc	r26, r26
 482:	a4 17       	cp	r26, r20
 484:	10 f0       	brcs	.+4      	; 0x48a <__utoa_common+0x14>
 486:	a4 1b       	sub	r26, r20
 488:	83 95       	inc	r24
 48a:	50 51       	subi	r21, 0x10	; 16
 48c:	b9 f7       	brne	.-18     	; 0x47c <__utoa_common+0x6>
 48e:	a0 5d       	subi	r26, 0xD0	; 208
 490:	aa 33       	cpi	r26, 0x3A	; 58
 492:	08 f0       	brcs	.+2      	; 0x496 <__utoa_common+0x20>
 494:	a9 5d       	subi	r26, 0xD9	; 217
 496:	a1 93       	st	Z+, r26
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	79 f7       	brne	.-34     	; 0x47a <__utoa_common+0x4>
 49c:	b1 11       	cpse	r27, r1
 49e:	b1 93       	st	Z+, r27
 4a0:	11 92       	st	Z+, r1
 4a2:	cb 01       	movw	r24, r22
 4a4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <strrev>

000004a8 <strrev>:
 4a8:	dc 01       	movw	r26, r24
 4aa:	fc 01       	movw	r30, r24
 4ac:	67 2f       	mov	r22, r23
 4ae:	71 91       	ld	r23, Z+
 4b0:	77 23       	and	r23, r23
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <strrev+0x4>
 4b4:	32 97       	sbiw	r30, 0x02	; 2
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <strrev+0x18>
 4b8:	7c 91       	ld	r23, X
 4ba:	6d 93       	st	X+, r22
 4bc:	70 83       	st	Z, r23
 4be:	62 91       	ld	r22, -Z
 4c0:	ae 17       	cp	r26, r30
 4c2:	bf 07       	cpc	r27, r31
 4c4:	c8 f3       	brcs	.-14     	; 0x4b8 <strrev+0x10>
 4c6:	08 95       	ret

000004c8 <_exit>:
 4c8:	f8 94       	cli

000004ca <__stop_program>:
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <__stop_program>
